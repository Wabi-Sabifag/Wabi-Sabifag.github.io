<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>当你抬头仰望星辰时，月辉亲昵双颊</title>
  
  <subtitle>见你所见、我如影随</subtitle>
  <link href="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/"/>
  <updated>2023-06-08T11:43:55.503Z</updated>
  <id>https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/</id>
  
  <author>
    <name>Wabi-Sabifag</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SoftWareTest</title>
    <link href="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/03/01/SoftWareTest/"/>
    <id>https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/03/01/SoftWareTest/</id>
    <published>2023-03-01T01:40:17.000Z</published>
    <updated>2023-06-08T11:43:55.503Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Selenium自动化测试"><a href="#Selenium自动化测试" class="headerlink" title="Selenium自动化测试"></a>Selenium自动化测试</h1><h2 id="1-实例"><a href="#1-实例" class="headerlink" title="1.实例"></a>1.实例</h2><h3 id="1-初步认识Selenium"><a href="#1-初步认识Selenium" class="headerlink" title="1. 初步认识Selenium"></a>1. 初步认识Selenium</h3><pre class="line-numbers language-none"><code class="language-none">#1 导入webdriverfrom selenium import webdriver          from selenium.webdriver.chrome.options import Optionsfrom selenium.webdriver.common.by import By#  鼠标事件对象from selenium.webdriver.common.action_chains import ActionChains#   键盘事件对象from selenium.webdriver.common.keys import Keysoptions = Options()options.add_experimental_option('detach',True)#2. 打开谷歌driver=webdriver.Chrome(options=options)      #3. 谷歌.中打开链接driver.get("https://www.baidu.com")     #4. 向搜索框输入 javadriver.find_element(By.ID,"kw").send_keys("java")   driver.implicitly_wait(1)#5. 点击搜索按钮driver.find_element(By.XPATH,'//input[@type="submit"]').click()     driver.implicitly_wait(2)  # 6. 将driver 对象绑定 鼠标执行事件test = ActionChains(driver)clearText = driver.find_element(By.XPATH,'//*[@id="form"]/span[1]/i[1]')refullText = driver.find_element(By.ID,"kw")#7.  perform()  执行代码test.click(clearText).perform()driver.implicitly_wait(2)test.click(refullText).click().send_keys("Bilibili").perform()driver.implicitly_wait(2) #8.  关闭。退出浏览器 driver.quit()  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-适用Selenium-基础功能"><a href="#2-适用Selenium-基础功能" class="headerlink" title="2. 适用Selenium 基础功能"></a>2. 适用Selenium 基础功能</h3><pre class="line-numbers language-none"><code class="language-none">from  time import sleepfrom selenium import  webdriverfrom selenium.webdriver.common.by import By'''TODO: Let`s driver stay work, didn`t auto colse'''from selenium.webdriver.chrome.options import Optionsoptions = Options()options.add_experimental_option('detach',True)driver=webdriver.Chrome(options=options)driver.get("https://www.baidu.com")driver.find_element(By.ID,"kw").send_keys("i.chaoxing.com")driver.implicitly_wait(1)driver.find_element(By.XPATH,'//input[@type="submit"]').click()driver.implicitly_wait(2)'''TODO: Useing JavaScript Language execute driver'''# let Webpage scroll down# js = "window.scrollTo(600,300)"# driver.execute_script(js)driver.find_element(By.XPATH,'//*[@id="1"]/div/div[1]/h3/a').click()driver.implicitly_wait(1)# jump to a new webPagehandles = driver.window_handlesdriver.switch_to.window(handles[-1])driver.implicitly_wait(1)# Now click in the Chaoxing Webdriver.find_element(By.ID,"phone").send_keys('123456')driver.implicitly_wait(1)driver.find_element(By.ID,"pwd").send_keys('123456')driver.implicitly_wait(1)driver.find_element(By.ID,'loginBtn').click()driver.implicitly_wait(1)driver.find_element(By.NAME,"笔记").click()driver.implicitly_wait(1)driver.back()driver.implicitly_wait(1)driver.forward()driver.implicitly_wait(1)driver.refresh()driver.implicitly_wait(1)'''TODO: Update webpage place'''handles = driver.window_handlesdriver.switch_to.window(handles[-1])driver.implicitly_wait(1)driver.maximize_window()driver.implicitly_wait(1)driver.find_element(By.NAME,"课程").click()driver.implicitly_wait(1)'''TODO: iframe  框架       switch_to.frame("IDName")  to differ'''driver.switch_to.frame("frame_content")driver.find_element(By.XPATH,"//*[@id='addCourse']").click()sleep(2)# Form js factory scrollTop and scrollDownjs = "var js = document.documentElement.scrollTotop=1000"driver.execute_script(js)sleep(2)js = "var js = document.documentElement.scrollTotop=0"driver.execute_script(js)sleep(2)driver.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-进阶Selenium-本地文件导入"><a href="#3-进阶Selenium-本地文件导入" class="headerlink" title="3. 进阶Selenium 本地文件导入"></a>3. 进阶Selenium 本地文件导入</h3><pre class="line-numbers language-none"><code class="language-none">import timefrom selenium.webdriver.chrome.options import Optionsfrom selenium import  webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.common.action_chains import ActionChainsfrom selenium.webdriver.common.keys import Keysimport unittestclass sendQQMail(unittest.TestCase):    def setUp(self):        options = Options()        options.add_experimental_option('detach', True)        driver = webdriver.Chrome(options=options)                driver.get("https://mail.qq.com")        test = ActionChains(driver)        driver.implicitly_wait(25)    def Test_sendQQMail(self):        # 点击写信        self.driver.find_element(By.ID, "composebtn").click()        self.driver.implicitly_wait(2)        # TODO:iframe  框架        self.driver.switch_to.frame("mainFrame")        self.driver.implicitly_wait(2)        # input 按钮        '''输入信息'''        t = self.driver.find_element(By.XPATH, '//*[@id="toAreaCtrl"]/div[2]/input')        self.driver.implicitly_wait(2)        t.send_keys("1109388794@qq.com")        self.driver.implicitly_wait(2)        print("写入收信信息完成")        # 导入本地文件        tt = self.driver.find_element(By.XPATH, '//*[@id="AttachFrame"]/span/input')        self.driver.implicitly_wait(2)                '''         通过Driver驱动的鼠标事件绑定,        send_keys方法,        r'': 导入本地文件路径，注意格式        '''        self.test.send_keys(r'D:\爱德华·艾力克.txt')        print("写入本地文件完成")        self.driver.implicitly_wait(2)        self.driver.find_element(By.XPATH, '//*[@id="toolbar"]/div/a[1]').click()        print("发生完成")        time.sleep(10)    def tearDown(self):        self.driver.quit()        print('========== End ==========')# 该文件名称下，直接调用unittest下的testif __name__ == '__test__':    unittest.test()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-进阶Selenium-数据驱动-动态填入数据"><a href="#4-进阶Selenium-数据驱动-动态填入数据" class="headerlink" title="4. 进阶Selenium 数据驱动:动态填入数据"></a>4. 进阶Selenium 数据驱动:动态填入数据</h3><pre class="line-numbers language-none"><code class="language-none">import csvimport timefrom selenium import webdriverimport unittestfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.chrome.options import Options#  数据驱动from ddt import ddt,data,unpack#  方法: 获取文件 UserData.csvdef get_Data(file_Name):   # open the CSV    rows = []    data_file = open(file_Name,"r",encoding="utf-8")    reader = csv.reader(data_file)    next(reader,None)    for row in reader:        rows.append(row)    return rows#  方法: 实现页面自动化登录def ActualResult(driver,username,password):    # Now click in the Chaoxing Web    driver.find_element(By.ID, "phone").send_keys(username)    driver.implicitly_wait(1)    driver.find_element(By.ID, "pwd").send_keys(password)    driver.implicitly_wait(1)    driver.find_element(By.ID, 'loginBtn').click()    time.sleep(3)    return driver.title@ddt  class testAdd(unittest.TestCase):    def setUp(self):        options = Options()        options.add_experimental_option('detach', True)        driver = webdriver.Chrome(options=options)        driver.get("https://i.chaoxing.com")        self.driver = driver    def tearDown(self) -&gt; None: self.driver.quit()    @data(*get_Data("UserData.csv"))    # @unittest.skip(u"无条件跳过")    @unpack    def test_add(self,username,password,expectedValue):  # TODO：searchValue,expectedValue值得方向        # 获取 页面的 title        title=ActualResult(self.driver,username,password)        # 断言： 比较结果 True / False        self.assertEqual(expectedValue,title,"断言结果：")if __name__=="__main__":    unittest.main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-进阶Selenium-PageObject-组件调用"><a href="#5-进阶Selenium-PageObject-组件调用" class="headerlink" title="5. 进阶Selenium PageObject:组件调用"></a>5. 进阶Selenium PageObject:组件调用</h3><pre class="line-numbers language-none"><code class="language-none"># base.pyclass Base:    # 一、定义一个基类    # 1.  # 定义一个初始化函数，初始化浏览器驱动    def __init__(self,driver):        self.driver=driver    # 2.  # 定义一个open方法    def open(self):        self.driver.get("https://i.chaoxing.com/")    # 3.  # 定义一个定位元素    def elementfind(self,*value):        return self.driver.find_element(*value)    # 4.  # 定义一个关闭浏览器的方法    def close(self):        self.driver.quit()# login.pyfrom time import sleepfrom Base import Basefrom selenium.webdriver.common.by import Byclass login(Base):    #  变量    userName=(By.ID, "phone")    userPasswd=(By.ID, "pwd")    btn=(By.ID, "loginBtn")    def input(self,value1,value2):        self.elementfind(*value1).send_keys(value2)    def btnClick(self,btn):        self.elementfind(*btn).click()    def Login(driver,username,userpwd):        page=login(driver)        page.open()        sleep(1)        page.input(page.userName,username)        sleep(1)        page.input(page.userPasswd,userpwd)        sleep(3)        page.btnClick(page.btn)#getDataimport csvdef getData(file_name):    rows=[]    file_data=open(file_name,'r',encoding='utf8')    reader=csv.reader(file_data)    next(reader)    for row in reader:        rows.append(row)    return rows#testfrom selenium import webdriverfrom selenium.webdriver.chrome.options import Optionsfrom ddt import ddt,data,unpackimport unittestfrom getData import getDatafrom login import login@ddtclass LoginTest(unittest.TestCase):    def setUp(self) -&gt; None:        print("-----setUp-----")        options = Options()        options.add_experimental_option("detach", True)        driver = webdriver.Chrome(options=options)        self.driver=driver    def tearDown(self) -&gt; None:        print("-----tearDown-----")        self.driver.quit()    @data(*getData("data.csv"))    @unpack    def testlogin(self,username,userpwd,title):        driver=self.driver        login.Login(driver,username,userpwd)        actualtitle=driver.title        #  断言测试结果        self.assertEqual(actualtitle,title)if __name__=="__main__":    unittest.main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-理论"><a href="#2-理论" class="headerlink" title="2. 理论"></a>2. 理论</h2><h3 id="1-Unittest-单元测试"><a href="#1-Unittest-单元测试" class="headerlink" title="1. Unittest(单元测试)"></a>1. Unittest(单元测试)</h3><h4 id="1-断言"><a href="#1-断言" class="headerlink" title="1.断言"></a>1.断言</h4><pre class="line-numbers language-none"><code class="language-none">方法                            校验条件                            应用实例assertEqual(a,b[,msg])              a===b                           msg对象用于说明失败原因assertNotEqual(a,b[,msg])           a!=b                            assertTrue(x[,msg])                 bool(x) is True                 检验给出的表达式:assertFalse(x[,msg])                bool(x) is False                    检验一个元素是否出现在页面assertNot(a,b[,msg])                a is not b                          assertTrue(element.is_displayed())assertRaises(exc,fun,*args,**kwds)  fun(*args,**kwds)raises exc     检验特定异常是否被具体测试步骤抛出assertRaisesRegrexp(exc,fun,*args,**kwds)assertAlmostEqual(a,b)              round(a-b,7)===0                将给定的数值四舍五入assertNotAlmostEqual(a,b)           round(a-b,7)!=0                 有助于统计由于四舍五入产生的错误assertGreater(a,b)                  a&gt;b                              逻辑判定条件assertGreaterEqual(a,b)             a&gt;=bassertLess(a,b)                     a&lt;bassertLessEqual                     a&lt;=bassertRegexpMatches(s,r)            r.search(s)                    检查文本是否符合正则匹配 assertNotRegexpMatches(s,r)         not.search(s)assertMultiLineEquak(a,b)           strings                         assertEqual的特殊形式，为多行字符串设计。assertListEqual(a,b)                lists                           对于下拉列表选项字段的检验非常有用fail()                                                              无条件失败。当上面的方法不适用时,                                                                    通过此方法可以创建定制的条件模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-ElementFind-元素定位"><a href="#2-ElementFind-元素定位" class="headerlink" title="2. ElementFind(元素定位)"></a>2. ElementFind(元素定位)</h4><ol><li>获取单个元素<pre class="line-numbers language-none"><code class="language-none">1. elementfind(By.ID,"")                2. elementfind(By.NAME,"")3. elementfind(By.CLASS_NAME,"")        4. elementfind(By.TAGNAME,"")           #获取元素标签名5. elementfind(By.XPATH,"")             #获取元素XPATH6. elementfind(By.CSS_SELECTOR,"")      #获取元素CSS7. elementfind(By.LINK_TEXT,"")         #获取文本信息8. elementfind(By.PARTIAL_LINK_TEXT,"") #获取部分文本信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>获取多个元素<pre class="line-numbers language-none"><code class="language-none">1. elementfinds(By.ID,"")                2. elementfinds(By.NAME,"")3. elementfinds(By.CLASS_NAME,"")        4. elementfinds(By.TAGNAME,"")           #获取元素标签名5. elementfinds(By.XPATH,"")             #获取元素XPATH6. elementfinds(By.CSS_SELECTOR,"")      #获取元素CSS7. elementfinds(By.LINK_TEXT,"")         #获取文本信息8. elementfinds(By.PARTIAL_LINK_TEXT,"") #获取部分文本信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="3-WebDriver-驱动"><a href="#3-WebDriver-驱动" class="headerlink" title="3. WebDriver(驱动)"></a>3. WebDriver(驱动)</h4><ol><li>WebDriver功能<pre class="line-numbers language-none"><code class="language-none">属性/功能page_source             name                    获取当前浏览器的名称titleorientation             获取当前设设备的方位current_window_handle   获取当前窗口的句柄current_url             获取当前页面的URL地址window_handles          获取当前session里的所有窗口的句柄<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>WebDriver方法<pre class="line-numbers language-none"><code class="language-none">方法back()close()                             关闭当前网页forward()  get(url)maximize_window()quit()                              退出当前Driver，关闭所有窗口refresh()switch_to_active_element()          返回当前页面唯一焦点所在的网页或者元素switch_to_alert()                   把焦点切换至当前页面弹出的警告switch_to_default_content()         切换焦点至默认框架内switch_to-frame("")                 switch_to_window(window_name)       切换焦点到指定的窗口名称或者句柄implicity_wait(time)                等待目标元素被找到，或目标指令完成set_page_load_timeout(time)         页面完全加载完成  set_script_timeout(time)            设置脚本执行的超时时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="4-WebElememt-接口"><a href="#4-WebElememt-接口" class="headerlink" title="4. WebElememt(接口)"></a>4. WebElememt(接口)</h4><ol><li>WebElememt功能<pre class="line-numbers language-none"><code class="language-none">属性/功能sizetag_nametext<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>WebElememt方法<pre class="line-numbers language-none"><code class="language-none">clear()click()get_attribute("name")               获取元素的属性值is_displayed()                      检查元素对于用户是否可见is_enable()                         检查元素是否可用is_selected()                       检查元素是否可选中send_keys(*Value)                   模拟输入文本value_of_css_property("")               获取CSS属性的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="5-Select-操作下拉菜单"><a href="#5-Select-操作下拉菜单" class="headerlink" title="5. Select(操作下拉菜单)"></a>5. Select(操作下拉菜单)</h4><p>select = Select(driver,elemnetfind(By.ID,”id”))</p><ol><li>Select功能<pre class="line-numbers language-none"><code class="language-none">all_selected_options                获取下拉菜单和列表中选择的所有选项内容first_selectedP_option              获取下拉菜单和列表的第一个选项、当前选择项options                             获取下拉菜单和列表的所有选项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Select方法<pre class="line-numbers language-none"><code class="language-none">deselect_all()                      清除多选清除下拉菜单和列表的所有选项deselect(By.INDEX,"index")          根据索引清除下拉菜单和列表的所有选项deselect(By.VALUE,"value")          清除所有选项值和给定参数匹配的下拉菜单和列表的所有选项deselect(By.VISIBLE_TEXT,"text")    清除所有展示文本和给定参数匹配的下拉菜单和列表的所有选项select(By.INDEX,"index")select(By.VALUE,"value")select(By.VISIBLE_TEXT,"text")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="6-Alert-警告"><a href="#6-Alert-警告" class="headerlink" title="6. Alert(警告)"></a>6. Alert(警告)</h4><p>alert = driver.switch_to_alert()</p><ol><li>Alert功能<pre class="line-numbers language-none"><code class="language-none">text                    获取警告窗文本<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>Alert方法<pre class="line-numbers language-none"><code class="language-none">accept()                接受JavaScript警告信息，单机OK按钮         dismiss()               驳回JavaScript警告信息send_keys(*value)       模拟元素输入信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="7-键盘和鼠标事件"><a href="#7-键盘和鼠标事件" class="headerlink" title="7. 键盘和鼠标事件"></a>7. 键盘和鼠标事件</h4><pre class="line-numbers language-none"><code class="language-none">click(on_element=None)              单击元素click_and_hold(on_elemnet)          对元素按住左键double_click(on_element=None)       双击元素操作drag_and_drop(source,target)        源元素拖动到释放元素key_down(value,element=None)        仅按下(Keys.SHIFT) -&gt;  send_keys('n')key_up(value,element=None)          仅释放(Keys.SHIFT)move_to_element(to_element)         将鼠标移动至元素的中央perform()                           提交已保存的动作release(on_element=None)            释放鼠标send_keys(keys_to_send)             对当前焦点元素的键盘操作send_keys_to_element(element,keys_to_send)      对指定元素的键盘操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-JavaScript"><a href="#8-JavaScript" class="headerlink" title="8. JavaScript"></a>8. JavaScript</h4><p>driver.execute_script(“return)</p><pre class="line-numbers language-none"><code class="language-none">1. execute_async_script(script,*args)       异步代码2. execute_acript(script,*args)             同步代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/Python/"/>
    
    <category term="数据分析" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/Python/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Python" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/Python/"/>
    
    <category term="数据分析" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js</title>
    <link href="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/02/23/Vue.js/"/>
    <id>https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/02/23/Vue.js/</id>
    <published>2023-02-23T04:14:11.000Z</published>
    <updated>2023-03-22T10:46:54.109Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h1><h2 id="1-Vue实列"><a href="#1-Vue实列" class="headerlink" title="1.Vue实列"></a>1.Vue实列</h2><h3 id="1-挂载元素"><a href="#1-挂载元素" class="headerlink" title="1.挂载元素"></a>1.挂载元素</h3><h3 id="2-数据"><a href="#2-数据" class="headerlink" title="2.数据"></a>2.数据</h3><h3 id="3-初始值"><a href="#3-初始值" class="headerlink" title="3.初始值"></a>3.初始值</h3><pre class="line-numbers language-none"><code class="language-none">name:'',count:0,price:[],flag:true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-创建Vue实列"><a href="#1-创建Vue实列" class="headerlink" title="1.创建Vue实列"></a>1.创建Vue实列</h4><pre class="line-numbers language-none"><code class="language-none">实列：&lt;script src="./vue.js"&gt;&lt;/script&gt;   //1.导入vue.js&lt;div class="box"&gt;    //2.1挂载数据 &lt;h3&gt;NetWeb:{{name}}&lt;/h3&gt; &lt;h3&gt;NetWebURl:{{url}}&lt;/h3&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt; var demo = new Vue({  el:'.box',      //2.2挂载数据代入  data:{// 3.数据   name:'Neoction School',   url:'www.NeoctionSchool'     } })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-重新设置Vue实列"><a href="#2-重新设置Vue实列" class="headerlink" title="2.重新设置Vue实列"></a>2.重新设置Vue实列</h4><p>—–data属性传入Vue实列</p><pre class="line-numbers language-none"><code class="language-none">//设定的data数据var data={name:'Holle,Java',url:'www.java.org.com'}; //创建数据 Vue实列，自动代理 data对象var demo=new Vue({ el:'.box', // 导入已存在的数据data data:data });//锚定对象  //将自定义数据data的url属性赋值给Vue实列的namedemo.name=data.name; //重新设置属性demo.url='httpa://www.java.org.com';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-区分符"><a href="#3-区分符" class="headerlink" title="3.$ 区分符"></a>3.$ 区分符</h4><p>——vue实列对象与用户定义属性的区分</p><pre class="line-numbers language-none"><code class="language-none">demo.$data=data;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-方法-methods"><a href="#4-方法-methods" class="headerlink" title="4.方法(methods)"></a>4.方法(methods)</h3><pre class="line-numbers language-none"><code class="language-none">&lt;div class="box"&gt;     &lt;h3&gt;{{showInfo()}}&lt;/h3&gt;    &lt;/div&gt;//设定的data数据var data={name:'Holle,Java',url:'www.java.org.com'}; //创建数据 Vue实列，自动代理 data对象var demo=new Vue({ el:'.box', // 导入已存在的数据data data:data,  // {name:'Holle,Java',url:'www.java.org.com'}, methods:{  showInfo:function(){   return this.name+":"+this.url   } }});demo.$data=data;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<br>    1.调用方法带()<br>    2.methods方法放入{}内部<br>    3.该方法有异常问题</p><h3 id="5-生命周期钩子函数"><a href="#5-生命周期钩子函数" class="headerlink" title="5.生命周期钩子函数"></a>5.生命周期钩子函数</h3><p>每一个Vue实列创建都有一系列的初始化步骤，通过这些钩子函数可以定义业务逻辑</p><ol><li>beforeCreate：在Vue实列开始初始化时调用</li><li>created：在实列创建之后进行调用，此时尚未开始DOM编译</li><li>mounted：在DOM文件渲染后进行调用（类似window.onload() )</li><li>beforeDestroy：在销毁实列前调用，此后实列任然有效</li><li>destroyed：在实列销毁后进行调用<pre class="line-numbers language-none"><code class="language-none">钩子函数:function(){ },<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="2-数据绑定"><a href="#2-数据绑定" class="headerlink" title="2.数据绑定"></a>2.数据绑定</h2><p>Vue.js 最核心的特性之一。建立数据绑定之后数据和视图会相互关联，当数据发生变换时，视图会自行进行更新。</p><h3 id="1-插值"><a href="#1-插值" class="headerlink" title="1.插值"></a>1.插值</h3><h4 id="1-文本插值"><a href="#1-文本插值" class="headerlink" title="1. 文本插值"></a>1. 文本插值</h4><h5 id="1-插值-1"><a href="#1-插值-1" class="headerlink" title="1.插值"></a>1.插值</h5><p>文本插值是最基本的形式</p><h5 id="2-v-once"><a href="#2-v-once" class="headerlink" title="2.v-once"></a>2.v-once</h5><p>单词插值，当数据对象的属性值发生变换时，插入的文本将不会更新<br>注意：</p><ol><li>v-once在标签内，不需要挂载属性</li><li>需要 插值 传入引用数据</li></ol><h4 id="2-插入HTML"><a href="#2-插入HTML" class="headerlink" title="2.插入HTML"></a>2.插入HTML</h4><p>因为 插值 会将值作为普通文本处理，输出HTML内容需要v-html</p><pre class="line-numbers language-none"><code class="language-none">实列：&lt;div class="box"&gt; &lt;p v-html="message"&gt;&lt;/p&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt; var demo=new Vue({  el:".box",  data:{   message:'&lt;h1&gt;Java,the best language in the world.&lt;/h1&gt;'  } })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<br>    1.v-html在标签内，挂载data数据的属性<br>    2.不需要 插值  来引用数据</p><h4 id="3-属性"><a href="#3-属性" class="headerlink" title="3.属性"></a>3.属性</h4><p>因为 插值 不能应用在html属性中。<br>要为html元素绑定属性，不能直接使用文本插值的方式，而需要v-bind指令对属性进行绑定。</p><h5 id="1-为html属性绑定-class"><a href="#1-为html属性绑定-class" class="headerlink" title="1.为html属性绑定 class"></a>1.为html属性绑定 class</h5><p>为html元素绑定class属性(css)</p><h6 id="1-实列一"><a href="#1-实列一" class="headerlink" title="1.实列一"></a>1.实列一</h6><p>将标签的class属性和数据对象的value属性进行绑定</p><pre class="line-numbers language-none"><code class="language-none">// html 显示&lt;div class="box"&gt;     // 声明 v-bind  调用js文件的class的value值。 &lt;span v-bind:class="value"&gt;Dream fall in truly。&lt;/span&gt;&lt;/div&gt;// js 实现&lt;script type="text/javascript"&gt; var demo=new Vue({  el:".box",  data:{   // 实现的css样式，在css池中定义   value:'title'  } });&lt;/script&gt;//  css 样式池&lt;style type="text/css"&gt; .title{  color: #ff0000;  border: 1px solid #FF00FF;  display: inline-block;  padding: 5px; }&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-实列二"><a href="#2-实列二" class="headerlink" title="2.实列二"></a>2.实列二</h6><p>应用v-bind指令将&lt;\span&gt;标签的class属性与数据对象中的value属性进行绑定，并判断title的值，如果title的值为true，则使用title；否则不适用该类</p><pre class="line-numbers language-none"><code class="language-none">//html显示&lt;div class="box"&gt;     &lt;span v-bind:class="{'title':value}"&gt;Dream fall in truly。&lt;/span&gt;&lt;/div&gt;//js 实现&lt;script type="text/javascript"&gt; var demo=new Vue({  el:".box",  data:{   value:true  } });&lt;/script&gt;//css样式池&lt;style type="text/css"&gt; .title{  color: #ff0000;  border: 1px solid #FF00FF;  display: inline-block;  padding: 5px; }&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<br>    1.v-bind:class=”{ ‘title’:value} ”  需要 {} 和实列一不同点</p><h4 id="4-表达式"><a href="#4-表达式" class="headerlink" title="4.表达式"></a>4.表达式</h4><p>给数据提供简写方式：</p><pre class="line-numbers language-none"><code class="language-none">列： &lt;a v-bind:href="url"&gt;明日学院&lt;/a&gt; &lt;!-- 简写 --&gt; &lt;a :href="url"&gt;明日学院&lt;/a&gt;列：  &lt;div id="box"&gt;   QQ:{{email.substr(0,email.indexOf('@'))}}   &lt;br /&gt;   e-mail:{{email}}  &lt;/div&gt;  &lt;script type="text/javascript"&gt;   var demo=new Vue({    el:'#box',    data:{     email:'4006751066@qq.com'     }    });  &lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-过滤器"><a href="#2-过滤器" class="headerlink" title="2.过滤器"></a>2.过滤器</h3><pre><code>对于一些需要经复杂计算的数据绑定，简单的表达式无法实现。</code></pre><p>vue.js的过滤器进行处理，可通过自定义的过滤器对文本进行格式化。<br>    过滤器可以在 插值 和 v-bind 指令中，过滤器需要被添加在JavaScript表达式的尾部，由管道符号  “|” 表示。<br>格式：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 在 插值 中 --&gt;{{message | myfilter}} &lt;!-- 在v-bind指令中 --&gt;&lt;div v-bind:id="rawId | formatId"&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>定义过滤器的两种方式：</p><ol><li>第一种：<br> 应用Vue.js全局变量 Vue.filter()<pre class="line-numbers language-none"><code class="language-none">Vue.filter( ID,function(){ } )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>第二种：<br> 选项定义本地过滤器 filter:{}<pre class="line-numbers language-none"><code class="language-none">&lt;a id="A"&gt;{{title | subStr}}&lt;/a&gt;&lt;script&gt; new Vue({   el:"A",   data:{   title:"这个String的长度"   },   filter:{   subStr:function(value){    if(value.length &gt; 10){     return value.subStr(0,10)+"...";    }else{     return value;    }   }  } });&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>注意：<br>1.多个过滤器可以串联使用，在filter:{} 中的本地方法可以通过写在插值后 用|隔开。<br>2.过滤器实质是一个方法，可以将参数传入设定的方法</li></ol><h3 id="3-指令"><a href="#3-指令" class="headerlink" title="3.指令"></a>3.指令</h3><p>解释：<br>v-bind: 、v-on: 等为指令</p><ol><li>参数<br>解释：<br>在指令和表达式之间，用冒号分隔开的<pre class="line-numbers language-none"><code class="language-none">&lt;img v-bind:src="imgsrc"&gt;          # img标签的 src 属性&lt;button v-on:click="login"&gt;登录&lt;/button&gt; # 监听的事件名称 click<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>修饰符<br>解释：<br>在参数后面，以半角句点符号指明的特殊后缀。<br>列：<pre class="line-numbers language-none"><code class="language-none"> #  .prevent 修饰符用于调用 event.preventDefault() 方法。&lt;form v-on:submit.prevent="onSubmit"&gt;&lt;/form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>解释：<br>当提交表单时会调用event.preventDefault()方法 用于阻止浏览器的默认行为。</li></ol><h2 id="3-列表渲染"><a href="#3-列表渲染" class="headerlink" title="3.列表渲染"></a>3.列表渲染</h2><h3 id="1-数组更新"><a href="#1-数组更新" class="headerlink" title="1.数组更新"></a>1.数组更新</h3><p>Vue.js 有包含检测数组变化的变异方法，调用时可以改变原始数据，并触发试图更新。</p><p>方法名      说明</p><p>push()像数据的末尾添加一个或多个元素</p><p>pop()将数组的最后一个元素从数组中删除</p><p>shift()将数组的第一个元素从数组中删除</p><p>unshift()向数组的开头添加一个或多个元素</p><p>splice()添加或删除数组中的元素</p><p>sort()对数组的元素进行排序</p><p>reverse()颠倒数组中元素的顺序</p><p>filter()</p><p>concat()</p><p>slice()获取数组该索引开始的元素</p><pre class="line-numbers language-none"><code class="language-none">列：var demo = new Vue({ el: '#box', data: {  items:[ //定义人物名称数组   {name:'张三'},   {name:'李四'}  ] }})// 向数组末尾添加数组元素demo.items.push({name:'赵六'});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-添加对象属性"><a href="#2-添加对象属性" class="headerlink" title="2. 添加对象属性"></a>2. 添加对象属性</h3><h4 id="Vue-set-vuedemo-set-Object-assign"><a href="#Vue-set-vuedemo-set-Object-assign" class="headerlink" title="Vue.set()  vuedemo.$set() Object.assign()"></a>Vue.set()  vuedemo.$set() Object.assign()</h4><h5 id="1-单列属性"><a href="#1-单列属性" class="headerlink" title="1.单列属性"></a>1.单列属性</h5><pre class="line-numbers language-none"><code class="language-none">Vue.set(demo.items, 1, {name:'李三'});或vuedemo.$set(demo.items, 1, {name:'李三'});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-多列属性"><a href="#2-多列属性" class="headerlink" title="2.多列属性"></a>2.多列属性</h5><pre class="line-numbers language-none"><code class="language-none">vuedemo.items = Object.assign( {},  vuedemo.items,  {  interest: "Sing",  address: "BeiJing" });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/JavaScript/"/>
    
    <category term="Vue" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/JavaScript/Vue/"/>
    
    
    <category term="JavaScript" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/JavaScript/"/>
    
    <category term="Vue" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>MPWeiXin</title>
    <link href="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/02/19/MPWeiXin/"/>
    <id>https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/02/19/MPWeiXin/</id>
    <published>2023-02-19T04:22:38.000Z</published>
    <updated>2023-03-13T01:50:26.014Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-1-开发工具"><a href="#1-1-开发工具" class="headerlink" title="1.1 开发工具"></a>1.1 开发工具</h1><h2 id="1-程序调试"><a href="#1-程序调试" class="headerlink" title="1.程序调试"></a>1.程序调试</h2><h3 id="1-模拟器"><a href="#1-模拟器" class="headerlink" title="1.模拟器"></a>1.模拟器</h3><p>客服端真实逻辑表现</p><h3 id="2-编辑器"><a href="#2-编辑器" class="headerlink" title="2.编辑器"></a>2.编辑器</h3><p>对项目进行代码编写和文件的添加，删除及重命名</p><h4 id="1-文件的编辑"><a href="#1-文件的编辑" class="headerlink" title="1.文件的编辑"></a>1.文件的编辑</h4><h5 id="1-wxml"><a href="#1-wxml" class="headerlink" title="1.wxml"></a>1.wxml</h5><p>帮助开发者直接写出相关的标签和标签的属性</p><h5 id="2-wxss"><a href="#2-wxss" class="headerlink" title="2.wxss"></a>2.wxss</h5><h5 id="3-js"><a href="#3-js" class="headerlink" title="3.js"></a>3.js</h5><p>帮助开发者补全所有API和相关的注释解释，并提供代码模板支持</p><h5 id="4-json"><a href="#4-json" class="headerlink" title="4.json"></a>4.json</h5><p>帮助开发者补全相关的配置，并实时给出提示</p><h5 id="5-wxs"><a href="#5-wxs" class="headerlink" title="5.wxs"></a>5.wxs</h5><h3 id="3-调试器"><a href="#3-调试器" class="headerlink" title="3.调试器"></a>3.调试器</h3><h4 id="1-功能模块"><a href="#1-功能模块" class="headerlink" title="1.功能模块"></a>1.功能模块</h4><h5 id="1-Console"><a href="#1-Console" class="headerlink" title="1.Console"></a>1.Console</h5><h6 id="1-开发者输入"><a href="#1-开发者输入" class="headerlink" title="1.开发者输入"></a>1.开发者输入</h6><h6 id="2-调式代码"><a href="#2-调式代码" class="headerlink" title="2.调式代码"></a>2.调式代码</h6><h6 id="3-微信小程序的错误输出"><a href="#3-微信小程序的错误输出" class="headerlink" title="3.微信小程序的错误输出"></a>3.微信小程序的错误输出</h6><h5 id="2-Sources"><a href="#2-Sources" class="headerlink" title="2.Sources"></a>2.Sources</h5><p>用于显示当前项目的脚本文件，同浏览器开发不同，微信小程序框架会对脚本文件进行编译开发者看到的文件是处理之后的脚本文件，开发者的代码都会包裹在define函数中</p><h5 id="3-NetWork"><a href="#3-NetWork" class="headerlink" title="3.NetWork"></a>3.NetWork</h5><p>用于观察和显示request和socket的请求情况</p><h5 id="4-Security"><a href="#4-Security" class="headerlink" title="4.Security"></a>4.Security</h5><p>安全认证</p><h5 id="5-Mock"><a href="#5-Mock" class="headerlink" title="5.Mock"></a>5.Mock</h5><p>数据模拟</p><h5 id="6-AppDate"><a href="#6-AppDate" class="headerlink" title="6.AppDate"></a>6.AppDate</h5><p>用于显示当前appdata的具体数据，实时的反馈项目数据情况用户可在此编辑数据，数据结果将及时反馈到界面上</p><h5 id="7-Audits"><a href="#7-Audits" class="headerlink" title="7.Audits"></a>7.Audits</h5><p>性能监控</p><h5 id="8-Sensor"><a href="#8-Sensor" class="headerlink" title="8.Sensor"></a>8.Sensor</h5><h6 id="1-模拟地理位置"><a href="#1-模拟地理位置" class="headerlink" title="1.模拟地理位置"></a>1.模拟地理位置</h6><h6 id="2-模拟移动设备表现-调试重力感应API"><a href="#2-模拟移动设备表现-调试重力感应API" class="headerlink" title="2.模拟移动设备表现(调试重力感应API)"></a>2.模拟移动设备表现(调试重力感应API)</h6><h5 id="9-Storage"><a href="#9-Storage" class="headerlink" title="9.Storage"></a>9.Storage</h5><p>用于显示当前项目使用wx.setStorage 或 wx.setSrorageSync 后的数据存储情况</p><h5 id="10-Trace"><a href="#10-Trace" class="headerlink" title="10.Trace"></a>10.Trace</h5><p>体验评分</p><h5 id="11-Wxml"><a href="#11-Wxml" class="headerlink" title="11.Wxml"></a>11.Wxml</h5><p>帮助开发者开发Wxml转化后的界面。可以看到页面结构及结构对应的WXSS属性，可以修改对应的WXSS属性</p><h3 id="4-云开发"><a href="#4-云开发" class="headerlink" title="4.云开发"></a>4.云开发</h3><h4 id="1-云开发控制台"><a href="#1-云开发控制台" class="headerlink" title="1.云开发控制台"></a>1.云开发控制台</h4><h5 id="1-运营分析"><a href="#1-运营分析" class="headerlink" title="1.运营分析"></a>1.运营分析</h5><h5 id="2-数据库"><a href="#2-数据库" class="headerlink" title="2.数据库"></a>2.数据库</h5><h5 id="3-存储"><a href="#3-存储" class="headerlink" title="3.存储"></a>3.存储</h5><h5 id="4-云函数"><a href="#4-云函数" class="headerlink" title="4.云函数"></a>4.云函数</h5><h1 id="1-2-技术框架"><a href="#1-2-技术框架" class="headerlink" title="1.2 技术框架"></a>1.2 技术框架</h1><h2 id="1-运行机制"><a href="#1-运行机制" class="headerlink" title="1.运行机制"></a>1.运行机制</h2><p>马上应用在新版本，使用 wx.getUpdatemannagerAPI 进行处理</p><h3 id="1-热加载"><a href="#1-热加载" class="headerlink" title="1.热加载"></a>1.热加载</h3><p>前台切换到后台</p><h3 id="2-冷加载"><a href="#2-冷加载" class="headerlink" title="2.冷加载"></a>2.冷加载</h3><p>重新加载</p><h2 id="2-启动配置"><a href="#2-启动配置" class="headerlink" title="2.启动配置"></a>2.启动配置</h2><h3 id="1-通过全局文件app-json设置启动页面"><a href="#1-通过全局文件app-json设置启动页面" class="headerlink" title="1.通过全局文件app.json设置启动页面"></a>1.通过全局文件app.json设置启动页面</h3><p>在app.json，pages数组中的第一个页面就是默认启动页面，只需要调整当前开打的页面在pages数组的顺序</p><h3 id="2-通过添加编译模式设置启动页面"><a href="#2-通过添加编译模式设置启动页面" class="headerlink" title="2.通过添加编译模式设置启动页面"></a>2.通过添加编译模式设置启动页面</h3><h2 id="3-目录结构"><a href="#3-目录结构" class="headerlink" title="3.目录结构"></a>3.目录结构</h2><h3 id="1-page文件夹"><a href="#1-page文件夹" class="headerlink" title="1.page文件夹"></a>1.page文件夹</h3><ol><li>index.js</li><li>index.json</li><li>index.wxml</li><li>index.wxssPS: 1.小程序每个页面必须有wxml和js 2.文件名称和页面文件夹的名称相同</li></ol><h3 id="2-utils文件夹"><a href="#2-utils文件夹" class="headerlink" title="2.utils文件夹"></a>2.utils文件夹</h3><p>  用于存放全局的js文件例： 公用的方法，对时间的处理</p><pre><code>  module.exports={  formatTime:formatTime  }</code></pre><p>  对允许外部调用的方法，在用module。exports语句进行声明，才能在其他js文件中用下代码引入</p><pre><code>  var util = require('../../utils/util.js')</code></pre><p>  然后可以调用方法。 如： 定义一个ulit函数</p><pre><code>  function util(){      console.log('模块被调用')     }   module.exports.util = util</code></pre><p>  然后在 index.js文件中调用这个 util 函数</p><pre><code>  var common = require('../../util.js')</code></pre><h3 id="3-app-js文件夹，app-json文件夹，app-wxss文件夹"><a href="#3-app-js文件夹，app-json文件夹，app-wxss文件夹" class="headerlink" title="3.app.js文件夹，app.json文件夹，app.wxss文件夹"></a>3.app.js文件夹，app.json文件夹，app.wxss文件夹</h3><ol start="5"><li>app.js文件用于存放系统方法处理的全局文件</li><li>app.json文件用于存放系统全局配置文件。 该文件可设置页面路径，网络，调试模式，导航条颜色，字体大小，是否有tabbar。</li></ol><h1 id="1-3-逻辑层"><a href="#1-3-逻辑层" class="headerlink" title="1.3 逻辑层"></a>1.3 逻辑层</h1><h1 id="4-1-视图容器组件"><a href="#4-1-视图容器组件" class="headerlink" title="4.1 视图容器组件"></a>4.1 视图容器组件</h1><h2 id="1-view-视图容器"><a href="#1-view-视图容器" class="headerlink" title="1.view 视图容器"></a>1.view 视图容器</h2><p>view 视图容器是 WXML 界面布局的基础组件，它的使用和 HTML 里的 DIV 类似，主要用于界<br>面的布局。view 视图容器也有自己的属性，如表所示。</p><p>属性                类型        默认值      说明</p><p>hover               Boolean     false       是否启用单击态</p><p>hover-class         String      none        指定按下去的样式类。当 hover-class=”none”时，<br>                                            没有单击态效果</p><p>hover-start-time    Number      50          按住后多久出现单击态，单位毫秒</p><p>hover-stay-time     Number      400         手指松开后单击态保留时间，单位毫秒</p><h2 id="2-scroll-view-可滚动视图区域"><a href="#2-scroll-view-可滚动视图区域" class="headerlink" title="2.scroll-view 可滚动视图区域"></a>2.scroll-view 可滚动视图区域</h2><p>scroll-view 可滚动视图区域允许视图区域内容横向滚动或者纵向滚动，类似于浏览器的横向滚<br>动条和垂直滚动条，scroll-view 拥有自己的属性和事件，如表所示。</p><p>属性                类型        默认值      说明</p><p>scroll-x            boolean     False       允许横向滚动</p><p>scroll-y            boolean     False       允许纵向滚动</p><p>upper-threshold     number      50          距顶部/左边多远时（单位为 px）,<br>                                            触发 scrolltoupper 事件</p><p>lower-threshold     number      50          距底部/右边多远时（单位为 px）,<br>                                            触发 scrolltolower 事件</p><p>scroll-top          number                  设置竖向滚动条位置</p><p>scroll-left         number                  设置横向滚动条位置</p><p>scroll-into-view    string                  值应为某子元素 id，则滚动到该元素，<br>                                            元素顶部对齐滚动区域顶部</p><p>scroll-with-anim    atio        boolean     在设置滚动条位置时使用动画过渡</p><p>enable-back-to-top  boolean     False       iOS 系统点击顶部状态栏、安卓系统<br>                                            双击标题栏时，滚动条返回顶部。只支持竖向</p><p>enable-flex         boolean      False      启用 flexbox 布局。开启后，如果当前<br>                                            节点声明了display：flex 就会成为<br>                                            flex container，并作用于其孩子节点</p><p>scroll-anchoring    boolean     False       开启 scroll anchoring 特性，即控制滚动位置<br>                                            不随内容变化而抖动。仅在 iOS 系统下生效，安<br>                                            卓系统下可参考 CSS 的 overflow-anchor 属性</p><p>refresher-enabled   boolean     False       开启自定义下拉刷新</p><p>refresher-threshold number      45          设置自定义下拉刷新阈值</p><p>refresher-default-style string  black       设置自定义下拉刷新默认样式，支持设置为black、<br>                                            white、none。none 表示不使用默认样式</p><p>refresher-background    string  #FFF        设置自定义下拉刷新区域背景颜色</p><p>refresher-triggered     boolean False       设置当前下拉刷新状态，true 表示下拉刷新已经<br>                                            被触发，false 表示下拉刷新未被触发</p><p>bindscrolltoupper       eventhandle         滚动到顶部/左边会触发 scrolltoupper 事件</p><p>bindscrolltolower       eventhandle         滚动到底部/右边会触发 scrolltolower 事件</p><p>bindscroll              eventhandle         滚动时触发。event.detail = {scrollLeft,<br>                                            scrollTop, scrollHeight, scrollWidth, deltaX,<br>                                            deltaY}</p><p>bindrefresherpulling    eventhandle         自定义下拉刷新控件被下拉</p><p>bindrefresherrefresh    eventhandle         自定义下拉刷新控件被触发</p><p>bindrefresherrestore    eventhandle         自定义下拉刷新控件被复位</p><p>bindrefresherabort      eventhandle         自定义下拉刷新控件被中止</p><h3 id="1-纵向滑动"><a href="#1-纵向滑动" class="headerlink" title="(1) 纵向滑动"></a>(1) 纵向滑动</h3><p>允许内容纵向滚动，需要给&lt;\scroll-view/&gt;一个固定高度<br>可以绑定滚动到顶部/左边（bindscrolltoupper）<br>滚动到底部/右边（bindscrolltolower）<br>滚动时（bindscroll）触发的事件.<br>也可以滚动到指定的 id 区域（scroll- into-view）。<br>下面实现纵向滚动，如图所示。<br>（1）在 wxml 文件里使用 scroll-view 进行布局，设置 scroll-y=”true”纵向滚动.<br>绑定bindscrolltoupper、bindscrolltolower、bindscroll、scroll-into-view、scroll-top 事件，具体代<br>码如下.</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--index.wxml--&gt;&lt;view class="section"&gt;  &lt;view class="section_title"&gt;scroll-view纵向滚动&lt;/view&gt;  //需要给\&lt;\scroll-view/&gt;一个固定高度  &lt;scroll-view scroll-y="true" style="height: 200px;" bindscrolltoupper="upper"    bindscrolltolower="lower"  bindscrolltolower="scroll"    scroll-into-view="{{toView}}" scroll-top="{{scroll-top}}"&gt;        &lt;view id="green" style="width: 100%;height: 100px;background-color: green;"&gt;&lt;/view&gt;        &lt;view id="red" style="width: 100%;height: 100px;background-color: red;"&gt;&lt;/view&gt;        &lt;view id="yellow" style="width: 100%;height: 100px;background-color: yellow;"&gt;&lt;/view&gt;        &lt;view id="blue" style="width: 100%;height: 100px;background-color: blue;"&gt;&lt;/view&gt;    &lt;/scroll-view&gt;    &lt;view class="btn-area"&gt;      &lt;button type="default" style="margin: 10px;" bindtap="tap"&gt;        click me to scroll into view&lt;/button&gt;      &lt;button type="default" style="margin: 10px;" bindtap="tapMove"&gt;        click me to scroll      &lt;/button&gt;    &lt;/view&gt;&lt;/view&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）在 js 文件里设置颜色的数组，绑定 to View 和 scroll Top 数据值，提供 bindscrolltoupper、<br>bindscrolltolower、bindscroll、scroll-into-view、scroll-top 事件函数，具体代码如下。</p><pre class="line-numbers language-none"><code class="language-none">// index.jsvar order=["red","yellow","blue","green","red"]Page({  data:{    toView: 'red',    scrollTop: 100  },  upper:function(e){    console.log(e)  },  lower:function(e){    console.log(e)  },  scroll:function(e){    console.log(e)  },  tap:function(e){    for(var i=0;i&lt;order.length;++i){      if(order[i] === this.data.toView){        this.setData({          toView:order[i+1]        })        break      }    }  },tapMove:function(e){    this.setData({      scrollTop:this.data.scrollTop+10    })  }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以实现纵向滚动了，可以滚动到指定区域，也可以滚动到指定的位置，同时滚动到顶<br>部或底部会触发相应的事件，在滚动过程中也可以触发相应的事件。</p><h3 id="2-横向滑动"><a href="#2-横向滑动" class="headerlink" title="(2) 横向滑动"></a>(2) 横向滑动</h3><p>在新闻列表的上方都会有新闻频道供我们选择，可以<br>向左滑动和向右滑动来查看相应类别的新闻，可以采用 scroll-view 来实现这些新闻频道的横向滚动</p><p>在 wxml 文件里使用 scroll-view 进行布局，设置 scroll-x=”true”横向滚动，具体代码如下。</p><h2 id="3-swiper-滑块视图容器"><a href="#3-swiper-滑块视图容器" class="headerlink" title="3.swiper 滑块视图容器"></a>3.swiper 滑块视图容器</h2><p>swiper 滑块视图容器用来在指定区域内切换显示内容，常用来制作海报轮播效果和页签内容切<br>换效果，它的属性如表所示。</p><p>属性                      类型              默认值          说明</p><p>indicator-dots            boolean           False           是否显示面板指示点</p><p>indicator-color           color             rgba(0,0,0,.3)  指示点颜色</p><p>indicator-active-color    color             #000000         当前选中的指示点颜色</p><p>autoplay                  boolean           False           是否自动切换</p><p>current                   number             0              当前所在页面的 index</p><p>interval                  number            5000            自动切换时间间隔</p><p>duration                  number            500             滑动动画时长</p><p>circular                  boolean           False           是否采用衔接滑动</p><p>vertical                  boolean           False           滑动方向是否为纵向</p><p>previous-margin           string            “0px”           前边距，可用于露出前一项的一小部分，<br>                                                            有 px 和 rpx 两种单位</p><p>next-margin               string            “0px”           后边距，可用于露出后一项的一小部分，<br>                                                            有 px 和 rpx 两种单位</p><p>display-multiple-items    number            1               同时显示的滑块数量</p><p>skip-hidden-item-layout   boolean           False           是否跳过未显示的滑块布局。<br>                                                            设为True 可优化复杂情况下的滑动性能，<br>                                                            但会丢失隐藏状态的滑块的布局信息</p><p>easing-function           string            default         指定 swiper 切换缓动动画类型。<br>                                                            Default为默认缓动函数、linear为线性动画、<br>                                                            easeInCubic为缓入动画 、easeOutCubic 为缓出动画、<br>                                                            easeInOutCubic 为缓入缓出动画</p><p>bindchange                eventhandle                       current改变时会触发change事件。event.detail={current: current}</p><p>bindtransition            eventhandle                       swiper-item 的位置发生改变时会触发transition事件。<br>                                                            event. detail = {dx: dx, dy: dy}</p><p>bindanimationfinish       eventhandle                       动画结束时会触发 animationfinish 事件。<br>                                                            event.detail ={dx: dx, dy: dy}</p><h3 id="1-海报轮播效果"><a href="#1-海报轮播效果" class="headerlink" title="1.海报轮播效果"></a>1.海报轮播效果</h3><p>(1)在 wxml 文件里，采用 swiper 滑块视图容器组件进行海报轮播区域的布局，具体代码如<br>下：  </p><pre class="line-numbers language-none"><code class="language-none">&lt;view class="haibao"&gt;  &lt;swiper indicator-dots="{{indicatorDots}}" autoplay="{{autoplay}}"  interval="{{interval}}" duration="{{duration}}"&gt;      &lt;block wx:for="{{imgUrls}}"&gt;        &lt;swiper-item&gt;          &lt;image src="{{item}}" class="silde-image" style="width: 100%;"/&gt;        &lt;/swiper-item&gt;      &lt;/block&gt;  &lt;/swiper&gt;  &lt;/view&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 js 文件里，提供海报轮播的图片，设置是否自动播放，提供轮播的时长等数据，通过数据绑定的<br>方式渲染到页面上，具体代码如下。</p><pre class="line-numbers language-none"><code class="language-none">Page({  indicatorDots:true,  autoplay:true,  interval:5000,  duration:1000,  imgUrls:[    "https://api.mofun365.com:8888/images/goods/1555851154057.jpg",    "https://api.mofun365.com:8888/images/goods/1555851345937.jpg",    "https://api.mofun365.com:8888/images/goods/1555850845474.jpg",  ]})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置 autoplay 等于 true 时就可以自动进行海报轮播，设置 indicatorDots 等于 true，代表显<br>示面板指示点，同时可以设置 interval 自动切换时长、duration 滑动动画时长</p><h3 id="2-页签内容切换效果"><a href="#2-页签内容切换效果" class="headerlink" title="2.页签内容切换效果"></a>2.页签内容切换效果</h3><p>swiper 滑块视图容器除了可以用来实现海报轮播效果，还可以实现页签切换效果。页签切换效<br>果常用于多种方式的登录或者多种类别的切换，如图所示</p><h2 id="4-movable-view-可移动视图容器"><a href="#4-movable-view-可移动视图容器" class="headerlink" title="4.movable-view 可移动视图容器"></a>4.movable-view 可移动视图容器</h2><p>movable-view 是一个可移动视图容器，在页面中可以做拖曳滑动。在使用这个组件的时候，<br>需要先定义可移动区域 movable-area，然后定义直接子节点 movable-view，否则不能移动。<br>movable-area 必须设置 width 和 height 属性，不设置默认为 10px；movable-view 必须设置<br>width 和 height 属性，不设置默认为 10px， movable-view 默认为绝对定位，top 和 left 属性.<br>为 0px。movable-view 可移动视图容器的属性如表所示.</p><p>属性                    类型            默认值          说明</p><p>direction               string          none            movable-view 的移动方向。属性值有<br>                                                        all、vertical、horizontal、none</p><p>inertia                 boolean         False           movable-view 是否带有惯性</p><p>out-of-bounds           boolean         False           超过可移动区域后，movable-view 是否还可以移动</p><p>x                       number/string                   定义 x 轴方向的偏移。如果 x 的值不在可移动范围<br>                                                        内，会自动移动到可移动范围；改变 x 的值会触发动画</p><p>y                       number/string                   定义 y 轴方向的偏移。如果 y 的值不在可移动范围内，<br>                                                        会自动移动到可移动范围；改变 y 的值会触发动画</p><p>damping                 number          20              阻尼系数，用于控制 x 或 y 改变时的动画和过界回弹的<br>                                                        动画，值越大移动越快</p><p>friction                number          2               摩擦系数，用于控制惯性滑动的动画，值越大摩擦力越大，滑动<br>                                                        越快停止；必须大于 0，否则会被设置成默认值</p><p>disabled                boolean         False           是否禁用</p><p>scale                   boolean         False           是否支持双指缩放，默认缩放手势生效区域是在movable-view内</p><p>scale-min               number          0.5             定义缩放倍数最小值</p><p>scale-max               number          10              定义缩放倍数最大值</p><p>scale-value             number          1               定义缩放倍数，取值范围为 0.5～10</p><p>animation               boolean         True            是否使用动画</p><p>bindchange              eventhandle                     拖动过程中触发的事件，event.detail = {x: x, y: y, source:<br>                                                        source}。其中 source 表示产生移动的原因，值可为 touch（拖<br>                                                        动）、touch-out-of-bounds（超出移动范围）、out-of-bounds<br>                                                        （超出移动范围后的回弹）、friction（惯性）和空字符串（setData）</p><p>movable-view 提供了两个特殊事件：<br>    htouchmove 事件，指初次手指触摸后的移动为横向移动，<br>      如果 catch 此事件，则意味着 touchmove 事件也被 catch；<br>    vtouchmove 事件，指初次手指<br>      触摸后的移动为纵向移动，如果 catch 此事件，则意味着 touchmove 事件也被 catch。  </p><p>（1）在 wxml 文件里，使用 movable-area 和 movable-view 视图容器组件进行布局，具体代码如下。                                                     </p><pre class="line-numbers language-none"><code class="language-none">&lt;!--index.wxml--&gt;&lt;view class="section"&gt;  &lt;movable-area style="height: 200px;width: 100%;background-color: yellow;"&gt;                                                                                                          // movable-view 的移动方向。    &lt;movable-view style="height: 50px;width: 50px;background-color: red;" x="{{x}}" y="{{y}}" direction="all"&gt;&lt;/movable-view&gt;  &lt;/movable-area&gt;&lt;/view&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）在 js 文件里，提供拖动函数、缩放函数，通过数据绑定的方式渲染到页面上，具体代码如下。</p><pre class="line-numbers language-none"><code class="language-none">&lt;--index.js--&gt;Page({  data:{    x:0,    y:0  },  tap:function(e){    this.setData({      x:30,      y:30    });  },  onChange:function(e){    console.log(e.detail)  }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-cover-view-、cover-image-覆盖原生组件的视图容器"><a href="#5-cover-view-、cover-image-覆盖原生组件的视图容器" class="headerlink" title="5.cover-view 、cover-image 覆盖原生组件的视图容器"></a>5.cover-view 、cover-image 覆盖原生组件的视图容器</h2><p>cover-view、cover-image 这两个是覆盖原生组件的视图容器。<br>比如在使用地图组件时，地图组件本身的功能很有局限，但是想放置一些特殊的内容或图片，这时就需要使用覆盖地图组件的视<br>图容器。<br>  (1)cover-view 是指覆盖在原生组件之上的文本视图，可覆盖的原生组件包括 map、video、canvas、<br>camera，只支持嵌套 cover-view、cover-image。<br>  (2)cover-image 是指覆盖在原生组件之上的图片视图，可覆盖的原生组件同 cover-view 一样，<br>支持嵌套 cover-view。</p><p>下面使用 cover-view、cover-image 覆盖原生组件的视图容器组件，在 video 视频播放组件上<br>放置播放、暂停两个图片，同时放置一个时间内容显示区域，如图所示。</p><p>（1）在 wxml 文件里使用 cover-view、cover-image 覆盖原生组件的视图容器组件进行布局，<br>具体代码如下。在线视频地址从图片素材中复制</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--pages/coverViewDemo/coverViewDemo.wxml.wxml--&gt;&lt;video id="myideo" src="http://wxsnsdy.tc.qq.com/105/20210/snsdyvideodownload?filekey=30280201010421301f0201690402534804102ca905ce620b1241b726bc41dcff44e00204012882540400&amp;bizid=1023&amp;hy=SH&amp;fileparam=302c020101042530230204136ffd93020457e3c4ff02024ef202031e8d7f02030f42400204045a320a0201000400" controls="{{false}}"  event-model="bubble" style="width: 100%;"&gt;  &lt;cover-view class="controls"&gt;    &lt;cover-view class="play" bindtap="play"&gt;      &lt;cover-image class="img" src="/pages/images/play.png"&gt;&lt;/cover-image&gt;    &lt;/cover-view&gt;    &lt;cover-view class="pause" bindtap="pause"&gt;      &lt;cover-image class="img" src="/pages/images/pause.png"&gt;&lt;/cover-image&gt;    &lt;/cover-view&gt;    &lt;cover-view class="time"&gt;00:00&lt;/cover-view&gt;  &lt;/cover-view&gt;    &lt;/video&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）在 wxss 文件里添加样式</p><pre class="line-numbers language-none"><code class="language-none">.controls{  position: relative;  top: 50%;  height: 50px;  margin-top: -25px;  display: flex;}.play,.pause,.time{  flex:1;  height: 100%;}.time{  text-align: center;  background-color: rgba(0,0,0,.1);  color: white;  line-height: 50px;}.img{  width: 40px;  height: 40px;  margin: 5px auto;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）在 js 文件里，提供视频播放、暂停函数，初始化视频播放组件，</p><pre class="line-numbers language-none"><code class="language-none">Page({  onReady(){    this.videoCtx=wx.createVideoContext('myVideo')  },  play(){    this.videoCtx.play()  },  pause(){    this.videoCtx.pause()  }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="微信小程序" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    <category term="基础" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="微信小程序" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE</title>
    <link href="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/02/18/JavaEE/"/>
    <id>https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/02/18/JavaEE/</id>
    <published>2023-02-18T05:02:38.000Z</published>
    <updated>2023-03-15T08:37:22.658Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="9-MyBatis入门"><a href="#9-MyBatis入门" class="headerlink" title="9.MyBatis入门"></a>9.MyBatis入门</h1><h2 id="1-数据持久层框架"><a href="#1-数据持久层框架" class="headerlink" title="1.数据持久层框架"></a>1.数据持久层框架</h2><h3 id="1-数据持久层"><a href="#1-数据持久层" class="headerlink" title="1.数据持久层"></a>1.数据持久层</h3><p>数据持久化指的将内存中的数据保存到磁盘中加以“固化”，几乎所有的应用系统都需要数据持久化。<br>持久化的实现通过将数据存储在各种关系型数据库中完成。<br>因此在应用框架中，一个相对独立的逻辑层，专注于数据持久化逻辑的实现，该逻辑层通常被称为“数据持久层”。</p><h3 id="2-ORM"><a href="#2-ORM" class="headerlink" title="2.ORM"></a>2.ORM</h3><p>ORM一般指持久化数据和实现对象的映射。<br>ORM框架一般采用XML格式描述对象关系的映射细节，并且将其存放在专门的映射文件中。</p><h2 id="2-Mybatis框架"><a href="#2-Mybatis框架" class="headerlink" title="2.Mybatis框架"></a>2.Mybatis框架</h2><p>Mybatis可以使用简单的XML代码或注解，将原生类型，接口和Jav的POJO配置映射为数据库中的记录。</p><h3 id="MyBatis特点"><a href="#MyBatis特点" class="headerlink" title="MyBatis特点"></a>MyBatis特点</h3><h4 id="1-简单易学"><a href="#1-简单易学" class="headerlink" title="1.简单易学"></a>1.简单易学</h4><p>下载JAR包，配置SQL映射文件</p><h4 id="2-灵活"><a href="#2-灵活" class="headerlink" title="2.灵活"></a>2.灵活</h4><p>SQl语句写在XML文件中，便于统一管理和优化。<br>解除SQL语句与程序代码的耦合，提供数据持久层，将业务逻辑和数据访问逻辑分离，使得系统设计更清晰，易维护，容易单元测试。</p><h4 id="3-提供映射标签"><a href="#3-提供映射标签" class="headerlink" title="3.提供映射标签"></a>3.提供映射标签</h4><p>支持对象和数据库的ORM字段关系映射，支持对象关系组建维护，提供XML标签，支持动态SQL。<br>相比较Hibernate设计理念完全面向POJO，MyBatis更适合网络性业务的灵活变化。</p><h2 id="3-MyBatis工作原理"><a href="#3-MyBatis工作原理" class="headerlink" title="3.MyBatis工作原理"></a>3.MyBatis工作原理</h2><h3 id="1-MyBatis核心类"><a href="#1-MyBatis核心类" class="headerlink" title="1.MyBatis核心类"></a>1.MyBatis核心类</h3><h4 id="1-Configuration"><a href="#1-Configuration" class="headerlink" title="1.Configuration"></a>1.Configuration</h4><p>MyBatis的所有的配置信息都保存在Configuration对象中，XML配置文件中的大部分配置会存储在该类。<br>此外，提供设置配置信息的方法。Configuration可以从XML配置文件中获取属性值，也可以通过程序直接配置。</p><h4 id="2-SqlSessionFactory"><a href="#2-SqlSessionFactory" class="headerlink" title="2.SqlSessionFactory"></a>2.SqlSessionFactory</h4><p>每个居于MyBtis的项目都通过SQL Session Factory的实列为中心</p><h4 id="3-SqlSession"><a href="#3-SqlSession" class="headerlink" title="3.SqlSession"></a>3.SqlSession</h4><p>MyBatis的主要顶层API，SQL Session表示和数据库交互时的会话，完全包含面向数据库执行SQL语句所需要的所有方法。</p><h5 id="SqlSession的实现类"><a href="#SqlSession的实现类" class="headerlink" title="SqlSession的实现类"></a>SqlSession的实现类</h5><h6 id="1-DefaultSqlSession"><a href="#1-DefaultSqlSession" class="headerlink" title="1.DefaultSqlSession"></a>1.DefaultSqlSession</h6><h6 id="2-SqlSessionManager"><a href="#2-SqlSessionManager" class="headerlink" title="2.SqlSessionManager"></a>2.SqlSessionManager</h6><p>SqlSession通过内部存放的执行器（Executor）来对数据进行 CRUD 基础操作。<br>此外，每个线程都应该有自己的SQL Session实列，但SQL Session实列不是线程安全的，因此不能被共享，使用后需要关闭。</p><h4 id="4-Executor"><a href="#4-Executor" class="headerlink" title="4.Executor"></a>4.Executor</h4><p>Executor是MyBatis的执行器，调度的核心，负责SQL语句的生成和查询缓存的维护。</p><h4 id="5-MappedStatement"><a href="#5-MappedStatement" class="headerlink" title="5.MappedStatement"></a>5.MappedStatement</h4><p>Mapped Statement对应配置文件中的 &lt;select | update | delete | insert&gt;节点，描述的是一条SQL语句。</p><h3 id="2-MyBatis工作流程"><a href="#2-MyBatis工作流程" class="headerlink" title="2.MyBatis工作流程"></a>2.MyBatis工作流程</h3><p>配置文件/映射文件   —-&gt;（解析）   Configuration       →         SqlSessionFactoryBuilder<br>                                                                        ↓<br>                                                                    build()<br>                                                                        ↓<br>                                     ↓                          SQL Session Factory<br>                                                                        ↓<br>                                                                    openSession()<br>                                                                        ↓<br>                                                                SqlSessionm<br>                                                                        ↓<br> 数据库      ←     (执行操作)    ←  MappedStatement     ←        依据Statement获取<br>                      ↓<br>                     转换<br>                      ↓<br>            HashMap/POJO/基本数据类型</p><h2 id="4"><a href="#4" class="headerlink" title="4."></a>4.<a href="https://mybatis.net.cn/getting-started.html" title="" target="">Mybatis入门</a></h2><h3 id="1-SQL"><a href="#1-SQL" class="headerlink" title="1.SQL"></a>1.SQL</h3><h3 id="2-cn-edu-example-mybatis-mapper"><a href="#2-cn-edu-example-mybatis-mapper" class="headerlink" title="2.cn.edu.example.mybatis.mapper"></a>2.cn.edu.example.mybatis.mapper</h3><p>StudentMapper.xml</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;!-- namespace 表示命名空间 --&gt;&lt;mapper namespace="cn.edu.example.mybatis.mapper.StudentMapper"&gt; &lt;!-- 根据学号获取学生信息--&gt; &lt;select id="findStudentByStuno" parameterType="Integer"  resultType="cn.edu.example.mybatis.po.Student"&gt;  Select*from t_student where stuno=#{stuno}  &lt;/select&gt;&lt;/mapper&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-cn-edu-example-mybatis-po"><a href="#3-cn-edu-example-mybatis-po" class="headerlink" title="3.cn.edu.example.mybatis.po"></a>3.cn.edu.example.mybatis.po</h3><p>Student.java</p><pre class="line-numbers language-none"><code class="language-none">package cn.edu.example.mybatis.po;public class Student { private Integer stuno;// 主键，学号 private String stuname;// 学生姓名 private Integer grade;// 年纪 private String dept;// 专业 private String classname; @Override public String toString() {  return "Student [stuno=" + stuno + ", stuname=" + stuname + ", grade=" + grade + ", dept=" + dept    + ", classname=" + classname + "]"; } public Integer getStuno() {  return stuno; } public void setStuno(Integer stuno) {  this.stuno = stuno; } public String getStuname() {  return stuname; } public void setStuname(String stuname) {  this.stuname = stuname; } public Integer getGrade() {  return grade; } public void setGrade(Integer grade) {  this.grade = grade; } public String getDept() {  return dept; } public void setDept(String dept) {  this.dept = dept; } public String getClassname() {  return classname; } public void setClassname(String classname) {  this.classname = classname; }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-cn-edu-example-mybatis-test"><a href="#3-cn-edu-example-mybatis-test" class="headerlink" title="3.cn.edu.example.mybatis.test"></a>3.cn.edu.example.mybatis.test</h3><p>MyBatis.java</p><pre class="line-numbers language-none"><code class="language-none">package cn.edu.example.mybatis.test;import java.io.Reader;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import cn.edu.example.mybatis.po.Student;public class MybatisTest { private static SqlSessionFactory sqlSessionFactory = null; // 初始化SQL Session Factory对象 static {  try {   // 使用Mybatic提供的Resources类加载MyBatis的XML配置文件   Reader reader = Resources.getResourceAsReader("mybatis-config.xml");   // 构建SqlSessionFactory对象    // SqlSessionFactory对象   sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);  } catch (Exception e) {   e.printStackTrace();  } } // 获取SQL Session对象的静态方法 public static SqlSession getSession() {  return sqlSessionFactory.openSession(); } // 根据学号查询学生信息 public void findStudentByStunoTest() {  // 获取SQL Session  SqlSession sqlSession = getSession();  // Sqlsession 执行映射文件中定义的SQL语句，并返回映射结果  Student stu = sqlSession.selectOne("cn.edu.example.mybatis.mapper." + "StudentMapper.findStudentByStuno",    2018020222);  // 输出结果  System.out.println(stu.toString());  // 关闭SQL Session  sqlSession.close(); } public static void main(String[] args) {  MybatisTest test = new MybatisTest();  test.findStudentByStunoTest(); }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-mybatis-config-xml"><a href="#4-mybatis-config-xml" class="headerlink" title="4.mybatis-config.xml"></a>4.mybatis-config.xml</h3><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;configuration&gt; &lt;!-- 配置环境，默认的环境ID为mysql--&gt; &lt;environments default="mysql"&gt;  &lt;!--配置环境ID为mysql的数据库环境 --&gt;  &lt;environment id="mysql"&gt;   &lt;transactionManager type="JDBC"/&gt;   &lt;dataSource type="POOLED"&gt;    &lt;property name="driver" value="com.mysql.cj.jdbc.Driver"/&gt;    &lt;property name="url"    value="jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC"/&gt;    &lt;property name="username" value="root"/&gt;    &lt;property name="password" value="love1314"/&gt;   &lt;/dataSource&gt;  &lt;/environment&gt; &lt;/environments&gt; &lt;!-- 配置映射器的位置--&gt; &lt;mappers&gt;  &lt;mapper resource="cn/edu/example/mybatis/mapper/StudentMapper.xml"/&gt; &lt;/mappers&gt;&lt;/configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-输出"><a href="#5-输出" class="headerlink" title="5.输出"></a>5.输出</h3><p>Student [stuno=2018020222, stuname=����, grade=2018, dept=�����, classname=�����1802]</p><h1 id="10"><a href="#10" class="headerlink" title="10"></a>10</h1><h2 id="1-1-属性-properties"><a href="#1-1-属性-properties" class="headerlink" title="1.1 属性(properties)"></a>1.1 属性(properties)</h2><p>properties 都是可以在外部配置且可以动态替换的，既可以在Java属性文件中配置，又可以在properties元素的子元素来传递。</p><h2 id="1-2-设置-settings"><a href="#1-2-设置-settings" class="headerlink" title="1.2 设置(settings)"></a>1.2 设置(settings)</h2><p>常用项目名                       描述                                                            有效值              默认值<br>cacheEnabled                    全局地开启/关闭XML配置文件中的所有映射器已经配置的任何缓存          布尔值</p><p>multipleResultSetsEnabled       是/否允许单一语句返回多结果集</p><p>useColumnLabel                  使用列表标签代替别名。不同的驱动会有不同的表现，具体可参考相<br>                                关驱动文档，或通过测试这两种不同的模式来观察所用驱动的结果。</p><p>useGeneratedKeys                允许JDBC支持自动化生成主键，需要驱动支持。如果设置为true，<br>                                则将强制使用自动生成主键。尽管一些驱动不支持此常用项。</p><p>autoMappbehavior                指定MyBatista应如何自动映射列到字段或属性上。<br>                                None表示取消自动映射；<br>                                Partial只会自动映射没有定义嵌套结果集映射的结果集；<br>                                full会自动映射任意复杂的结果集。</p><p>safeRowBoundsEnabled允许在嵌套语句中使用分页(RowBounds)。如果允许使用，则设置<br>                                为false</p><p>safeResultHandlerEnabled允许在嵌套语句中使用分页(ResultHandler)，如果使用设置为false。</p><p>returnlnstanceForEmptyRow当返回的所有列是空时，MyBatis默认返回null。当开启这个设置时，<br>                                Mybatis会返回一个空实列。也适用于嵌套的结果集。</p><h2 id="3-类型别名-typeAiases"><a href="#3-类型别名-typeAiases" class="headerlink" title="3.类型别名(typeAiases)"></a>3.类型别名(typeAiases)</h2><p>解释：<br>类型别名(typeAiases)是为Java数据类型设置一个短的名称。<br>只和XML配置文件有关，用来减少完全限定名的冗余。</p><p>1. </p><pre class="line-numbers language-none"><code class="language-none">&lt;typeAliases&gt; &lt;typeAliase alias='Student' type='cn.edu.mybatis.po.Student' /&gt;&lt;/typeAliases&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Student 就可以在任何使用 cn.edu.mybatis.po.Student 的地方。<br>2. </p><pre class="line-numbers language-none"><code class="language-none">&lt;typeAliases&gt; &lt;package name="cn.edu.mybatis.po" /&gt;&lt;/typeAliases&gt;@Alias("Student")public class Student{ ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指定一个包名，Mybatis会在报名下搜索需要的JavaBean。</p><p>每一个在包 cn.edu.mybatis.po 中的JavaBean，在没有注解的情况下，都会使用 Bean 的首字母小写的非限定类名来作为她的别名。</p><h2 id="4-环境配置-environments"><a href="#4-环境配置-environments" class="headerlink" title="4.环境配置(environments)"></a>4.环境配置(environments)</h2><p>Mybatis可以配置多种环境，但是每一个 SqlSessionFactory实列只能对应一个环境。如果链接多个数据库，则需要创建多个 SqlSessionFactory实列。</p><p>为指定创建环境，需要将环境作为可选的参数传递给SQLSessionFactoryBuilder：</p><pre class="line-numbers language-none"><code class="language-none">SqlSessionFactory factory =       new SqlSessionFactoryBuilder().build(reader,environment[,properties]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当使用默认环境时：</p><pre class="line-numbers language-none"><code class="language-none">SqlSessionFactory factory =       new SqlSessionFactoryBuilder().build(reader[,properties]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-元素定义配置环境"><a href="#1-元素定义配置环境" class="headerlink" title="1.元素定义配置环境"></a>1.<environments>元素定义配置环境</environments></h3><pre class="line-numbers language-none"><code class="language-none">&lt;environments default="del"&gt;    &lt;environment id="del"&gt;        &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;        &lt;dataSource type="POOLED"&gt;            &lt;!--Java 18 value="com.mysql.cj.jdbc.Driver"--&gt;            &lt;property name="driver" value="com.mysql.cj.jdbc.Driver"/&gt;            &lt;property name="url" value="jdbc:mysql://localhost:3306/mybatis"/&gt;            &lt;property name="username" value="root"/&gt;            &lt;property name="password" value="love1314"/&gt;        &lt;/dataSource&gt;    &lt;/environment&gt;&lt;/environments&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1). 默认使用的环境ID (default=“mysql”)<br>2). 每个environment元素定义的环境ID (id=”mysql”)<br>3). 事务管理器的配置(type=”JDBC”)<br>4). 数据源的配置 (type=”POOLED”)</p><h4 id="1-事务管理器和数据源-介绍"><a href="#1-事务管理器和数据源-介绍" class="headerlink" title="1.事务管理器和数据源 介绍"></a>1.事务管理器和数据源 介绍</h4><h5 id="1事务管理器-type-x3D-”-JDBC-x2F-MANAGED-“"><a href="#1事务管理器-type-x3D-”-JDBC-x2F-MANAGED-“" class="headerlink" title="1事务管理器 type=” [JDBC / MANAGED] “"></a>1事务管理器 type=” [JDBC / MANAGED] “</h5><ol><li>JDBC: 使用JDBC的提交和回滚设置，它依赖于从数据源得到的链接来管理事务作用域。</li><li>MANAGED: 这个配置不提交或回滚一个链接，而是让容器来管理事物的整个生命周期。默认情况关闭连接，有些容器不希望如此，需要将closeConnection属性设置为false，来阻止默认的关闭操作。</li><li>使用 Mybatis和Spring不需要配置事务管理器，Spring自带管理器会覆盖配置。</li></ol><h5 id="2-数据源-type-x3D-“-UNPOOLED-x2F-POOLED-x2F-JND-“"><a href="#2-数据源-type-x3D-“-UNPOOLED-x2F-POOLED-x2F-JND-“" class="headerlink" title="2.数据源 type= “ [UNPOOLED / POOLED / JND ] “"></a>2.数据源 type= “ [UNPOOLED / POOLED / JND ] “</h5><p>虽然数据源的配置是可选的，但为使用延迟加载，数据源是必须配置的.</p><ol><li>UNPOOLED: 只用于每次请求时打开和关闭请求，适用于连接池不重要的。</li><li>POOLED: 数据源利用“池”的概念将JDBC链接对象组织起来，避免创建新的链接实列时必须的初始化，节省认证时间。能使并发Web应用快速响应请求的处理方式，</li><li>JNDI: 数据源实现为EJB或应用服务区这类容器中的使用，容器可以集中或在外部配置数据源并设置一个JNDI上下文的应用。</li></ol><h2 id="5-映射器-mappers"><a href="#5-映射器-mappers" class="headerlink" title="5.映射器(mappers)"></a>5.映射器(mappers)</h2><pre class="line-numbers language-none"><code class="language-none">相对于类似路径的资源应引用&lt;mappers&gt; &lt;mapper resource="cn/edu/mybtis/mapper/SrudentMapper.xml" /&gt;&lt;/mappers&gt;统一资源定位符&lt;mappers&gt; &lt;mapper url="file:///var/mappers/SrudentMapper.xml" /&gt;&lt;/mappers&gt;映射器接口实现类的完全限定类名&lt;mappers&gt; &lt;mapper class="cn.edu.mybtis.mapper.SrudentMapper.xml" /&gt;&lt;/mappers&gt;将包内的映射器接口实现全部注册为映射器&lt;mappers&gt; &lt;package name="cn.edu.mybatis.mapper" /&gt;&lt;/mappers&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><ol><li>mybatis<br> 1.一级缓存<br>mapper调用对象代理的session,对数据库查询数据后会存在的数据缓存。<br>出现的问题:<br>      当在同一个方法中连贯query的时候，由于代码非 mapper代理绑定在前一个mapper对象上，会报错。<br>解决方法:<br>      再次赋值绑定到mapper的session上进行query。<br> 2.二级缓存<br>   (1)为什么有二级缓存：<br>   一级缓存，查询的数据不是数据库的数据，而是直接在Client端发送request请求给Tomcat，在服务器同一个线程的缓存中调用，该线程第二次调用时不访问数据库。<br>   (2)二级缓存的存在原理：<br>   二级缓存会重新独立访问数据库，以便获取最新的数据库信息。<br>   出现的问题:<br>   (1)由于Spring不对外开放，mybatis二级缓存会自动关闭对数据库的访问。<br>   (2)当数据操作的方法联动(动态)改动信息的时候，无法获得改动的最新数据。</li></ol><h1 id="Spring-—黑马程序员"><a href="#Spring-—黑马程序员" class="headerlink" title="Spring —黑马程序员"></a>Spring —黑马程序员</h1><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><ol><li><p>思想：<br>IoC  ( inversion of Control) ，控制反转，强调的是原来在程序中创建Bean的权利反转给第三方。Spring接管操纵。<br>DI  （Dependency Injection），依赖注入，强调的bean之间关系，这种关系第三方负责设置。<br>AOP  （Aspect Oriented Programming)，面向切面编程。功能的横向抽取，主要的实现方式就是 Peoxy。</p></li><li><p>Spring提供：<br>IoC，AOP，Web MVC </p></li><li><p>Spring Frameworl技术栈：<br>Data Access：数据访问<br>Data Integration：数据集成<br>Web：Web开发<br>ADP：面向切面编程<br>Aspects：AOP思想实现<br>Core Container：核心容器<br>Test：单元测试，集成测试</p></li><li><p>BeanFactory与ApplicationContext的关系：<br>1.BeanFactory时Spring的早期接口，称为Spring的Bean工厂，Application Context时后期更高级的接口，是Spring容器；<br>2.Application Context早Bean Factory基础上对功能进行了扩展，列如：监听功能，国际化功能等。Bean Factory的API更偏向底层，Application Context的API多数是对底层API的封装；<br>3.Bean的创建主要逻辑和功能都被封装在Bean Factory中，Application Context不仅继承Bean Factory，而且Application Context内部还维护着Bean Factory的引用，所以，ApplicationContext与Bean Factory既有继承关系，又有任何关系；<br>4.bean的初始化实际不同，原始Bean Factory是在首次调用个体Bean是才进行Bean的创建，而Application Context则是配置文件加载，容器一创建就将Bean都实列化并初始化好；</p></li></ol><h2 id="基于xml的Spring应用"><a href="#基于xml的Spring应用" class="headerlink" title="基于xml的Spring应用"></a>基于xml的Spring应用</h2><h3 id="SpringBean-的配置详解"><a href="#SpringBean-的配置详解" class="headerlink" title="SpringBean 的配置详解"></a>SpringBean 的配置详解</h3><pre class="line-numbers language-none"><code class="language-none">xml配置方式功能描述&lt;bean id="" class=""&gt;全限定名配置&lt;bean name=""&gt;通过name设置Bean的别名，通过别名也能直接获取到Bean实列&lt;bean scope=""&gt;Bean的作用范围，Bean Factory作为容器时取值singleton和prototype&lt;bean lazy-init=""&gt;Bean实列化时机，是否延迟加载。Bean Factory作为容器时无效&lt;bean init-method=""&gt;Bean的实列化后自动执行的初始化方法，method指定方法名&lt;bean destory-method=""&gt;Bean实列销毁钱的方法，method指定方法名&lt;bean autowire="byType"&gt;设置自动注入模式，常用的有按照类型byType，按照名字byName&lt;bean factory-bean="" factory-method=""/&gt; 指定那个工厂Bean的那个方法完成Bean的创建<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SpringBean配置"><a href="#SpringBean配置" class="headerlink" title="SpringBean配置"></a>SpringBean配置</h3><pre class="line-numbers language-none"><code class="language-none">&lt;!--    配置UserServiceImpl--&gt;   &lt;bean id="userService" class="top.wabisabifag.service.impl.UserServiceImpl"&gt;       &lt;property name="userDao" ref="userDao"&gt;&lt;/property&gt;   &lt;/bean&gt;&lt;!--    篇日志UserDaoImpl--&gt;   &lt;bean id="userDao" class="top.wabisabifag.service.impl.UserDaoImpl"&gt;&lt;/bean&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>Bean的基础配置<br> 列如：<br>     配置UserDaoImpl由Spring容器负责管理<br>     <bean id="userDao" class="top.wabisabifag.dao.impl.UserDaoImpl"><br><br>     此时存储到Spring容器的Bean的beanName时uerDao，值是UserDaoImpl对象，可根据beanName获取Bean实列<br>     applicationContext.getBean(“userDao”);<br><br>     如不配置id，则Spring会把当前Bean实列的全限定名作为beanName<br>     applicationContext.getBean(“top.wabisabifag.dao.impl.UserDaoImpl”)</bean></p></li><li><p>Bean的别名配置<br> 可以为当前Bean指定多个别名，根据别名可获得Bean对象<br> <bean id="userDao" name="aa,bb" class="top.wabisabifag.dao.impl.UserDaoImpl"><br><br> 此时多个名称可以获得UserDaoImpl实列duixiang<br> applicationContext.getBean(“UserDao”);<br> applicationContext.getBean(“aa”);<br> applicationContext.getBean(“bb”);</bean></p></li><li><p>Bean的范围设置<br> 单纯的Spring环境的作用有两个：Singleton和Prototype<br> Singleton：单列，默认值，Spring容器创建时候就会进行Bean的实列化，并存储到容器内部的单列池中，每次getBean时都是从单列池中获取相同的Bean实列<br> prototype：原型，Spring容器初始化时不会创建Bean实列，当调用getBean时才会实列化Bean，每次getBean都会创建一个新的Bean实列</p></li><li><p>Bean的延迟加载<br> 当lazy-init设置为true，Spring容器创建时不会立即创建Bean实列，等待用到时在创建Bean实列并存储到单列池中，后续在使用该Bean直接从单列池获取，本质上该Bean还是单列<br> <bean id="userDao" class="top.wabisabifag.dao.impl.UserDaoImpl" lazy-init="true"></bean></p></li><li><p>Bean的初始化和销毁方法配置<br> Bean在被实列化后，可执行指定的初始化方法完成一些初始化的操作，Bean在销毁之前也可以执行指定的销毁方法完成一些操作，初始化方法名称和销毁方法名称通过<br> <bean id="userDao" class="top.wabisabifag.dao.impl.UserDaoImpl" init-method="init" destory-method="destroy"><br><br> public class UserDaoImpl implements UserDao{<br>     public UserDaoImpl(){};<br>     public void init(){};<br>     public void destory(){};<br> }</bean></p></li><li><p>Bean的实列化配置<br> Spring的实列化方式：</p></li><li><p>构造方式实列化：底层通过构造方法对Bean进行实列化</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--    配置UserServiceImpl--&gt;   &lt;bean id="userService" class="top.wabisabifag.service.impl.UserServiceImpl"&gt;       &lt;!-- UserDapImpl的有参构造--&gt; &lt;constructor-arg name="name" value="H"&gt;&lt;/constructor&gt; &lt;property name="userDao" ref="userDao"&gt;&lt;/property&gt;   &lt;/bean&gt;&lt;!--    篇日志UserDaoImpl--&gt;   &lt;bean id="userDao" class="top.wabisabifag.service.impl.UserDaoImpl"&gt;&lt;/bean&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>工厂方式实列化：底层通过调用自定义的工厂方式对Bean进行实列化<br> 1&gt; 静态工厂方法实列化Bean<br> id定义一个在impl.UserServiceImpl函数方法下的 userDao 函数方法.<br> 可以被应用,便于在运行前在该方法中的其他功能的运行调用.<br> </p><pre class="line-numbers language-none"><code class="language-none">&lt;!--    配置UserServiceImpl--&gt; &lt;bean id="user" class="top.wabisabifag.service.impl.UserServiceImpl" factory-method="userDao"&gt;&lt;/bean&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br> 2&gt; 实列工厂方法实列化Bean<br> 3&gt; 实现FavtoryBean规范延迟实列化Bean<p></p></li></ol><p>2.Spring 的get方法</p><p>3.Spring 配置非定义Bean</p><p>4，Bean 实列化的基本流程</p><p>5.Spring 的后处理器</p><p>6.SpringBean 的生命周期</p><p>7.Spring Ioc 整体流程总结</p><p>8.Spring xml 方式整合第三方框架</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Java" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/Java/"/>
    
    <category term="JavaEE" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/Java/JavaEE/"/>
    
    
    <category term="Java" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/Java/"/>
    
    <category term="JavaEE" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>MyDiary</title>
    <link href="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/02/18/MyDiary/"/>
    <id>https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/02/18/MyDiary/</id>
    <published>2023-02-18T02:35:47.000Z</published>
    <updated>2023-04-15T09:44:59.493Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="2023-x2F-04-x2F-16"><a href="#2023-x2F-04-x2F-16" class="headerlink" title="2023/04/16"></a>2023/04/16</h1><ol><li>毁灭人类就是拯救人类</li><li>庸才，具体，锱铢必较的做，认真的。</li><li>丧气鬼，你的活法到底该如何啊</li><li>时间和睡眠会掩埋自己的苦痛</li><li>钝木的人连时间，感觉都丢失，那为何依旧面红耳赤的愧疚</li></ol><h1 id="2023-x2F-04-x2F-05"><a href="#2023-x2F-04-x2F-05" class="headerlink" title="2023/04/05"></a>2023/04/05</h1><ol><li>物理意义上的三维:<br> 1.长度：长、宽、高，体积<br> 2.数量：个数、指数、质量<br> 3.温度：热量、电能、电阻<br>不是我们存活在三维，是只能存活在三维</li></ol><h1 id="2023-x2F-02-x2F-27"><a href="#2023-x2F-02-x2F-27" class="headerlink" title="2023/02/27"></a>2023/02/27</h1><ol><li>热爱是除死亡的目的</li></ol><h1 id="2023-x2F-02-x2F-17"><a href="#2023-x2F-02-x2F-17" class="headerlink" title="2023/02/17"></a>2023/02/17</h1><ol><li>说话概括一件事时尽量详细过程和内容</li><li>本自己找目标学校的要求而学习</li><li>软件考试资格证书可以当兼职老师</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Diary" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/Diary/"/>
    
    <category term="[object Object]" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/object-Object/"/>
    
  </entry>
  
  <entry>
    <title>MockingBir</title>
    <link href="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/02/06/MockingBir/"/>
    <id>https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/02/06/MockingBir/</id>
    <published>2023-02-06T14:56:14.000Z</published>
    <updated>2023-02-06T15:11:24.222Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MockingBir的部署"><a href="#MockingBir的部署" class="headerlink" title="MockingBir的部署"></a>MockingBir的部署</h1><h6 id="开源作者：babysor"><a href="#开源作者：babysor" class="headerlink" title="开源作者：babysor"></a>开源作者：babysor</h6><p>操作系统：Win10</p><p>硬件：cpu</p><p>2.安装</p><blockquote><p>如果已经确认安装过，请忽略该步骤</p></blockquote><ul><li><p>获取<a href="https://github.com/babysor/MockingBird">GitHub开源代码库</a></p></li><li><p>安装Anacodna， Python 3.8 或更高，参考<a href="https://zhuanlan.zhihu.com/p/348120084">中文教程</a>，在Anaconda中创建并切换到独立虚拟环境后，进行以下步骤。</p></li><li><p>安装 PyTorch， 直接<a href="https://pytorch.org/get-started/locally/">官网下载</a>。</p></li></ul><blockquote><p>验证本步骤是否成功：在系统任意路径下运行python，进入交互式编程界面后输入&nbsp;<code>import torch;</code>, 回车，&nbsp;<code>torch.cuda.is_available()</code>, 回车。如果都是成功的话，可以进行下一步。</p></blockquote><p><img src="https://github.com/babysor/MockingBird/wiki/imgs/torch1.png" alt="torch1"></p><ul><li><p>安装 ffmpeg。 1）<a href="http://ffmpeg.org/download.html#build-windows">下载</a>&nbsp;选择点击打开链接Windows对应的版本下载 2）解压 ffmpeg-xxxx.zip 文件到指定目录； 3）将解压后的文件目录中 bin 目录（包含 ffmpeg.exe ）添加进 path 环境变量中； 4）进入 cmd，输入 ffmpeg -version，可验证当前系统是否识别 ffmpeg 以及查看 ffmpeg 的版本</p></li><li><p>运行pip install -r requirements.txt 来安装剩余的必要包。</p></li></ul><blockquote><p>确保本步骤不报错</p></blockquote><ul><li>安装 webrtcvad 用 pip install webrtcvad-wheels。</li></ul><blockquote><p>确保本步骤不报错</p></blockquote><p>3.下载社区训练好的模型</p><p>在以下选择中下载模型</p><table><thead><tr><th>作者</th><th>下载链接</th></tr></thead><tbody><tr><td>@miven</td><td><a href="https://pan.baidu.com/s/1PI-hM3sn5wbeChRryX-RCQ">百度网盘 请输入提取码</a>&nbsp;提取码：2021</td></tr></tbody></table><blockquote><p>该模型与最新代码有兼容性问题 请查阅&nbsp;<a href="https://github.com/babysor/MockingBird/issues/37">https://github.com/babysor/MockingBird/issues/37</a>&nbsp;解决</p></blockquote><p>下载完成后，确保&nbsp;<code>xxx.pt</code>&nbsp;格式的文件放在代码库的&nbsp;<code>synthesizer\saved_models</code>文件夹下，<code>saved_models</code>如不存在请新建</p><p>4.运行demo_toolbox</p><p>在代码库路径下，运行&nbsp;<code>python demo_toolbox.py -d .\samples</code>&nbsp;尝试使用工具箱, 由于没有下载任何数据集，这里的功能比较简单：</p><ol><li><p>确保界面左边中间的&nbsp;<code>synthesizer</code>&nbsp;选择了上一步中&nbsp;<code>xxx.pt</code>&nbsp;文件对应的模型。</p></li><li><p>点击<code>Record</code>录入你的5秒语音</p></li><li><p>输入任意文字</p></li><li><p>点击&nbsp;<code>Synthesizer and vocode</code>&nbsp;等待效果输出较简单：</p></li><li><p>确保界面左边中间的&nbsp;<code>synthesizer</code>&nbsp;选择了上一步中&nbsp;<code>xxx.pt</code>&nbsp;文件对应的模型。</p></li><li><p>点击<code>Record</code>录入你的5秒语音</p></li><li><p>输入任意文字</p></li><li><p>点击&nbsp;<code>Synthesizer and vocode</code>&nbsp;等待效果输出</p></li></ol><h1 id="5-遇到的问题总结"><a href="#5-遇到的问题总结" class="headerlink" title="5.遇到的问题总结"></a>5.遇到的问题总结</h1><p>1.元数据流报错:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在CSDN找到下面的方式无法解决问题。</p><pre><code>pip install setuptools==57.5.0 -i https://pypi.tuna.tsinghua.edu.cn/simple </code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解决：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在对比开源作者的文件时，发现作者main主支内容和本地文件不一致，在其他分支有完整的项目。</p><p>2.&nbsp;&nbsp;报错：</p><p>&nbsp;&nbsp;&nbsp;&nbsp; cpu硬件没有运行，以及文件的训练数据无法找到。</p><pre><code>Arguments:    datasets_root:    None    enc_models_dir:   encoder\saved_models    syn_models_dir:   synthesizer\saved_models    voc_models_dir:   vocoder\saved_models    cpu:              False    seed:             None    no_mp3_support:   FalseWarning: you did not pass a root directory for datasets as argument.The recognized datasets are:        LibriSpeech/dev-clean</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解决：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将 开发者提供的云盘资料下级文件全部导入该项目的主项目下，不用像作者要求的创建文件夹。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我自行创建文件夹同时将所有文件放在 /saved_models 下，反而导致文件的路径出错。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/Python/"/>
    
    <category term="GitHub-Openner" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/Python/GitHub-Openner/"/>
    
    <category term="AI" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/Python/GitHub-Openner/AI/"/>
    
    
    <category term="Python" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/Python/"/>
    
    <category term="AI" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Python数据分析</title>
    <link href="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/01/24/Python%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96/"/>
    <id>https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/01/24/Python%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96/</id>
    <published>2023-01-24T11:21:06.000Z</published>
    <updated>2023-03-15T11:19:38.079Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Python数据分析与应用"><a href="#Python数据分析与应用" class="headerlink" title="Python数据分析与应用"></a>Python数据分析与应用</h1><h2 id="1-前置工作"><a href="#1-前置工作" class="headerlink" title="1.前置工作"></a>1.前置工作</h2><h3 id="1-部署环境"><a href="#1-部署环境" class="headerlink" title="1.部署环境"></a>1.部署环境</h3><h4 id="1-python环境"><a href="#1-python环境" class="headerlink" title="1. python环境"></a>1. python环境</h4><h4 id="2-jupyter-notebook编译器"><a href="#2-jupyter-notebook编译器" class="headerlink" title="2. jupyter notebook编译器"></a>2. jupyter notebook编译器</h4><pre><code>    1. 在cmd命令行下载 jupyternotebook        <pre class="line-numbers language-none"><code class="language-none">pip install jupyter -i https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>    2.进入jupyter notebook页面        jupyter是Python自带的多语言编译工具。        通过浏览器方式在本地进行编译工作。        PS：在浏览器运行工作时，不能关闭cmd命令行。            cmd命令行作为服务器功能支撑jupyternotebook实现运行。</code></pre><h4 id="3-Markdown"><a href="#3-Markdown" class="headerlink" title="3.Markdown"></a>3.Markdown</h4><pre><code>Markdown是一门使用普通文本编辑器编写的标记语言。</code></pre><h5 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h5><pre><code>'#' 可以控制标题字体大小，共 6 级。</code></pre><h5 id="2-列表"><a href="#2-列表" class="headerlink" title="2.列表"></a>2.列表</h5><pre><code>排序功能:    1.有序排序        1.        2.    2.无序排序        -        *        -</code></pre><h5 id="3-字体"><a href="#3-字体" class="headerlink" title="3.字体"></a>3.字体</h5><pre><code>文档中文字突出部分内容，使用加粗或斜体格式，是的部分功能醒目。通常使用的符号：    加粗：'*'     斜体：'_' </code></pre><h5 id="4-表格"><a href="#4-表格" class="headerlink" title="4.表格"></a>4.表格</h5><pre><code>Markdown绘制表格。列：    python | R | MATLAB |    --------|--------|-----|    接口统一 | 接口众多 | 自由度打 |解释：    第一行为表头    第二行分隔表头和主题部分    第三部分开始，每一行代表一个表格。    列与列间用 '|' 分隔开，每一行结尾也必须 '|'符号隔开。</code></pre><h5 id="5-数学公式编辑"><a href="#5-数学公式编辑" class="headerlink" title="5.数学公式编辑"></a>5.数学公式编辑</h5><pre><code>LaTex 是写科研论文的必备工具之一，课题插入数学公式。1. 在文本中插入数学公式前，应使用 '$ ... $'。列：    质能方程的LeTex表达式为: ‘SE = mc^2$' .2. 如果插入一个数学区块，应使用 '$$ ... $$'.列：    $$z=\frac{x}{y}$$     ===&gt;&gt;       z = x / y</code></pre><h4 id="导出功能"><a href="#导出功能" class="headerlink" title="导出功能"></a>导出功能</h4><pre><code>在UI界面，可以导出多种格式文件。</code></pre><h3 id="2-Python数据分析常用库"><a href="#2-Python数据分析常用库" class="headerlink" title="2.Python数据分析常用库"></a>2.Python数据分析常用库</h3><h4 id="1-NumPy-维度称为轴）"><a href="#1-NumPy-维度称为轴）" class="headerlink" title="1.NumPy (维度称为轴）"></a>1.NumPy (维度称为轴）</h4><p>NumPy是Numerical Python缩写，Python科学计算机的基础库。<br>主要内容：<br>    1. 快速高效的多维数组对象 —————— ndarray。<br>    2. 对数组进行元素级计算 和 直接对数组进行数学运算的函数。<br>    3. 读写硬盘上基于数组的数组的数据集的工具。<br>    4. 线性代数运算，傅里叶变换和随机数生成等功能。<br>    5. 将C，C++,Fortran代码集成到Python项目的工具。<br>除快速处理数组处理能力外，作为算法之间传递数据的容器。<br>在Python内部效率高于其他数据结构，在低级（其他）语言中可以直接操作数组中的数据。</p><h5 id="Python提供的array和list不同，array直接保存数值，和C语言的一维数组类似，但不支持多维数组，也无各种运算函数，不适合数值运算。"><a href="#Python提供的array和list不同，array直接保存数值，和C语言的一维数组类似，但不支持多维数组，也无各种运算函数，不适合数值运算。" class="headerlink" title="Python提供的array和list不同，array直接保存数值，和C语言的一维数组类似，但不支持多维数组，也无各种运算函数，不适合数值运算。"></a>Python提供的array和list不同，array直接保存数值，和C语言的一维数组类似，但不支持多维数组，也无各种运算函数，不适合数值运算。</h5><h4 id="1-创建数组对象"><a href="#1-创建数组对象" class="headerlink" title="1.创建数组对象"></a>1.创建数组对象</h4><pre><code>NumPy提供两种基本的对象：    ndarray(N-dimensional Array):存储单一数据类型的多维数组。    ufunc(Universal Function):对数组进行处理的函数。 </code></pre><h5 id="1-数组属性"><a href="#1-数组属性" class="headerlink" title="1.数组属性"></a>1.数组属性</h5><ol><li>ndim: 返回int。 表示数组的维数。</li><li>shape: 返回tuple。  表示数组的形状，对于n行m列的矩阵，形状为（n,m)。</li><li>size: 返回int。  表示数组的元素的总数，等于数组的形状中个元素的积。</li><li>dtype： 返回date-type。  表示数组中元素的数据类型。</li><li>itemsize： 返回int。</li></ol><h5 id="2-数组创建"><a href="#2-数组创建" class="headerlink" title="2.数组创建"></a>2.数组创建</h5><p>NumPy库<br>import numpy as np</p><ol><li>arange()<br> start<br> stop<br> step<br> dtype</li></ol><p>NumPy提供的array函数可以创建一维数组或多维数组。<br>格式：</p><pre class="line-numbers language-none"><code class="language-none">numpy.array(object,dtype=None,*,copy=True,order='K',subok=False,ndmin=0,like=None)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明表：</p><ol><li>object 接受 array_like.  表示所需创建的数组对象。无默认值</li><li>dtype 接受data_type.  表示数组所需的数据类型，如果未给定，选择保存对象所需的最小的数据类型。默认为 None</li><li>ndmin 接受int。  用于指定生成数组应该具有的最小维数。默认 0</li></ol><h6 id="1-创建数组并查看数组属性"><a href="#1-创建数组并查看数组属性" class="headerlink" title="1. 创建数组并查看数组属性"></a>1. 创建数组并查看数组属性</h6><pre class="line-numbers language-none"><code class="language-none">import numpy as np #导入NumPy库arr1 = np.array([[1,2,3,4],[2,3,4,5],[3,4,5,6]]) #创建一维数组 print('创建的数组为:\n',arr1) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建的数组为:<br> [[1 2 3 4]<br> [2 3 4 5]<br> [3 4 5 6]]</p><pre class="line-numbers language-none"><code class="language-none">print('数组形状为：',arr1.shape) #查看数组形状<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数组形状为： (3, 4)</p><pre class="line-numbers language-none"><code class="language-none">print('数组元素类型为：',arr1.dtype) #查看数组元素类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数组元素类型为： int32</p><pre class="line-numbers language-none"><code class="language-none">print('数组元素个数：',arr1.size) #查看数组元素个数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数组元素个数： 12</p><pre class="line-numbers language-none"><code class="language-none">print('数组每个元素存储空间为：',arr1.itemsize) #查看数组每一个元素的存储空间<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数组每个元素存储空间为： 4</p><h6 id="2-重新设置数组的shape属性"><a href="#2-重新设置数组的shape属性" class="headerlink" title="2.重新设置数组的shape属性"></a>2.重新设置数组的shape属性</h6><pre class="line-numbers language-none"><code class="language-none">arr1.shape = 4,3  #车厢内设置shapeprint('重新设置shape后的arr1为：\n',arr1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重新设置shape后的arr1为：<br> [[1 2 3]<br> [4 2 3]<br> [4 5 3]<br> [4 5 6]]</p><h6 id="Arange"><a href="#Arange" class="headerlink" title="Arange"></a>Arange</h6><pre><code>除了array函数创建数组之外，还可以用arange函数创建数组。arange函数类似Python自带的range，通过指定通过指定开始值，终值和步长来创建一维数组，创建的数组不包含终值。</code></pre><p>格式：</p><pre class="line-numbers language-none"><code class="language-none">numpy.arange([start,]stop,[step,]dtype=None,*,like=Node)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明表：</p><ol><li>start int                表示数组的开始值，生成的数组包括该值</li><li>stop  int                表示数值的终值，生成的数组不包括该值。无默认</li><li>step  int                表示在数组中，值之间的步长。默认1</li><li>dtype 接受数据类型        表示输出数值的类型。默认为None</li></ol><h6 id="3-使用arange函数创建数组"><a href="#3-使用arange函数创建数组" class="headerlink" title="3.使用arange函数创建数组"></a>3.使用arange函数创建数组</h6><pre class="line-numbers language-none"><code class="language-none">print('使用arange函数创建的数组为：\n',np.arange(0,1,0.1))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用arange函数创建的数组为：<br> [0. 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9]</p><p>2.linspace()      //等比数列<br>    start<br>    stop<br>    num<br>    dtype</p><pre><code>linspace函数通过指定开始值，终值和元素个数来创建一维数组，默认包括终值（和arange的区别）</code></pre><p>格式:</p><pre class="line-numbers language-none"><code class="language-none">numpy.linspace(start,stop,num=50,endpoint=True,retstep=False,dtype=None,axis=0)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明表：</p><ol><li>start </li><li>stop</li><li>num    int                   表示生成的样本数。 默认为50</li><li>dtype  接受数据类型           表示输出数值的类型。默认为None</li></ol><h6 id="4-使用linspace函数创建数组"><a href="#4-使用linspace函数创建数组" class="headerlink" title="4.使用linspace函数创建数组"></a>4.使用linspace函数创建数组</h6><pre class="line-numbers language-none"><code class="language-none">print('使用linspace函数创建的数值为：\n',np.linspace(0,1,12))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用linspace函数创建的数值为：<br> [0.         0.09090909 0.18181818 0.27272727 0.36363636 0.45454545<br> 0.54545455 0.63636364 0.72727273 0.81818182 0.90909091 1]<br>3.logspace(,,)</p><p>4.zeros((,))     // 二维 行列<br>5.ones()<br>6.eye()        //行列  对角 1<br>7.diag()       //二维 数组==&gt;&gt;行列<br>8.full( (,), )   //行列 填充<br>  full_like( array,3 )</p><h5 id="数组数据类型"><a href="#数组数据类型" class="headerlink" title="数组数据类型"></a>数组数据类型</h5><p>bool<br>inti<br>int8<br>int16<br>int32<br>int64<br>uint8<br>uint16<br>uint32<br>uint64<br>float16<br>float32<br>float64/float<br>complex64          //复数<br>complex128/complex</p><h5 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h5><p>1.random<br>  np.random()<br> 1.seed<br> 2.permutation<br> 3.shuffle<br> 4.binomial<br> 5.normal<br> 6.beta<br> 7.chisquare<br> 8.gamma<br> 9.uniform<br> 10.sample<br>      用什么当为样本，生成类似的数据</p><p>2.rand        //生成服从均匀分布的随机数<br>     numpy.random.randint(low,high=None,size=None,dtype=int)<br>  列：<br>       np.random.rand(2,3)<br>       array([[0.38786527, 0.22297469, 0.88171169],<br>       [0.75717494, 0.8715018 , 0.888392  ]])<br>    列：<br>        np.random.randint(10,size=(3,5))  //生成随机数  size规定行列<br>        array([[1, 8, 5, 6, 3],<br>            [8, 9, 1, 7, 7],<br>            [8, 9, 6, 0, 3]])<br>3.randn      //生成服从正态分布的随机数</p><h5 id="通过索引访问数组"><a href="#通过索引访问数组" class="headerlink" title="通过索引访问数组"></a>通过索引访问数组</h5><p>1.np.repeat(b,1,axis=0)       //数组 维度 行列排序 </p><p>一维数组索引<br>    1.arange[3:5]<br>    2.arange[:5]<br>    3.arange[2:4]=100,101<br>    4.arr[1:-1:2]          // 第三个 步长<br>    5.arr[5;1：-1]         // 步长为负数时，开始索引大于结束<br>多维数组索引<br>    1.arr[0,3:5]<br>    2.arr[1:,2:]          // 第二组开始 的 每行第三数据遍历<br>    3.arr[:,2]           // 每组的第三数据<br>整数序列索引和布尔值索引访问多维数组<br>    1.arr[[(0,1,2),(1,2,3)]]  // n组的第n个数据<br>    2.arr[1:,(0,2,3)]       // 第二数组开始，地标数据<br>    3.   mask=np.array([1,0,1],dtype=np.bool)<br>        // mask是一个布尔数组 用它索引第0，2行中第2列的元素<br>        arr[mask,2]         //  [3,9]<br>变换数组的形态<br>np.reshape(a,newsahpe,order=’c’)<br>    1.a        //需要变换形状的数组<br>    2.newshape   //变换后的形态<br>1.arr.reshape(3.4)<br>2.ravel        //展平<br>3.flatten/flatten(‘F’)     // 横向展平 纵向展平<br>3.hstack/vstack(arr1,arr2)  // 矩阵横向贴合/纵向贴合<br>4.concatenate((arr1,arr2),axis=1/0)  // 矩阵横向贴合/纵向贴合<br>5.hsplit/vsplit<br>   列：<br>     arr=np.arrage(16).reshape(4,4)<br>     np.hsplit(arr,2)        //横向/纵向分割成 2 个数组在同一个集合<br>6.split(arr,2,axis=1/0)     //横向(整块)/纵向(多块)切割数据</p><h5 id="Numpy矩阵和通用函数"><a href="#Numpy矩阵和通用函数" class="headerlink" title="Numpy矩阵和通用函数"></a>Numpy矩阵和通用函数</h5><h6 id="1-创建矩阵"><a href="#1-创建矩阵" class="headerlink" title="1.创建矩阵"></a>1.创建矩阵</h6><p>import numpy as np</p><p>1.mat(‘1,2,3;4,5,6;7,8,9’)<br>2.matrix([[1,2,3],[4,5,6],[7,8,9]])<br>3.bmat(‘arr1,arr2;arr1,arr2’)        //数据贴合</p><h6 id="2-矩阵运算"><a href="#2-矩阵运算" class="headerlink" title="2.矩阵运算"></a>2.矩阵运算</h6><p>1.矩阵和数相乘<br>2.矩阵相加<br>3.矩阵相减<br>4.矩阵相乘<br>    a矩阵的横数组与b矩阵的纵数组单位相乘的个个和为c矩阵的点数据</p><h6 id="3-查看矩阵属性"><a href="#3-查看矩阵属性" class="headerlink" title="3.查看矩阵属性"></a>3.查看矩阵属性</h6><p>1.arr.T    //转置矩阵         每行的数据颠倒数据顺序<br>2.arr.H   //共轭转置矩阵       每行的同角标数据归置同行数据<br>3.arr.I   //逆矩阵<br>4.arr.A   //二维数组的视图      </p><h5 id="ufunc函数-（对所有元素进行操作的函数"><a href="#ufunc函数-（对所有元素进行操作的函数" class="headerlink" title="ufunc函数 （对所有元素进行操作的函数"></a>ufunc函数 （对所有元素进行操作的函数</h5><h6 id="1-四则运算"><a href="#1-四则运算" class="headerlink" title="1.四则运算"></a>1.四则运算</h6><pre><code>arr数据组</code></pre><h6 id="2-比较运算"><a href="#2-比较运算" class="headerlink" title="2.比较运算"></a>2.比较运算</h6><h6 id="3-逻辑运算"><a href="#3-逻辑运算" class="headerlink" title="3.逻辑运算"></a>3.逻辑运算</h6><ol><li>np.all(x==y)<br> 用于测试所有的数组元素是否为真</li><li>np.any(x==y)<br> 用于测试任何元素是否为真</li></ol><h6 id="4-ufunc函数的广播机制"><a href="#4-ufunc函数的广播机制" class="headerlink" title="4.ufunc函数的广播机制"></a>4.ufunc函数的广播机制</h6><pre><code>计算前提：数组形状一致。四原则：1. 让所有的输入的数组向其中最长的shape数组看齐，如数组的shape不足，在前面加 1 补齐2.输出数组的shape是输入数组shape在各个轴上的最大值的组合。3.数组输入长度的某个轴的长度和输出的长度或输出数组的对应轴的长度相同，或输入数组的某个轴的长度为1，那么这个数组能够用于计算。4.当输入数组的某个长度为1，将使此轴上的第一组值进行运算。</code></pre><h6 id="5-利用NumPy进行统计分析"><a href="#5-利用NumPy进行统计分析" class="headerlink" title="5.利用NumPy进行统计分析"></a>5.利用NumPy进行统计分析</h6><ol><li>读/写文件<br> numpy.save(file,arr,allow_pickle=true,fix_imports=true)</li></ol><p>(1) 存入文件</p><pre class="line-numbers language-none"><code class="language-none">import numpy as nparr=np.arange(100).reshape(10,10)  # 创建数组np.save('../arr',arr) # 保存数组    可保存多个数组arr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>(2) 读取文件</p><pre class="line-numbers language-none"><code class="language-none"># 单个文件读取loaded_data=np.load('../arr.npy')# 多个文件读取loaded_data=np.load('../arr.npz')loaded_data['arr_0']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>文本读取格式<br>(1) savetxt<br> numpy.savetxt(fname,X,fmt=’%.18e’,delimiter=’’,newline=’\n’,header=’’,<br>footer=’’,commentd=’#’,encoding=None)</p><p> fname:文件名，接受Str<br> X：数据组，接受array_like<br> delimiter;表示数据分割符，接受str</p></li></ol><p>(2).loadtxt<br>    numpy.loadtxt(fname,dtype=&lt;class ‘float’&gt;,comments=’#’,delimiter=None,converters=None,skiprows=0,usecols=None,unpack=Flase,ndimn=0,encoding=’bytes’,max_rows=None,*,like=None)</p><p>(3).genfromtxt<br>    类似于loadtxt,面向结构化数据和缺失数据。</p><h6 id="6-使用函数进行简单的统计分析"><a href="#6-使用函数进行简单的统计分析" class="headerlink" title="6.使用函数进行简单的统计分析"></a>6.使用函数进行简单的统计分析</h6><p>除使用通用函数对数进行比较、逻辑等运算，还可以使用统计函数对数组进行排序、去重与重复、求最值、平均值等统计分析。</p><ol><li><p>排序<br>(1)直接排序(sort)<br>直接排序：arr.sort()<br>横轴排序：arr.sort(axis=1)<br>竖轴排序：arr.sort(axis=0)<br>解释：对数值直接排序<br>(2)简介排序(argsort、lexsort)<br>排序索引排序：arr.argsort()<br>多个键数组排序：np.lexsort((a,b,c))     # 多个键排序的顺序按照最后一个传入的键顺序排序数据<br>解释：对多个键数据集进行排序</p></li><li><p>去重与重复<br>(1)去重<br>np.unique(array)<br>(2)重复<br>np.tile(A,reps)      # 输入的数组(array):A    数组重复的次数:reps<br>np.repeat(a,repeats,axis=None)         # 输入的数组:a  数组重复的次数:repeats  复制的方向: 0/1</p></li><li><p>常用的统计函数<br>(1)聚合计算<br>解释：直接显示结果<br>计算数组的和：np.sum()<br>沿纵轴求和：np.sum(axis=0)<br>沿横轴求和：np.sum(axis=1)</p></li></ol><p>计算数组均值：np.mean()<br>沿纵轴计算数组均值：np.mean(axis=0)<br>沿横轴计算数组均值：np.mean(axis=1)</p><p>计算数组标准差：np.std()<br>计算数组方差：np.var()</p><p>计算数组最小值：np.min()<br>计算数组最大值：np.max()<br>返回数组最小值索引：np.argmin()<br>返回数组最大值索引：np.argmax()<br>(2)非聚合计算<br>解释：产生一个中间结果组成的数组<br>计算元素的累计和：np.cumsum()<br>计算元素的累计积少：np.cumprod()</p><h4 id="2-SciPy"><a href="#2-SciPy" class="headerlink" title="2.SciPy"></a>2.SciPy</h4><pre><code>SciPy是基于Python开源库，解决科学计算中各种标准问题的8个模板的集合。主要内容：    1. scipy.integrate：数值积分和微方程求解器    2. scipy.linalg：扩展了由numpy.linalg提供的线性代数求解和矩阵分解功能    3. scipy.optimize：函数优化器（最小化器）以及跟查找算法    4. scipy.signal：信号处理工具    5. scipy.sparse：稀疏矩阵和稀疏性系统求解器    6. scipy.special：SPECFUN[实现许多常用数字函数的Fortran库]的包装器    7. scipy.stats：包含检验连续和离散概率分布(密度函数，采样器，连续分布函数等)的函数与方法，各种统计检验的函数与方法，以及各类描述性统计函数的函数方法，</code></pre><h4 id="3-pandas"><a href="#3-pandas" class="headerlink" title="3.pandas"></a>3.pandas</h4><pre><code>pandas是Python的数据分析核心库。提供复杂精细的索引功能，以便完成重塑，切片，切块，聚合和选取数子集等操作。统计分析除了包含单一数值型特征的数据集中趋势、离散趋势和峰度与偏度统计知识外、还有包含多个特征间的比较计算等知识。</code></pre><h4 id="4-Matplotlib"><a href="#4-Matplotlib" class="headerlink" title="4.Matplotlib"></a>4.Matplotlib</h4><pre><code>Matplotlib是较为流行的绘制数据图表的Python库。</code></pre><h4 id="5-seaborn"><a href="#5-seaborn" class="headerlink" title="5.seaborn"></a>5.seaborn</h4><pre><code>seaborn是基于Matplotlib的数据可视化Python库，提供高度交互的界面。兼容NumPy，pandas的数据结构以及Scipy和stats models等统计模式。</code></pre><h4 id="6-pyecharts"><a href="#6-pyecharts" class="headerlink" title="6.pyecharts"></a>6.pyecharts</h4><pre><code>Echarts是百度开源的数据可视化工具，凭借良好的交互性，精巧的图表设计。</code></pre><h4 id="7-scikit-learn"><a href="#7-scikit-learn" class="headerlink" title="7.scikit-learn"></a>7.scikit-learn</h4><pre><code>scikit-learn是简单有效的数据挖取和分析工具。主要内容(基本模块)：    1.数据预处理    2.模型选择    3.分类    4.聚类    5.数据降维    6.回归  </code></pre><h1 id="Python-的网络资源获取"><a href="#Python-的网络资源获取" class="headerlink" title="Python 的网络资源获取"></a>Python 的网络资源获取</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>编辑器：PyCharm<br>库：requests BeautifulSoup4<br>###</p><pre class="line-numbers language-none"><code class="language-none">1.requests 网页下载库    requests.get/post(url,params,data,headers,timeout,verify,allow_redirects,cookies)url：下载的网页目标urlparams：字典形式，设置URL后面的参数，比如？id=123&amp;name=bilibilidata：字典或字符串，一般用于POST方法时提交数据headers：设置user-agent，refer请求头timeout：超时时间，sverify:True/False，是否进行HTTPS证书验证allow_redirects:True/False是否让requests做重定向处理cookies:附带本地cookies数据2.接收response响应    r = requests.get/post(url)    r.status_code       网页状态    r.encoding      设置编码规则    r.text      网页内容    r.headers           r.url    r.content       字节形式返回    r.cookies       导入本地cookies3.网页解析器  1.创建BeautifulSoup对象    from bs4 import BeautifulSoup    #根据HTML网页字符串创建 BeautifulSoup 对象    soup = beautifulSoup(        html_doc,                               #HTML文档字符串        'html.parser',                          #HTML解析器        from_encoding='utf8                     #HTML文档编码    ) 2.搜索节点 (find_all,find)    find_all(name,attrs,string)    比如：        soup.find_all('div',class_='abc,string'Python',href='/view/123.html')            #查找所有为 div标签 ，class为abc，文字为Python，连接符合/view/123.html的节点 3.访问节点信息    node.name   #标签名字    node['href']  # 元素属性    node.get_text()     #查找到的节点的链接文字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-网页"><a href="#2-网页" class="headerlink" title="2.网页"></a>2.网页</h2><pre class="line-numbers language-none"><code class="language-none">import requestsfrom bs4 import BeautifulSoupimport selectorsclass UrlManager():    '''    Url管理器    '''    def __init__(self):        self.new_urls = set()        self.old_urls = set()    def add_new_url(self,url):        if url is None or len(url) == 0:            return        if url in self.new_urls or url in self.old_urls:            return        self.new_urls.add(url)    def add_new_urls(self,urls):        if urls is None or len(urls) == 0:            return        for url in urls:            self.add_new_url(url)    def get_url(self):        if self.has_new_url():            url = self.new_urls.pop()            self.old_urls.add(url)            return url        else:            return None    def has_new_url(self):        return len(self.new_urls) &gt; 0#---------------------------------------------if __name__ == "__main__":    url_manager = UrlManager()    url_manager.add_new_url("url1")    url_manager.add_new_url("url2")    url_manager.add_new_url("url3")    print(url_manager.new_urls,url_manager.old_urls)    print("#"*30)    new_url = url_manager.get_url()    print(url_manager.new_urls, url_manager.old_urls)    print("#" * 30)    new_url = url_manager.get_url()    print(url_manager.new_urls, url_manager.old_urls)    print("-"*30)    print(url_manager.has_new_url())    print(new_url)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-获取页面文本内容"><a href="#3-获取页面文本内容" class="headerlink" title="3.获取页面文本内容"></a>3.获取页面文本内容</h2><pre class="line-numbers language-none"><code class="language-none">import requestsfrom bs4 import BeautifulSoupimport selectorsurl = "https://www.wabisabifag.top/"r = requests.get(url)print(f'{r.status_code}\n '      # f'{r.headers}\n '      f'{r.encoding}\n')for (index,value) in enumerate(r.text):    print(value,end='')    if 0 == index%120: print()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-获取网页标签内容"><a href="#4-获取网页标签内容" class="headerlink" title="4.获取网页标签内容"></a>4.获取网页标签内容</h2><pre class="line-numbers language-none"><code class="language-none">import  requestsfrom bs4 import  BeautifulSoupdef get_novel_chapters():    root_url = "http://www.89wxw.cn/0_9/"      # 网页无效了    r = requests.get(root_url)    r.encoding="gbk"    soup = BeautifulSoup(r.text,"html.parser")    for dd in soup.find_all("dd"):        link = dd.find("a")        if not link:            continue        print(link)get_novel_chapters()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-正则表达式"><a href="#5-正则表达式" class="headerlink" title="5.正则表达式"></a>5.正则表达式</h2><pre class="line-numbers language-none"><code class="language-none">url1 = "http://www.bilibili.com"url2 = "http://www.bilibili.com/123.html#comments"url3 = "http://www.baidu.com"import  repattern = r'^http://www.bilibili.com$'print(re.match(pattern,url1)) #okprint(re.match(pattern,url2))print(re.match(pattern,url3))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-验证网页是否有效并导入本地"><a href="#6-验证网页是否有效并导入本地" class="headerlink" title="6.验证网页是否有效并导入本地"></a>6.验证网页是否有效并导入本地</h2><pre class="line-numbers language-none"><code class="language-none">from utils import url_managerfrom bs4 import BeautifulSoupimport requestsimport reroot_url = "https://www.bilibili.com/"urls = url_manager.UrlManager()urls.add_new_url(root_url)fout = open("craw_all_pages.txt", "w")while urls.has_new_url():    curr_url = urls.get_url()    r = requests.get(curr_url, timeout=10)    if r.status_code!= 200:        print("error.retrun status_code is over 200", curr_url)        continue    soup = BeautifulSoup(r.text, "html.parser")    title = soup.title.string    fout.write("%s\t%s\n" % (curr_url, title))    fout.flush()    print("成功:%s,%s,%d" % (curr_url, title, len(urls.new_urls)))    links = soup.find_all("a")    for link in links:        href = link["href"]        pattern = r'^https://www.bilibili.com/\d+.html$'        if re.match(pattern, href):            urls.add_new_url()fout.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-获取豆瓣页面网址"><a href="#7-获取豆瓣页面网址" class="headerlink" title="7.获取豆瓣页面网址"></a>7.获取豆瓣页面网址</h2><pre class="line-numbers language-none"><code class="language-none">from turtle import pdimport requestsfrom bs4 import BeautifulSoupimport pprintimport jsonimport pdb# 构造分页数字列表page_indexs = range(0, 250, 25)list(page_indexs)def download_all_htmls():  # 获取HTML的page信息    htmls = []    for idx in page_indexs:        print(idx)        url = f"https://movie.douban.com/top250?start={idx}&amp;filter="        print("craw html:", url)        r = requests.get(url)        # if r.status_code != 200:        #     raise Exception("error")        htmls.append(r.text)    return htmlshtmls = download_all_htmls()# 解析数据def parse_single_html(html):    soup = BeautifulSoup(html, "html.parser")    article_items = (        soup.find("div", class_="article")        .find("ol", class_="grid_view")        .find_all("div", class_="item")    )    datas = []    for article_item in article_items:        rank = article_item.find("div", class_="pic").find("em").get_text()        info = article_item.find("div", class_="info")        title = info.find("div", class_="hd").find("span", class_="title").get_text()        # print(title)        stars = (            info.find("div", class_="bd")            .find("div", class_="star")            .find_all("span")        )        rating_star = stars[0]["class"][0]        rating_num = stars[1].get_text()        comments = stars[3].get_text()        datas.append({            "rank": rank,            "title": title,            "rating_star": rating_star.replace("rating", "").replace("-t", ""),            "rating_num": rating_num,            "comments": comments.replace("评价人数:", "")        })    return dataspprint.pprint(parse_single_html(htmls[0]))all_datas = []for html in htmls:    all_datas.extend(parse_single_html((html)))print(all_datas)print(len(all_datas))#导入表格df =pd.DataFrame(all_datas)print(df)df.to_eccel("豆瓣电影TOP250.xlsx")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>31，59有报错没有修改，可能是获取标签问题，也可能是代码自生的错误。</code></pre><p>报错：Traceback (most recent call last):<br>  File “C:\Users\WabiSabifag\PycharmProjects\web_crawler\douban_test\goline.py”, line 59, in <module><br>    pprint.pprint(parse_single_html(htmls[0]))<br>  File “C:\Users\WabiSabifag\PycharmProjects\web_crawler\douban_test\goline.py”, line 31, in parse_single_html<br>    soup.find(“div”, class_=”article”)<br>AttributeError: ‘NoneType’ object has no attribute ‘find’</module></p><pre class="line-numbers language-none"><code class="language-none">#封装import requestsfrom bs4 import BeautifulSoupimport pprintimport jsonfrom douban_test.goline import download_all_htmls,parse_single_htmlhtmls = download_all_htmls()for i in  range(len(htmls[0])):    print(i)pprint.pprint(parse_single_html(htmls[0]))all_datas = []for html in htmls:    all_datas.extend(parse_single_html((html)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-网页图片获取"><a href="#8-网页图片获取" class="headerlink" title="8.网页图片获取"></a>8.网页图片获取</h2><pre class="line-numbers language-none"><code class="language-none">coding = 'utf-8'import requestsfrom bs4 import BeautifulSoupimport osurl = "https://pic.netbian.com/4kmeinv/"def craw_html(url):    resp = requests.get(url)    resp.encoding = 'gbk'    print(f"获取网页状态:{resp.status_code}")    html = resp.text        #得到页面    return  htmldef parse_and_download(html):    soup = BeautifulSoup(html, "html.parser")    imgs = soup.find_all("img")    for img in imgs:        src = img['src']        if '/uploads/' not in src:            continue        src = f"https://pic.netbian.com{src}"        filename = os.path.basename(src)        with open(f"img/{filename}", "wb") as f:            resp_img = requests.get(src)            f.write(resp_img.content)# 如果页面有规律  循环获取页面urls = ["https://pic.netbian.com/4kmeinv/"]+[    f"https://pic.netbian.com/4kmeinv/index_{i}.html"    for i in range(2,4)]for url in urls:    html = craw_html(url)    parse_and_download(html)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="本地图片文件的重命名"><a href="#本地图片文件的重命名" class="headerlink" title="本地图片文件的重命名"></a>本地图片文件的重命名</h1><pre class="line-numbers language-none"><code class="language-none"># coding=utf-8import ospath_name = os.path.join(os.getcwd(), r'C:\Users\11111\Desktop\1')''' 获取图片所在文件夹的地址 可修改为文件的相对路径，比如：  path_name = D:\Documents\GitHub\my_OpenCV\models-master\research\my_data\myimages)'''num = 3323 # 图片命名的序号（从num开始）for item in os.listdir(path_name):#进入到文件夹内，对每个文件进行循环遍历    #re_name=str(num)+'.jpg'    re_name = '图片_'+str(num)+'.jpg' # 重命名图片文件的格式（从num开始）    os.rename(os.path.join(path_name,item),os.path.join(path_name,re_name))    num+=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Image库——图片字符化"><a href="#Image库——图片字符化" class="headerlink" title="Image库——图片字符化"></a>Image库——图片字符化</h1><pre class="line-numbers language-none"><code class="language-none"># coding=utf-8from PIL import Image# 生成图像所要的字符集codeLib = ''' `1234567890-=~!@#$%^&amp;*()_+qwertyuiop[]\QWERTYUIOP{}|asdfghjkl;'ASDFGHJKL:"zxcvbnm,./ZXCVBNM&lt;&gt;?'''count = len(codeLib)print(count)print(int(0.5))# 将彩色图片转换为黑白图片， 然后像素点的灰度值和字符集建立映射def transforml(image_file):    # 转换为黑白图片，参数”L“表示黑白模式    image_file=image_file.convert("L")    codePic = ''                    #  size 属性表示图片的分辨率，‘0’为横向大小，‘1’为纵向    for h in range(0,image_file.size[1]):        for v in range(0,image_file.size[0]):                    # 返回指定位置的像素值，如果打开的图象是多层次的图片，那这个方            gray = image_file.getpixel((v,h))            print(gray)            # 建立灰度和字符集的映射            codePic = codePic + codeLib[int(((count-1)*gray)/256)]        codePic = codePic+'\r\n'    return codePic# 打开图片fp = open('1.jpg','rb')image_file = Image.open(fp)# 调整图片大小image_file = image_file.resize((int(image_file.size[0]*0.5),int(image_file.size[1]*0.25)))print(u'Info:',image_file.size[0],' ',image_file.size[1],' ',count)# 打开 txt 文件写入字符tmp = open('index.txt','v')tmp.write(transforml((image_file)))tmp.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/Python/"/>
    
    <category term="数据分析" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/Python/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Python" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/Python/"/>
    
    <category term="数据分析" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>jQuery 基础</title>
    <link href="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/01/05/jQuery-%E5%9F%BA%E7%A1%80/"/>
    <id>https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/01/05/jQuery-%E5%9F%BA%E7%A1%80/</id>
    <published>2023-01-05T15:36:04.000Z</published>
    <updated>2023-02-24T08:39:43.416Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h6 id="需要引入本地文件-或-https-code-jquery-com-下载文件"><a href="#需要引入本地文件-或-https-code-jquery-com-下载文件" class="headerlink" title="需要引入本地文件 或  https://code.jquery.com 下载文件"></a>需要引入本地文件 或  <a href="https://code.jquery.com/">https://code.jquery.com</a> 下载文件</h6><h2 id="1-jQuery获取BOM对象"><a href="#1-jQuery获取BOM对象" class="headerlink" title="1.jQuery获取BOM对象"></a>1.jQuery获取BOM对象</h2><pre class="line-numbers language-none"><code class="language-none">javascript$(document).ready(function(){// 页面BOM加载完成后执行的代码})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象"></a>获取对象</h5><pre class="line-numbers language-none"><code class="language-none">$("div")[0];$("div")[0].style.display="none";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-jQuery选择器"><a href="#2-jQuery选择器" class="headerlink" title="2.jQuery选择器"></a>2.jQuery选择器</h2><h3 id="1-基本选择器"><a href="#1-基本选择器" class="headerlink" title="1.基本选择器"></a>1.基本选择器</h3><pre class="line-numbers language-none"><code class="language-none">1.标签选择器    element        $("h2")2.类选择器    .class        $(".title")3.ID选择器    #id        $("#title")4.并集选择器    name1,name2....        $("div,p, .title")5.交集选择器    element.class(element#id)        $("h2.title")6.全局选择器    *        $("*")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-层次选择器"><a href="#2-层次选择器" class="headerlink" title="2.层次选择器"></a>2.层次选择器</h3><pre class="line-numbers language-none"><code class="language-none">1.后代选择器        ancestor descendant        $("#menu span")2.子选择器        parent&gt;child        $("#menu&gt;span")3.相邻元素选择器        prev+next        $("h2+dl")4.同辈选择器        prev~sibings        $("h2~dl")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-属性选择器"><a href="#3-属性选择器" class="headerlink" title="3.属性选择器"></a>3.属性选择器</h3><pre class="line-numbers language-none"><code class="language-none">1.[attribute]        $("[id]")        所有含有 id 属性的2.[attribute^=value]        $("[href^='en']")        选取href属性 en{% label  开头  pink %} 的元素3.[attribute$=value]        $("[href$='.jpg']")        选取href属性 .jpg {% label  结尾 pink %}的元素4.[attribute*=value]        $("[href\*='txt']")        选取href属性{% label  中 pink %}含有 txt 的元素5.\[selector 1][selector 2]         $("li[id]\[title]=新闻要点")        选取含有id属性和title熟悉为新闻要点的li6.[alttribute=value]        $("div[class='current']")        获取class等于current的所有div7.[alttribute!=value]     $("div[class='current']")        获取class不等于current的所有div8.[alttribute_=value]        $("div[class_='box']")            获取class属性等于或含有box的字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-基本过滤选择器"><a href="#4-基本过滤选择器" class="headerlink" title="4.基本过滤选择器"></a>4.基本过滤选择器</h3><h4 id="1-基本过滤选择器"><a href="#1-基本过滤选择器" class="headerlink" title="1.基本过滤选择器"></a>1.基本过滤选择器</h4><pre class="line-numbers language-none"><code class="language-none">1. :first        $("li:first")2. :last          $("li:last")3. :even        $("li:even")              索引为偶数的 li4. :odd         $("li:odd")                索引为奇数的 li5. :not          $("li:not(li:eq(3))")   索引不是3的所有 li6. :focus      $("input:focus")        匹配当前获取焦点的 input 元素7. :animated       $("div:animated")       匹配当前执行动画的8. :target      $("div:target")         获取&lt;div id="foo"\&gt;元素9. :contains(text)     $("li:contains('js')")       获取当前内容中包含 js 的 li10. :empty     $("li:empty")         获取内容为空的 li11. :has(selector)        $("li:has('a')")     获取内容中包含 &lt;a&gt; 元素的 所有 &lt;li&gt; 元素12. :parent     $("li:parent")          选取所有带子元素或文本的 li 元素13. :hidden    $("li:hidden")         获取所有隐藏的 li 元素14. :visible     $("li:visible")           获取所有可见的 li 元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-索引值选择元素的基本过滤选择器"><a href="#2-索引值选择元素的基本过滤选择器" class="headerlink" title="2.索引值选择元素的基本过滤选择器"></a>2.索引值选择元素的基本过滤选择器</h4><pre class="line-numbers language-none"><code class="language-none">1.:eq(index)        $("li:eq(1)")         索引等于1的 li2.:gt(index)         $("li: gt(1)")         索引大于1的 li3.:lt(index)          $("li: lt(1)")          索引小于1的 li<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-子元素选择器"><a href="#5-子元素选择器" class="headerlink" title="5.子元素选择器"></a>5.子元素选择器</h3><pre class="line-numbers language-none"><code class="language-none">1.:nth-child( index / even /odd / 公式 )                索引index默认(1)，子元素显示(公式: 2n  (n默认(0) )2.:first-child            3.:last-child4.:only-child                    当前唯有一个子元素时匹配5.:nth-last-child()            选择父元素的第n个子元素，计数从最后一个开始到第一个6.:nth-of-type()                选择同属于同一个父元素下，标签名相同的第n个子元素7.:first-of-type8.:last-of-type9.:only-of-type10.:nth-last-of-type()     选择同属于同一个父元素下，标签名相同的第n个子元素,计数从最后一个元素到第一个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-表单选择器"><a href="#6-表单选择器" class="headerlink" title="6.表单选择器"></a>6.表单选择器</h3><pre class="line-numbers language-none"><code class="language-none">1.:input2.:text3.:password4.:radio5.:checkbox6.:submit7.:reset8.:image9.:button10.:file11.:hidden12.:enabled13.:disabled14.:checked15.:selected注意的地方:   ${"input"}仅能获取表单标签，${":input"}获取页面的所有表单控件，包括 select，textarea 控件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-jQuery-样式操作"><a href="#3-jQuery-样式操作" class="headerlink" title="3.jQuery 样式操作"></a>3.jQuery 样式操作</h2><h3 id="1-修改样式"><a href="#1-修改样式" class="headerlink" title="1.修改样式"></a>1.修改样式</h3><h4 id="1-获取样式"><a href="#1-获取样式" class="headerlink" title="1.获取样式"></a>1.获取样式</h4><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;    div{        width:100px;        heigth:200px;        background-color: 'pink';    }&lt;/style&gt;&lt;div&gt;&lt;a&gt; this div&lt;/a&gt;&lt;/div&gt;&lt;script&gt;    console.log($("div).css("width"));  // 100px&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-设置单个样式"><a href="#2-设置单个样式" class="headerlink" title="2.设置单个样式"></a>2.设置单个样式</h4><pre class="line-numbers language-none"><code class="language-none">$("div").css("width","300px");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-设置多个样式"><a href="#3-设置多个样式" class="headerlink" title="3.设置多个样式"></a>3.设置多个样式</h4><pre class="line-numbers language-none"><code class="language-none">$("div").css({            width:40,            heigth:2000,            background:"pink"        });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-类操作"><a href="#2-类操作" class="headerlink" title="2.类操作"></a>2.类操作</h3><h4 id="1-准备HYML网页"><a href="#1-准备HYML网页" class="headerlink" title="1.准备HYML网页"></a>1.准备HYML网页</h4><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;        div{background-color: gainsboro;}/* //灰色 */        .a{background-color: beige;}/* //米黄色 */        .b{background-color: aquamarine;}/* //青色 */        .c{background-color: pink; }/* //粉色 */&lt;/style&gt;    &lt;div&gt;添加类名&lt;/div&gt;    &lt;div class="a"&gt;删除类名&lt;/div&gt;    &lt;div class="b"&gt;切换类名&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-addClass-添加类"><a href="#2-addClass-添加类" class="headerlink" title="2.addClass()添加类"></a>2.addClass()添加类</h4><pre class="line-numbers language-none"><code class="language-none">// 添加类名        $("div").click(function(){            $(this).addClass("a");        });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-removeClass-移除类"><a href="#3-removeClass-移除类" class="headerlink" title="3.removeClass()移除类"></a>3.removeClass()移除类</h4><pre class="line-numbers language-none"><code class="language-none">// 移除类        $("div").click(function(){            $(this).removeClass("a");        });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-toggle-Class-切换类"><a href="#4-toggle-Class-切换类" class="headerlink" title="4.toggle Class()切换类"></a>4.toggle Class()切换类</h4><pre class="line-numbers language-none"><code class="language-none">// 切换类    点赞功能实现        $("div").click(function(){            $(this).toggleClass("c")        })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-功能实例"><a href="#5-功能实例" class="headerlink" title="5.功能实例"></a>5.功能实例</h4><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset="utf-8"&gt;        &lt;title&gt;&lt;/title&gt;        &lt;script src="jquery-3.6.0.js"&gt;&lt;/script&gt;    &lt;/head&gt;    &lt;style&gt;        .current{            background-color: pink;            width: 60px;            height: 30px;        }    &lt;/style&gt;    &lt;body&gt;        &lt;div class="tab"&gt;            &lt;div class="tab_list"&gt;                &lt;ul&gt;                    &lt;li class="current"&gt;商品介绍&lt;/li&gt;                    &lt;li&gt;规格包装&lt;/li&gt;                    &lt;li&gt;售后保障&lt;/li&gt;                    &lt;li&gt;商品评价&lt;/li&gt;                    &lt;li&gt;手机社区&lt;/li&gt;                &lt;/ul&gt;            &lt;/div&gt;            &lt;div class="tab_con"&gt;                &lt;div class="item" style="display: block;"&gt;商品介绍模块内容&lt;/div&gt;                &lt;div class="item"&gt;规模与包装模块内容&lt;/div&gt;                &lt;div class="item"&gt;售后保障模块内容&lt;/div&gt;                &lt;div class="item"&gt;商品评价(50000)模块内容&lt;/div&gt;                &lt;div class="item"&gt;手机社区模块内容&lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;script&gt;        $(".tab_list li").click(function(){            $(this).addClass("current").siblings().removeClass("current");            var index = $(this).index();            console.log(index);            //让内容区域相应的索引号的item显示，其余的item隐藏            $(".tab_con .item").eq(index).show().siblings().hide();        });    &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-jQuery类操作-和-className的区别"><a href="#6-jQuery类操作-和-className的区别" class="headerlink" title="6.jQuery类操作 和 className的区别"></a>6.jQuery类操作 和 className的区别</h4><p>JavaScript的className会替换掉元素原来的所有类名，可以比喻为串联。<br>jQuery类操作不影响原来的类名存在，可以理解为并联。</p><h3 id="3-jQuery动画"><a href="#3-jQuery动画" class="headerlink" title="3.jQuery动画"></a>3.jQuery动画</h3><h4 id="1-显示和隐藏效果"><a href="#1-显示和隐藏效果" class="headerlink" title="1.显示和隐藏效果"></a>1.显示和隐藏效果</h4><pre class="line-numbers language-none"><code class="language-none">元素：show hidde toggle&lt;script src="jquery-3.6.0.js"&gt;&lt;/script&gt;&lt;style&gt;    div{        width: 150px;height: 300px;background-color: pink;    }    p{        text-align: center;    }    p:hover{        color: red;    }&lt;/style&gt;&lt;button&gt;显示&lt;/button&gt;&lt;button&gt;隐藏&lt;/button&gt;&lt;button&gt;切换&lt;/button&gt;&lt;div&gt;    &lt;p&gt;写入导航栏信息&lt;/p&gt;&lt;/div&gt;&lt;script&gt;    $("button").eq(0).click(function(){        $("div").show(1000,function(){            alert("已在显示");        });    });    $("button").eq(1).click(function(){        $("div").hide(1000,function(){            alert("已经隐藏");        });    });    $("button").eq(2).click(function(){        $("div").toggle(1000);    });&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-滑动效果-hover-替代鼠标移入、移出事件"><a href="#2-滑动效果-hover-替代鼠标移入、移出事件" class="headerlink" title="2.滑动效果  hover()替代鼠标移入、移出事件"></a>2.滑动效果  hover()替代鼠标移入、移出事件</h4><pre class="line-numbers language-none"><code class="language-none">元素：slideDown slideUp slideToggle&lt;script src="jquery-3.6.0.js"&gt;&lt;/script&gt;&lt;style&gt;    ul li{        display: inline-block;        width: 60px;        height: 20px;        float: left;        text-align: center;    }    ul li:hover{        background-color: #f3f5f7;    }    ul li a:hover{        color: red;    }&lt;/style&gt;&lt;ul class="nav"&gt;    &lt;li&gt;        &lt;a href="#"&gt;Weibo&lt;/a&gt;        &lt;ul hidden&gt;            &lt;li&gt;&lt;a href=""&gt;私信&lt;/a&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=""&gt;评论&lt;/a&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=""&gt;@我&lt;/a&gt;&lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;a href=""&gt;QQ&lt;/a&gt;        &lt;ul hidden&gt;            &lt;li&gt;&lt;a href=""&gt;添加&lt;/a&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=""&gt;回复&lt;/a&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=""&gt;删除&lt;/a&gt;&lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;script&gt;    // 下放    // $(".nav &gt; li").mouseover(function(){    //     $(this).children("ul").slideDown(100);    // });    //上敛    // $(".nav &gt; li").mouseout(function(){    //     $(this).children("ul").slideUp(1000);    // });    //可切换    // $(".nav &gt; li").mouseout(function(){    //     $(this).children("ul").slideToggle(200);    // });    // hover方法    // $(".nav &gt; li").hover(function(){    //     $(this).children("ul").slideDown(20);    //     },function(){    //         $(this).children("ul").slideUp(20);    // });    //简化版本    $(".nav &gt; li").hover(function(){        $(this).children("ul").slideToggle(20);    });&lt;/script&gt;        //  鼠标经过时有抽动的问题  下面的文章可以优化问题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-停止动画"><a href="#3-停止动画" class="headerlink" title="3.停止动画"></a>3.停止动画</h4><pre class="line-numbers language-none"><code class="language-none">元素： stop$("div").stop();    //停止当前动画，继续下一个动画$("div").stop(true);    //清楚div元素动画队列中的所有动画$("div").stop(true,true);    //停止当前动画，清楚动画队列中的所有动画$("div").stop(false,true);    //停止当前动画，继续执行下一个动画//优化    $(".nav &gt; li").hover(function(){        $(this).children("ul").stop().slideToggle(20);    });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-淡入淡出"><a href="#4-淡入淡出" class="headerlink" title="4.淡入淡出"></a>4.淡入淡出</h4><pre class="line-numbers language-none"><code class="language-none">元素：fadeIn fadeOut fadeTo fadeToggle&lt;script src="jquery-3.6.0.js"&gt;&lt;/script&gt;&lt;style&gt;    div{width: 100px;height: 100px;float: left;margin-left: 5px;background-color: pink;}    .box{width: 425px;height: 105px;padding-top: 5px;border: 1px solid #ccc;}    .red{background-color: red;}    .green{background-color: green;}    .yellow{background-color: yellow;}    .orange{background-color: orange;}&lt;/style&gt;&lt;div class="box"&gt;    &lt;div class="red"&gt;&lt;/div&gt;    &lt;div class="green"&gt;&lt;/div&gt;    &lt;div class="yellow"&gt;&lt;/div&gt;    &lt;div class="orange"&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt;    //淡入  显示匹配元素    $(".box div").fadeIn(1,1);    // 鼠标经过时灰  移出时恢复    $(".box div").hover(    function(){        $(this).fadeTo(1,0.2);        },    function(){        $(this).fadeTo(1,1);    });    &lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-自定义动画"><a href="#5-自定义动画" class="headerlink" title="5.自定义动画"></a>5.自定义动画</h4><pre class="line-numbers language-none"><code class="language-none">元素：animate&lt;script src="jquery-3.6.0.js"&gt;&lt;/script&gt;&lt;style&gt;    div{width: 100px;height: 100px;float: left;background-color: pink;position:absolute;}&lt;/style&gt;&lt;button&gt;动起来&lt;/button&gt;&lt;div &gt;    &lt;input type="reset" value="重置" hidden&gt;&lt;/div&gt;&lt;script&gt;    $("button").click(function(){        $("div").animate({left:500,top:300,opacity:.4,width:500},1000),        $("input").show()//运行时间        // $("div").animate({left:8,top:27,opacity:1,width:100},1);    });        //回到之前位置    $("input").click(function(){        $("div").animate({left:8,top:27,opacity:1,width:100},1)        $("input").hide()    })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-手风琴实列"><a href="#6-手风琴实列" class="headerlink" title="6.手风琴实列"></a>6.手风琴实列</h4><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset="utf-8"&gt;        &lt;title&gt;&lt;/title&gt;        &lt;script src="jquery-3.6.0.js"&gt;&lt;/script&gt;        &lt;style type="text/css"&gt;            *{margin: 0;padding: 0;}            .king{width: 852px;margin: 100px auto;                    background-color: #f3f6f9;                    overflow: hidden;padding: 10px;}            .king ul{list-style: none;}        /* 取消列表样式 */            .king li{position: relative;float: left;                    width: 69px;height: 69px;margin-right: 10px;}/* 设置列表样式 */            /* //设置初始状态 */            .king li.current{width: 224px;}            .king li.current .big{display: block;}            .king li.current .small{display: none;}            /* //设置大方块样式 */            .big{                width: 224px;height: 69px;                display: none;border-radius: 5px;}            /* //设置小方块 */            .small{                /* position: absolute;top: 0;left: 0; */                width: 69px;height: 69px;border-radius: 5px;}            /* //大小方块颜色 */            .red1{background-color: #ff3333;}            .orange1{background-color: orange;}            .yellow1{background-color: yellow;}            .green1{background-color: green;}            .blue1{background-color: blue;}            .pink1{background-color: pink;}            .purple{background-color: purple;}            .silver{background-color: silver;}            .red2{background-color: #ff3333;}            .orange2{background-color: orange;}            .yellow2{background-color: yellow;}            .green2{background-color: green;}            .blue2{background-color: blue;}            .pink2{background-color: pink;}        &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div class="king"&gt;            &lt;ul&gt;                &lt;li class="current"&gt;                    &lt;div class="small  red1"&gt;&lt;/div&gt;                    &lt;div class="big  red2"&gt;&lt;/div&gt;                &lt;/li&gt;                &lt;li&gt;                    &lt;div class="small  orange1"&gt;&lt;/div&gt;                    &lt;div class="big  orange2"&gt;&lt;/div&gt;                &lt;/li&gt;                &lt;li&gt;                    &lt;div class="small  yellow1"&gt;&lt;/div&gt;                    &lt;div class="big  yellow2"&gt;&lt;/div&gt;                &lt;/li&gt;                &lt;li&gt;                    &lt;div class="small  green1"&gt;&lt;/div&gt;                    &lt;div class="big  green2"&gt;&lt;/div&gt;                &lt;/li&gt;                &lt;li&gt;                    &lt;div class="small  blue1"&gt;&lt;/div&gt;                    &lt;div class="big  blue2"&gt;&lt;/div&gt;                &lt;/li&gt;                &lt;li&gt;                    &lt;div class="small  pink1"&gt;&lt;/div&gt;                    &lt;div class="big  pink2"&gt;&lt;/div&gt;                &lt;/li&gt;                &lt;li&gt;                    &lt;div class="small  purple"&gt;&lt;/div&gt;                    &lt;div class="big  purple"&gt;&lt;/div&gt;                &lt;/li&gt;                &lt;li&gt;                    &lt;div class="small  silver"&gt;&lt;/div&gt;                    &lt;div class="big  silver"&gt;&lt;/div&gt;                &lt;/li&gt;            &lt;/ul&gt;        &lt;/div&gt;        &lt;script&gt;            //鼠标经过            $(".king li").mouseover(function(){                $(this).stop().animate({                    width:224                }).find(".small").stop().fadeOut().siblings(".big").stop().fadeIn();                $(this).siblings("li").stop().animate({                    width:69                }).find(".small").stop().fadeIn().siblings(".big").stop().fadeOut();            })        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-jQuery属性操作"><a href="#4-jQuery属性操作" class="headerlink" title="4.jQuery属性操作"></a>4.jQuery属性操作</h3><h4 id="1-prop-方法"><a href="#1-prop-方法" class="headerlink" title="1.prop()方法"></a>1.prop()方法</h4><h5 id="获取或设置元素固有属性"><a href="#获取或设置元素固有属性" class="headerlink" title="获取或设置元素固有属性"></a>获取或设置元素固有属性</h5><pre class="line-numbers language-none"><code class="language-none">$().prop("")    1.元素固有属性 (获取和设置)        &lt;a href="http://localhost" title="主页"&gt;&lt;/a&gt;        &lt;script&gt;            $("a").prop("title"); /* 获取值 */            $("a").prop("title","首页");     /* 设置值 */         &lt;/script&gt;    2.表单checked属性 (获取)        &lt;input type="checkbox" checked&gt;        // 获取表单元素的checked值            $("input").change(function(){                console.log($(this).prop("checked"))            })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-attr-方法"><a href="#2-attr-方法" class="headerlink" title="2.attr()方法"></a>2.attr()方法</h4><h5 id="获取或设置元素自定义属性"><a href="#获取或设置元素自定义属性" class="headerlink" title="获取或设置元素自定义属性"></a>获取或设置元素自定义属性</h5><h4 id="3-data方法"><a href="#3-data方法" class="headerlink" title="3.data方法"></a>3.data方法</h4><h5 id="在指定的元素上存储数据，存储在内存中，不会修改DOM元素结构；页面刷新时存放的数据会移除。"><a href="#在指定的元素上存储数据，存储在内存中，不会修改DOM元素结构；页面刷新时存放的数据会移除。" class="headerlink" title="在指定的元素上存储数据，存储在内存中，不会修改DOM元素结构；页面刷新时存放的数据会移除。"></a>在指定的元素上存储数据，存储在内存中，不会修改DOM元素结构；页面刷新时存放的数据会移除。</h5><pre class="line-numbers language-none"><code class="language-none">$().attr("")    1.数据获取和设置  实列：&lt;div&gt;This is div&lt;/div&gt;        &lt;script&gt;            $("div").data("uname","andy");  /* 设置数据 */            console.log($("div").data("uname"));    /* 获取数据,设置结果 */        &lt;/script&gt;  实列：&lt;div index="1" data-index="2"&gt;This is div&lt;/div&gt;        &lt;script&gt;            console.log($("div").data("index"));  //获取自定义的数值：2        &lt;/script&gt;    2.全选功能        prop()接受checked作为第一个参数，第二个参数通过 $(this).prop('checked')获取"全选"按钮的选中状态        $(".checkall").change(function(){                $(".j-checkbox, .checkall").prop("checked",$(this).prop("checked"));            });    3.checked: 选择器查找被选中的表单元素，判断选中数量是否达到所有商品的复选框个数        $(".j-checkbox").change(function(){                if($(".j-checkbox:checked").length === $("j-checkbox").length){                    $(".checkall").prop("checked",true);                }else{                    $(".checkall").prop("checked",false);                }            });    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-jQuery内容操作"><a href="#5-jQuery内容操作" class="headerlink" title="5.jQuery内容操作"></a>5.jQuery内容操作</h3><h4 id="1-内容操作方法"><a href="#1-内容操作方法" class="headerlink" title="1.内容操作方法"></a>1.内容操作方法</h4><pre><code>html()    //获取第一个匹配元素的htmlhtml(content)    //设置第一个匹配元素的htmltext()    //获取所有匹配元素包含的文本内容组合起来的文本text(content)    //设置所有匹配元素的文本内容val()    //获取表单元素的value值val(value)    //设置表单元素的value值</code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;div&gt;    &lt;span&gt;内容&lt;/span&gt;&lt;/div&gt;&lt;input type="text" value="请输入内容" name="" id=""&gt;&lt;script&gt;    //1.获取设置元素内容 html()    console.log($("div").html());    $("div").html("&lt;span&gt;Hello&lt;/span&gt;");    //2.text()    console.log($("div").text()); //Hello    $("div").text("&lt;a&gt;12345&lt;/a&gt;");    //3.val()    console.log($("input").val());    $("input").val("123")&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-jQuery元素操作"><a href="#6-jQuery元素操作" class="headerlink" title="6.jQuery元素操作"></a>6.jQuery元素操作</h3><h4 id="1-遍历元素"><a href="#1-遍历元素" class="headerlink" title="1.遍历元素"></a>1.遍历元素</h4><pre class="line-numbers language-none"><code class="language-none">$().each(function(index,domEle) { });    1.遍历元素    &lt;div&gt;1&lt;/div&gt; &lt;div&gt;2&lt;/div&gt; &lt;div&gt;3&lt;/div&gt;        &lt;script&gt;            var arr = ["red","green","blue"];            $("div").each(function(index,domEle){                console.log(index);        //                 console.log(domEle);    //整个 html 样式                if($("div").text()[index]==='2'){                    $(domEle).css("color",arr[index]);                }            });        &lt;/script&gt;$.each(Object,function(index,element){});    1.数组和对象的遍历            // 便利数组            var arr = ["red","green","blue"];            $.each(arr,function(index,element){                console.log(index);            //index                console.log(element);        //数组值            });            //遍历对象            var obj = {name:"andy",age:18};            $.each(obj,function(index,element){                console.log(index);            //key                console.log(element);        //value            })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-删除元素"><a href="#2-删除元素" class="headerlink" title="2.删除元素"></a>2.删除元素</h4><pre class="line-numbers language-none"><code class="language-none">$(function(){    var li = $("&lt;li&gt;我是后来创建的&lt;/li&gt;")})//添加元素    //内部元素    var li = $("&lt;li&gt;后来创建&lt;/li&gt;");    $("ul").append(li);            //内部添加并且放到内部的最后面    $("ul").prepend(li);        //内部添加并放到内部的最前面    //外部添加    var div = $("&lt;div&gt;创建一个 div &lt;/div&gt;");    $(".test").after(div);        //div放入到目标元素的后面    $(".test").before(div);        //div放入到目标元素的前面//删除元素    empty()                //清空元素内容，删除元素本身    remove([expr])        //完全删除 ,[expr]用于筛选元素    $("ul").remove();        //删除匹配的元素    $("ul").empty();        //删除匹配元素的子节点    PS: 利用html()元素可以修改元素的内容,如果参数传入空字符,也可以删除子节点元素效果    $("ul").html("")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-jQuery尺寸的位置操作"><a href="#7-jQuery尺寸的位置操作" class="headerlink" title="7.jQuery尺寸的位置操作"></a>7.jQuery尺寸的位置操作</h3><h4 id="1-尺寸方法"><a href="#1-尺寸方法" class="headerlink" title="1.尺寸方法"></a>1.尺寸方法</h4><pre><code>        width()                         height()                        outerHeight(true)            padding,margin,border        outerWidth(true)            padding,margin,border        innerWidth()            padding        innerHeight()            padding        outerWidth()            padding border        outerHeight()            padding border</code></pre><h4 id="2-位置方法"><a href="#2-位置方法" class="headerlink" title="2.位置方法"></a>2.位置方法</h4><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;    *{padding: 0;margin: 0;}    .father{width: 80px;width: 80px;background-color: pink;            margin: 10px;overflow: hidden;position: relative;}    .son{width: 25px;height: 25px;background-color: palevioletred;            position: absolute;left: 10px;top: 10px;}&lt;/style&gt;&lt;div class="father"&gt;    &lt;div class="son"&gt;&lt;/div&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>offset()方法<br> 获取元素位置，返回的是对象，包含left，top表示相对于文档的偏移坐标，和父级元素没有关系。</p><pre class="line-numbers language-none"><code class="language-none">//获取元素距离文档顶部距离$().offset().top;//获取元素距离文档左侧距离$().offset().left;//设置元素偏移$().offset({top:200,left:200})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>position()方法<br> 获取元素距离父级元素的位置</p><pre class="line-numbers language-none"><code class="language-none">console.log($(".son").position().top);console.log($(".son").position().left);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>scrollTop() 和 scrollLeft()  方法</p></li></ol><p>获取或设置元素被卷去的头部距离；<br>    获取或设置元素被卷曲的左侧距离</p><pre class="line-numbers language-none"><code class="language-none">//获取元素距离页面右侧的距离    $(".container").scrollLeft();//设置元素距离页面顶部的距离    $(document).scrollTop(100);//返回顶部动画功能    $("body,html").animate({scrollTop:0})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>案例</li></ol><pre class="line-numbers language-none"><code class="language-none">            *{padding: 0;margin: 0;}            .back{                position: fixed;width: 50px;height: 50px;background-color: pink;                right: 30px;bottom: 100px;display: none;            }            .container{                width: 900px;height: 500px;background-color: skyblue;                margin: 400px auto;            }&lt;div class="back"&gt; &lt;/div&gt;&lt;div class="container"&gt;&lt;/div&gt; &lt;script&gt;     //利用scroll()方法控制“返回顶部”按钮的显示，隐藏     var boxTop = $(".container").offset().top;     $(window).scroll(function(){         if($(document).scrollTop()&gt;=boxTop){             $(".back").fadeIn();         }else{             $(".back").fadeOut();         }     }); //“返回顶部”按钮绑定单击事件     $(".back").click(function(){         $("body,html").stop().animate({             scrollTop:0         });     }); &lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-jQuery事件"><a href="#8-jQuery事件" class="headerlink" title="8.jQuery事件"></a>8.jQuery事件</h3><h4 id="1-事件绑定"><a href="#1-事件绑定" class="headerlink" title="1.事件绑定"></a>1.事件绑定</h4><h5 id="1-通过事件方法绑定事件"><a href="#1-通过事件方法绑定事件" class="headerlink" title="1.通过事件方法绑定事件"></a>1.通过事件方法绑定事件</h5><p> 相对于DOM事件相比省略 “on”。<br>     并且，jQuery的事件方法允许为一个事件绑定多个事件处理函数，只需要多次调用事件方法，传入不同的函数</p><h6 id="1-表单事件"><a href="#1-表单事件" class="headerlink" title="1.表单事件"></a>1.表单事件</h6><p> blur([data],[function])        当前失去焦点时触发</p><p> focus()                        当元素获得焦点时触发</p><p> change()                    当前元素值发生改变时触发</p><p> focusin()                    在父元素上检测子元素获取焦点的情况</p><p> focusout()                    在父元素上检测子元素失去焦点的情况</p><p> select()                    当文本框中的文本被选中时触发</p><p> submit()                    当表单提交时触发</p><h6 id="2-键盘事件"><a href="#2-键盘事件" class="headerlink" title="2.键盘事件"></a>2.键盘事件</h6><p> keydown()                    键盘按键按下时触发</p><p> keypress()                    键盘按键按下时触发（有的非基础键位没有）</p><p> keyup()                        键盘按键弹起时触发</p><h6 id="3-鼠标事件"><a href="#3-鼠标事件" class="headerlink" title="3.鼠标事件"></a>3.鼠标事件</h6><p> mouseover()                    当鼠标指针移入对象时触发</p><p> mouseout()                    当鼠标指针从元素上离开时触发</p><p> click()                        当单机元素时触发</p><p> dblclick()                    当双击元素时触发</p><p> mousedown()                    当鼠标指针移到元素上方，并按下鼠标按键时触发</p><p> mouseup()                    当在元素上放开鼠标按钮时，会触发</p><h6 id="4-浏览事件"><a href="#4-浏览事件" class="headerlink" title="4.浏览事件"></a>4.浏览事件</h6><p> scroll()                    当滚动条发生变化时触发</p><p> resize()                    当调整浏览器窗口大小时会被触发</p><h6 id="5-案例"><a href="#5-案例" class="headerlink" title="5.案例"></a>5.案例</h6><pre class="line-numbers language-none"><code class="language-none">&lt;div&gt;事件绑定&lt;/div&gt;     &lt;script&gt;             $("div").click(function(){             $(this).css("background","hotpink");         });         $("div").mouseenter(function(){             $(this).css("background-color","skyblue");         });     &lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-通过on-方法绑定事件"><a href="#2-通过on-方法绑定事件" class="headerlink" title="2.通过on()方法绑定事件"></a>2.通过on()方法绑定事件</h5><p>On()方法在匹配元素上绑定多个事件处理函数：<br> element.on(events,[selector],fn)</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="current"&gt;事件绑定&lt;/div&gt;&lt;script&gt;        //一次绑定一个事件    $("div").on(        "click",function(){        $(this).css("background","red")}    );    //一次绑定多个事件    $("div").on({        mouseenter:function(){            $(this).css("background","deepskyblue");        },        click:function(){            $(this).css("background","yellow");        },        mouseleave:function(){            $(this).css("background","orange");        }    })    //为不同事件绑定相同事件处理函数    $("div").on("mouseenter mouseleave",function(){        $(this).toggleClass("current");    })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-事件委派"><a href="#2-事件委派" class="headerlink" title="2.事件委派"></a>2.事件委派</h4><pre><code>    原本要给子元素绑定的事件绑定到父元素上。        由于事件有冒泡机制，当一个元素出发时间时，可以分区发生事件是父元素还是子元素。</code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;ul&gt;    &lt;li&gt;1&lt;/li&gt;    &lt;li&gt;2&lt;/li&gt;&lt;/ul&gt;&lt;script&gt;    $("ul").on("click","li:first-child",function(){    alert("单击li")});&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="新创建的li也可以继承任务触发事件"><a href="#新创建的li也可以继承任务触发事件" class="headerlink" title="新创建的li也可以继承任务触发事件"></a>新创建的li也可以继承任务触发事件</h5><pre class="line-numbers language-none"><code class="language-none">&lt;ul&gt;    &lt;li&gt;1&lt;/li&gt;    &lt;li&gt;2&lt;/li&gt;&lt;/ul&gt;&lt;script&gt;    $("ul").on("click","li",function(){    alert("单击li")});var li = $("&lt;li&gt;create a li &lt;/li&gt;")$("ul").append(li);&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="bind-live-delegate-也可以实现事件绑定和委派，但建议用新版本的-on-来代替"><a href="#bind-live-delegate-也可以实现事件绑定和委派，但建议用新版本的-on-来代替" class="headerlink" title="bind(),live(),delegate()也可以实现事件绑定和委派，但建议用新版本的 on()来代替"></a>bind(),live(),delegate()也可以实现事件绑定和委派，但建议用新版本的 on()来代替</h5><h4 id="5-事件解绑"><a href="#5-事件解绑" class="headerlink" title="5.事件解绑"></a>5.事件解绑</h4><pre class="line-numbers language-none"><code class="language-none">&lt;ul&gt;        &lt;li&gt;1&lt;/li&gt;        &lt;li&gt;2&lt;/li&gt;    &lt;/ul&gt;    &lt;script&gt;        var sum=0;        $("ul").on({            click:function(){                console.log(sum++);},            mouseover:function(){                console.log("鼠标经过我");}        });        //事件解绑        $("div").off();    &lt;/script&gt;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="one-方法"><a href="#one-方法" class="headerlink" title="one()方法"></a>one()方法</h5><p>  元素只触发一次</p><pre class="line-numbers language-none"><code class="language-none">$("p").one("click",function(){        alert("被单击了");    });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="6-触发事件"><a href="#6-触发事件" class="headerlink" title="6.触发事件"></a>6.触发事件</h4><h5 id="1-调用事件方法"><a href="#1-调用事件方法" class="headerlink" title="1.调用事件方法"></a>1.调用事件方法</h5><pre class="line-numbers language-none"><code class="language-none">//绑定事件$("div").click(function(){    alert("hello");});//触发$("div").click();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-通过-trigger-方法触发事件"><a href="#2-通过-trigger-方法触发事件" class="headerlink" title="2.通过 trigger()方法触发事件"></a>2.通过 trigger()方法触发事件</h5><pre class="line-numbers language-none"><code class="language-none">//绑定事件$("div").click(function(){    alert("hello");});//触发$("div").trigger("click");       //调用 trigger()方法，参数click单击事件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-通过-triggerHandler-方法触发事件-不会执行元素的默认行为"><a href="#3-通过-triggerHandler-方法触发事件-不会执行元素的默认行为" class="headerlink" title="3.通过 triggerHandler()方法触发事件 (不会执行元素的默认行为)"></a>3.通过 triggerHandler()方法触发事件 (不会执行元素的默认行为)</h5><pre class="line-numbers language-none"><code class="language-none">&lt;input type="text"&gt;&lt;script&gt;    $("input").on("focus",function(){        $(this).val("你好吗？");    });    $("input").triggerHandler("focus");      //触发事件   文本框不会聚焦选中    $("input").focus();        // 文本框聚焦选中&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-事件对象"><a href="#7-事件对象" class="headerlink" title="7.事件对象"></a>7.事件对象</h4><pre><code>阻止事件冒泡和默认行为</code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;a href="173/173.html"&gt;链接&lt;/a&gt;&lt;script&gt;        $(document).on("click",function(){        console.log("单击document");    });    $("a").on("click",function(event){        event.preventDefault();        //阻止事件默认行为      不会跳转页面        event.stopPropagation();      //阻止事件冒泡        只输出 “ 单击了a”        console.log("单击了a");    });&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-对象成员扩展"><a href="#8-对象成员扩展" class="headerlink" title="8.对象成员扩展"></a>8.对象成员扩展</h4><pre><code>    $.extend([deep],target,Object1....)        // deep  拷贝深度  false/true         // target 要拷贝的对象        // 带拷贝的对象</code></pre><h5 id="1-浅拷贝"><a href="#1-浅拷贝" class="headerlink" title="1.浅拷贝"></a>1.浅拷贝</h5><pre><code>    当一个对象包含复杂成分数据类型的成员时，引用地址会拷贝给目标对象。 类似于赋值 "="</code></pre><pre class="line-numbers language-none"><code class="language-none">$.extend(targetObj,obj);        console.log(targetObj);    //{id:1,msg:{age:18},name:"andy"}        targetObj.msg.age = 20;        console.log(obj.msg.age);  // 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-深拷贝"><a href="#2-深拷贝" class="headerlink" title="2.深拷贝"></a>2.深拷贝</h5><pre class="line-numbers language-none"><code class="language-none">$.extend(true,targetObj,obj);        console.log(targetObj);    //{id:1,msg:{age:18},name:"andy"}        targetObj.msg.age = 20;            // targetObj.msg 和  obj.msg 对象不同        console.log(obj.msg.age);  // 18<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-获取服务器响应结果-ajax"><a href="#9-获取服务器响应结果-ajax" class="headerlink" title="9.获取服务器响应结果 ($.ajax())"></a>9.获取服务器响应结果 ($.ajax())</h4><pre class="line-numbers language-none"><code class="language-none">&lt;script src="jquery-3.6.0.js"&gt;&lt;/script&gt;    &lt;script&gt;        $.ajax({            type: 'GET',                        url: 'server.html',            //请求地址            data: {id:2,name:'hello'},                success: function(msg){        //成功后执行的函数                console.log(msg);            }        });    &lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Ajax-使用"><a href="#Ajax-使用" class="headerlink" title="Ajax 使用"></a>Ajax 使用</h5><h6 id="1-高级应用"><a href="#1-高级应用" class="headerlink" title="1.高级应用"></a>1.高级应用</h6><pre><code>$.get(URL[,data][,fn][,type])        $.post(URL[,data][,fn][,type])$.getJSON(URL[,data][,fn])                //通过 http get 载入 JSON 信息$.getScript(URL[,fn])                    // 载入并执行一个 javaScript文件对象.load(URL[,data][,fn])                //载入远程HTML文件代码并插入至DOM中</code></pre><h6 id="2-底层应用"><a href="#2-底层应用" class="headerlink" title="2.底层应用"></a>2.底层应用</h6><pre><code>$.ajax(URL[,Options])                    //通过HTTP 请求加载远程数据$.ajaxSetup(Options)                    //设置全局Ajax默认选项</code></pre><h3 id="9-正则表达式-x2F-a-zA-Z0-9-n-m-x2F"><a href="#9-正则表达式-x2F-a-zA-Z0-9-n-m-x2F" class="headerlink" title="9.正则表达式  (/^[a-zA-Z0-9_-]{n,m}$/)"></a>9.正则表达式  (/^[a-zA-Z0-9_-]{n,m}$/)</h3><h4 id="1-使用"><a href="#1-使用" class="headerlink" title="1.使用"></a>1.使用</h4><pre class="line-numbers language-none"><code class="language-none">var str = '123';var reg2 = /abc/;                //字面量方式var reg1 = new RegExp(/123/);    //RegExp构造函数方式console.log(reg1.test(str));       //匹配结果  trueconsole.log(reg2.test(str));    //匹配结果  false//通用正则表达式var reg = /^[a-zA-Z0-9_-]{n,m}$/;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-模式修饰符"><a href="#2-模式修饰符" class="headerlink" title="2.模式修饰符"></a>2.模式修饰符</h4><h5 id="语法格式：-x2F-表达式-x2F-switch"><a href="#语法格式：-x2F-表达式-x2F-switch" class="headerlink" title="语法格式： /表达式/[switch]"></a>语法格式： /表达式/[switch]</h5><p>模式符            说明<br>    g                用于在目标字符串中实现全局匹配<br>    i                忽略大小写<br>    m                实现多行匹配<br>    u                以Unicode编码执行正则表达式<br>    y                黏性匹配，仅匹配目标字符中此正则表达式的lastIndex属性指示的索引</p><h4 id="3-特殊字符"><a href="#3-特殊字符" class="headerlink" title="3.特殊字符"></a>3.特殊字符</h4><pre><code>    一个正则表达式有简单和特殊字符组合。如 /ab*c/  ,特殊字符被称为元字符，是具有特殊意义的专用符号。        有 ^ , . , $ , * 等。</code></pre><h5 id="1-边界符"><a href="#1-边界符" class="headerlink" title="(1)边界符"></a>(1)边界符</h5><pre><code>原来提示字符所处的位置</code></pre><pre class="line-numbers language-none"><code class="language-none">边界符    ^        匹配行首文本    $        匹配行尾文本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-预定义类"><a href="#2-预定义类" class="headerlink" title="(2)预定义类  . \"></a>(2)预定义类  . \</h5><h6 id="1-常见模式的简写方式"><a href="#1-常见模式的简写方式" class="headerlink" title="1.常见模式的简写方式"></a>1.常见模式的简写方式</h6><pre class="line-numbers language-none"><code class="language-none">预定义字符            含义                                    其他写法        .            匹配除 \n 之外的任何单位字符                        \d            匹配 0-9 任意一个数字                        [0-9]        \D            匹配 0-9 之外的字符                            [^0-9]        \w            匹配 任意的字母，数字和下划线                 [a-zA-Z0-9_]        \W            匹配 特殊字符                                [^a-zA-Z0-9_]        \s            匹配 空格(换行，制表，空格)                     [\t\r\n\v\f]        \S            匹配 非空格                                    [^\t\r\n\v\f]        \f            匹配 换页符(form-feed)                    \b            匹配 单词分界符    (例："\bg", "best grade",输出"g")             \B            匹配非单词分界符 (例： "\Bade", 输出"ade")        \t            匹配 水平制表符(tab)        \n            匹配 换行符(linefeed)        \xhh        匹配 ISO-8859-1值为 hh (2个16进制数字)的字符 (例： "\x61"  表示 "a")        \r            匹配 回车符         \v            匹配 垂直制表符(vertical tab)        \uhhhh        匹配 Unicode 值为 hhhh (4个16进制数字)的字符 (例： "\u597d"  表示 "好")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-转译特殊字符"><a href="#2-转译特殊字符" class="headerlink" title="2.转译特殊字符"></a>2.转译特殊字符</h6><p>正则表达式中使用 “" 转译特殊字符。<br>    选择符 “|” 为 “或” ， 多条件查询。<br>        str 的 “"  需要 “\“ 去匹配。 </p><pre class="line-numbers language-none"><code class="language-none">var str = '^abc\\1.23*edf$';var reg = /\.|\$|\*|\^|\\/gi;str.match(reg);                        // 输出结果： (5)[ "^", "\" , "." , "*" , "$" ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-字符类"><a href="#3-字符类" class="headerlink" title="(3)字符类 []"></a>(3)字符类 []</h5><p>当有字符匹配 字符类中的字符，则匹配成功。</p><pre class="line-numbers language-none"><code class="language-none">pattern(模式)        含义    [ab]                    匹配字符类中的任意一个字符    [^ab]    [A-Z]    [^a-z]    [a-zA-Z0-9]    [\4e00-\u9fa5]            匹配任意一个中文字符    例：        var reg = /[abc]/;        console.log(reg.test('red'));         // false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-取反符"><a href="#4-取反符" class="headerlink" title="(4)取反符  ^[]"></a>(4)取反符  ^[]</h5><p>字符类和元字符一起使用，被称为 取反符</p><pre class="line-numbers language-none"><code class="language-none">var reg = /^[^a-z]$/;console.log(rg.test('a'));        //  falseconsole.log(rg.test('A'));        //  true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-量词符与括号字符"><a href="#4-量词符与括号字符" class="headerlink" title="4.量词符与括号字符"></a>4.量词符与括号字符</h4><h5 id="1-量词符-、-、-、"><a href="#1-量词符-、-、-、" class="headerlink" title="1.量词符        ? 、+ 、* 、{}"></a>1.量词符        ? 、+ 、* 、{}</h5><pre><code>设置某个模式出现的次数，通过量词（ ? 、+ 、* 、{} ）</code></pre><p>字符                说明                                示列                结果<br>    ?                    匹配 ? 前面的字符零次或一次            hi?t                可以匹配 ht 和 hit<br>    +                    匹配 + 前面的字符一次或多次            bre+ad                匹配范围 bread 到 bre…ad<br>    *                    匹配 * 前的字符零次或多次            ro*se                可以匹配 res 到 ro…se<br>    {n}                    匹配 {}    前面的字符n次                hit{2}er            匹配 hitter<br>    {n,}                匹配 {} 前面的字符最少n次            hit{2}er<br>    {n,m}                匹配 {} 前面的字符最少n次，最多m次     fe{0,2}l</p><h5 id="2-括号字符"><a href="#2-括号字符" class="headerlink" title="2.括号字符    ()"></a>2.括号字符    ()</h5><h6 id="1-改变限定符的作用范围"><a href="#1-改变限定符的作用范围" class="headerlink" title="1.改变限定符的作用范围"></a>1.改变限定符的作用范围</h6><pre class="line-numbers language-none"><code class="language-none">//作用范围    catch | er            catch er//作用范围    cat ( ch | er )        catch cater<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-分组"><a href="#2-分组" class="headerlink" title="2.分组"></a>2.分组</h6><p>当小括号后面有量词符，表示对整个组进行操作</p><pre class="line-numbers language-none"><code class="language-none">//作用范围    abc(2)                abcc//作用范围    a(bc){2}            abcbc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3-捕获和非捕获"><a href="#3-捕获和非捕获" class="headerlink" title="3.捕获和非捕获"></a>3.捕获和非捕获</h6><ol><li><p>match()捕获</p><pre class="line-numbers language-none"><code class="language-none">var reg = '1234'.match(/(\d)(\d)(\d)(\d)/);console.log(reg);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>replace()捕获  (String对象 利用$n 方式捕获)</p><pre class="line-numbers language-none"><code class="language-none">颠倒字符串顺序var str = 'Regular' Capture';var reg = /(\w+)\s(\w+)/gi;var newstr = str.replace(reg,'$2 $1');console.log(newstr);        //顺序调换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>(?:x)非捕获    (不存入系统缓存)<br>例：</p><pre class="line-numbers language-none"><code class="language-none">//非捕获var reg = /(?:J)(?:S)/;var res = 'JS'.replace(reg,'$2 $1');    //res      输出为        '$2 $1'   //捕获var reg = /(J)(S)/;var res = 'JS'.replaxe(reg,'$2 $1');    //res     输出为        'S J'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h6 id="4-贪婪与懒惰匹配"><a href="#4-贪婪与懒惰匹配" class="headerlink" title="4.贪婪与懒惰匹配"></a>4.贪婪与懒惰匹配</h6><p>   解释：当点字符(.)和量词符连用时，可匹配指定数量范围的任意字符。</p><pre class="line-numbers language-none"><code class="language-none">var str = 'webWEBWebwEB';var reg1 = /w.*b/gi;            //贪婪console.log(reg1.exec(str));    // 结果 webWEBWebwEBvar reg2 = /w.*?b/gi;            //懒惰console.log(reg2.exec(str));    // 结果 web<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="5-反向应用"><a href="#5-反向应用" class="headerlink" title="5.反向应用"></a>5.反向应用</h6><p>解释：在正则表达式中获取存放在缓存区内子表达式的捕获内容。<br>用法：用 “\n” 的方式引用。( “\1” 表示第1个子表达式的捕获内容)</p><pre class="line-numbers language-none"><code class="language-none">var str = '13335 12345 56668';var reg = /(\d)\1\1/gi;            // \d 匹配 一个0-9的数字，添加"()"可以反向引用获取捕获的内容。 var match = str.match(reg);console.log(match);              //结果  (2)["333","666"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="6-零宽断言"><a href="#6-零宽断言" class="headerlink" title="6.零宽断言"></a>6.零宽断言</h6><p>解释：零宽度的子表达式匹配。<br>用途：查找子表达式匹配的内容之前或之后是否有特定的字符集。<br>用法：正向预查和反向预查。<br>        正向预查：匹配含有或不含有捕获内容之前的数据，匹配的结果中不含捕获内容。<br>        反向预查：略(暂时)<br>字符            说明                                    实例<br>    x(?=y)            仅当 x 后面紧跟着 y 时，才匹配 x        Countr(?=y|ies)  匹配 Country Countries Countr<br>    x(?!y)            仅当 x 后面不紧跟着 y 时，才匹配 x        Countr(?!y|ies)  仅匹配 Countr</p><h4 id="5-正则表达式优先级"><a href="#5-正则表达式优先级" class="headerlink" title="5.正则表达式优先级"></a>5.正则表达式优先级</h4><p>符号                        说明<br>    \                            转义符<br>    (),(?:),(?=),[]                圆括号和中括号<br>    *,+,?,{n},{n,},{n,m}        限定符<br>    ^,$,\ (元字符和字符)         定位符<br>    |                            “或” 操作</p><h4 id="6-String类中的方法"><a href="#6-String类中的方法" class="headerlink" title="6.String类中的方法"></a>6.String类中的方法</h4><ol><li>match()方法<br>用途：<ol><li>在字符串内检索指定的值</li><li>在目标字符串中根据正则匹配出所有符合要求的内容，匹配成功或将其保存到数组中，匹配失败返回null。<pre class="line-numbers language-none"><code class="language-none">var str = "It`s is the shorthand of it is";var reg1 = /it/gi;str.match(reg1);        //匹配结果： (2)["It","it"]var reg2 = /^it/gi;str.match(reg2);        //匹配结果： ["It"]var reg3 = /s/gi;str.match(reg3);        //匹配结果： (4)["s","s","s","s"]var reg4 = /s$/gi;str.match(reg4);        //匹配结果： ["s"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li>search()方法<br>用途：返回指定模式的子串在字符串首出现的位置。<pre class="line-numbers language-none"><code class="language-none">var  str = '123*abc.456';console.log(str.search('.*));        //输出：0console.log(str.search(/[\.\*]/));  //输出：3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p>非正则表达<br>new EwgExp(参数)   返回任意字符在字符串str首次出现的位置</p><ol start="3"><li>split()方法<br>用途：根据指定的分隔符将一个字符串分割成字符串数组，不包括分割符。当分隔符不止一个时，定义正则对象完成字符串的分割操作</li><li>按照规则分割<pre class="line-numbers language-none"><code class="language-none">"@"和"."两种分隔符进行分割操作var str = 'test@123.com";var reg = /[@\.]/;var split_res = str.split(reg);console.log(split_res);                // 输出结果：(3)["test","123","com"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>指定分割次数 <pre class="line-numbers language-none"><code class="language-none">var str = 'We  are a family';var reg =/\s/;var split_res = str.split(reg,2);console.log(split_res);                //输出结果：(2)["We","are"]    当指定的次数小于实际字符串的次数时，最后返回结果会忽略其他的分割结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>rplace()方法<br>用途：替换字符串<pre class="line-numbers language-none"><code class="language-none">var str = 'Regular Capture';var reg = /(\w+)\s(\w+)/gi;var newstr = str.replace(reg,'$2 $1');console.log(newstr);        //    Capture Regular<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/JavaScript/"/>
    
    <category term="jQuery" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/JavaScript/jQuery/"/>
    
    <category term="基础" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/JavaScript/jQuery/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="基础" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="JavaScript" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/JavaScript/"/>
    
    <category term="jQuery" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>IOS配置</title>
    <link href="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/01/02/IOS%E9%85%8D%E7%BD%AE/"/>
    <id>https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/01/02/IOS%E9%85%8D%E7%BD%AE/</id>
    <published>2023-01-02T11:28:15.000Z</published>
    <updated>2023-02-06T15:17:14.389Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、路由器配置"><a href="#一、路由器配置" class="headerlink" title="一、路由器配置"></a>一、路由器配置</h2><h3 id="客户机配置"><a href="#客户机配置" class="headerlink" title="客户机配置"></a>客户机配置</h3><h4 id="R1配置"><a href="#R1配置" class="headerlink" title="R1配置"></a>R1配置</h4><pre class="line-numbers language-none"><code class="language-none">noenable conf ter hostname R1inter g0/0no shutdown ip add 192.168.10.1 255.255.255.0inter g0/1ip add 192.168.30.1 255.255.255.0no shutdown exitroute ripversion 2network 192.168.10.0network 192.168.30.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="R2配置"><a href="#R2配置" class="headerlink" title="R2配置"></a>R2配置</h4><pre class="line-numbers language-none"><code class="language-none">noenable conf ter hostname R2inter g0/0no shutdown ip add 192.168.20.1 255.255.255.0inter g0/1ip add 192.168.30.1 255.255.255.0no shutdown exitroute ripversion 2network 192.168.20.0network 192.168.30.0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、交换机初始化"><a href="#二、交换机初始化" class="headerlink" title="二、交换机初始化"></a>二、交换机初始化</h2><h3 id="配置虚拟终端登录（全局配置）"><a href="#配置虚拟终端登录（全局配置）" class="headerlink" title="配置虚拟终端登录（全局配置）"></a>配置虚拟终端登录（全局配置）</h3><pre class="line-numbers language-none"><code class="language-none">enable secret PASSWORDline vty 0 4password 123login enable secret PASSWORD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-MS1配置"><a href="#1-MS1配置" class="headerlink" title="1.MS1配置"></a>1.MS1配置</h3><pre class="line-numbers language-none"><code class="language-none">enable conf ter hostname MS1vlan 10name test10exitvlan 20name test20exitinterface vlan 10ip add IP_ADDRinterface vlan 20 ip add IP_ADDinter fa0/1switchport mode accessswitchport access vlan 10inter fa0/2switchport mode accessswitchport access vlan 20exitip routing <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-设置主机IP地址及网关地址（涉及到多个网络即多个不同的局域网）"><a href="#2-设置主机IP地址及网关地址（涉及到多个网络即多个不同的局域网）" class="headerlink" title="2.设置主机IP地址及网关地址（涉及到多个网络即多个不同的局域网）"></a>2.设置主机IP地址及网关地址（涉及到多个网络即多个不同的局域网）</h3><h3 id="3-路由器设备"><a href="#3-路由器设备" class="headerlink" title="3.路由器设备"></a>3.路由器设备</h3><h4 id="R1配置-1"><a href="#R1配置-1" class="headerlink" title="R1配置"></a>R1配置</h4><pre class="line-numbers language-none"><code class="language-none">enbaleconf ter hostname R1inter g0/0no shutdownip add 192.168.3.1 255.255.255.0inter g0/1no shutdownip add 192.168.1.1 255.255.255.0exitroute ripversion 2network 192.168.1.0network 192.168.3.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="R2配置-1"><a href="#R2配置-1" class="headerlink" title="R2配置"></a>R2配置</h4><pre class="line-numbers language-none"><code class="language-none">enbaleconf ter hostname R2inter g0/0no shutdownip add 192.168.3.2 255.255.255.0inter g0/1no shutdownip add 192.168.2.1 255.255.255.0exitroute ripversion 2network 192.168.2.0network 192.168.3.0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="IP地址计算"><a href="#IP地址计算" class="headerlink" title="IP地址计算"></a>IP地址计算</h2><h3 id="给定IP地址-192-55-12-120-子网掩码-255-255-255-240"><a href="#给定IP地址-192-55-12-120-子网掩码-255-255-255-240" class="headerlink" title="给定IP地址: 192.55.12.120      子网掩码:255.255.255.240"></a>给定IP地址: 192.55.12.120      子网掩码:255.255.255.240</h3><h3 id="第一题-求子网号"><a href="#第一题-求子网号" class="headerlink" title="第一题:求子网号"></a>第一题:求子网号</h3><h4 id="第一步-将IP地址-子网掩码的十进制地址转换为二进制"><a href="#第一步-将IP地址-子网掩码的十进制地址转换为二进制" class="headerlink" title="第一步,将IP地址,子网掩码的十进制地址转换为二进制"></a>第一步,将IP地址,子网掩码的十进制地址转换为二进制</h4><pre><code>    (PS: 网络地址 的 1 和 255 为特殊位被保留,所以有效计算的数为 254个)                                               最后8位分开,是因为C类网址(可以从子网掩码最后四位的 1111 0000 做理解)最后四位做主机号,以作区别.</code></pre><pre class="line-numbers language-none"><code class="language-none">192.55.12.120        11000000  00110111  00001100  0111 1000 255.255.255.240      11111111  11111111  11111111  1111 0000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="第二步-进行二进制个个位数的逐步-比较-A-x3D-B-1-0"><a href="#第二步-进行二进制个个位数的逐步-比较-A-x3D-B-1-0" class="headerlink" title="第二步,进行二进制个个位数的逐步 比较( A=B?1:0 )"></a>第二步,进行二进制个个位数的逐步 比较( A=B?1:0 )</h4><p>(PS:最后四位为主机号,不需要对比 因此为 0000)</p><pre class="line-numbers language-none"><code class="language-none">                     11000000  00110111  00001100  0111 0000                     192.55.12.112```                      ### 第二题:求主机号#### 由IP地址做十进制转换为二进制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>192.55.12.120        11000000  00110111  00001100  0111 1000</p><pre class="line-numbers language-none"><code class="language-none">将主机号分到的位数(子网掩码没有占用的段落 再转换为十进制 就是该主机在本地址的主机号)可得主机号:0.0.0.8### 第三题:直接广播地址直接广播地址(解释:有效的网络号 + 全为1 的主机号) 因此,由题目做给的IP地址,结合第一题信息                        (主机号)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>192.55.12.120  ==&gt;   11000000  00110111  00001100  0111 1000                                    </code></pre><pre class="line-numbers language-none"><code class="language-none">可得                                                      (主机号转变为) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>192.55.12.127   &lt;==   11000000  00110111  00001100  0111 1111</code></pre><pre class="line-numbers language-none"><code class="language-none">### 第四题:如果主机地址的头十位用于子网,那么184.231.138.239的子网屏蔽码是多少由题可知为B类网址(16+16)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>                转换</code></pre><p>184.231.138.239     ==&gt;    10111000  11100111  10001010  11 101111</p><pre class="line-numbers language-none"><code class="language-none">因为 主机的头十位用于子网 (解释:主机号的16中,前十位被子网占用)所以 子网掩码如下:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>                转换</code></pre><p>255.255.255.192     &lt;==    11111111  11111111  11111111  11 000000</p><pre class="line-numbers language-none"><code class="language-none">### 第五题:如果子网屏蔽码是  255.255.192.0,那么不需要经由路由器通信和主机129.23.144.16的是哪一类网络号相同的主机可以直接相连,不同的主机通过路由器相连.### 主机:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>129.23.144.16         10000001  00010111  10010000  00010000</p><pre class="line-numbers language-none"><code class="language-none">### 子网掩码:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>255.255.192.0         11111111  11111111  11000000  00000000</p><pre class="line-numbers language-none"><code class="language-none">从子网掩码可知,将主机号的前两位占用 所以在此将主机显示时,如下就可以明显的观察区别:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>129.23.144.16         10000001  00010111  10 010000  00010000</p><p>```</p><h3 id="可得信息"><a href="#可得信息" class="headerlink" title="可得信息:"></a>可得信息:</h3><p>当第三字节 前两位 被占用得主机号<br>以 10 ~ 11 (范围在128`192,不包括192)开头的数值范围,可以相互通信. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="网络运维" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/%E7%BD%91%E7%BB%9C%E8%BF%90%E7%BB%B4/"/>
    
    <category term="基础" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/%E7%BD%91%E7%BB%9C%E8%BF%90%E7%BB%B4/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="基础" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="网络运维" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/%E7%BD%91%E7%BB%9C%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb 基础</title>
    <link href="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/01/02/JavaWeb-%E5%9F%BA%E7%A1%80/"/>
    <id>https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/01/02/JavaWeb-%E5%9F%BA%E7%A1%80/</id>
    <published>2023-01-02T10:49:46.000Z</published>
    <updated>2023-03-13T05:34:38.733Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-JSP标签"><a href="#1-JSP标签" class="headerlink" title="1.JSP标签"></a>1.JSP标签</h1><h3 id="1-java-变量转-jsp"><a href="#1-java-变量转-jsp" class="headerlink" title="1.java 变量转 jsp"></a>1.java 变量转 jsp</h3><pre class="line-numbers language-none"><code class="language-none">&lt;/pre&gt;1.java 变量转 jsp&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre code_snippet_id="1800145" snippet_file_name="blog_20160801_2_2452946" name="code" class="html"&gt;&lt;% String value = request.getParameter("key");%&gt;  &lt;label&gt;&lt;%=value %&gt;&lt;/label&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-jsp-变量转-js"><a href="#2-jsp-变量转-js" class="headerlink" title="2.jsp 变量转 js"></a>2.jsp 变量转 js</h3><pre class="line-numbers language-none"><code class="language-none">&lt;input type="text" name="firstname"&gt;test&lt;/input&gt;  &lt;script&gt;  var test = document.getElementById("firstname");  &lt;/script&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-js-转-Java"><a href="#3-js-转-Java" class="headerlink" title="3.js 转 Java"></a>3.js 转 Java</h3><pre class="line-numbers language-none"><code class="language-none">//虚拟表单提交  var temp = document.createElement("form");  temp.action = URL;//提交的地址  temp.method = "post";//也可指定为get  temp.style.display = "none";  var opt = document.createElement("textarea");  opt.name = key;  opt.value = value;  temp.appendChild(opt);  document.body.appendChild(temp);  temp.submit();    //java 代码    String var = request.getParameter("key");//此时var的值就是value  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-jsp转Java"><a href="#4-jsp转Java" class="headerlink" title="4.jsp转Java"></a>4.jsp转Java</h3><pre class="line-numbers language-none"><code class="language-none">String var = request.getParameter("key");//jsp表单提交了，就可以从request中获取。也可以虚拟表单提交。  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-js转jsp"><a href="#5-js转jsp" class="headerlink" title="5.js转jsp"></a>5.js转jsp</h3><pre class="line-numbers language-none"><code class="language-none">var test = "test";  document.getElementById("demo").innerHTML=test;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-java-转-js"><a href="#6-java-转-js" class="headerlink" title="6.java 转 js"></a>6.java 转 js</h3><pre class="line-numbers language-none"><code class="language-none">&lt;% String temp = request.getParameter("key");%&gt;  &lt;label name="test" hidden="hidden"&gt;&lt;%=temp %&gt;&lt;/label&gt;  &lt;script&gt;  var temp = document.createElement("test");  &lt;/script&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-JSP内置对象"><a href="#2-JSP内置对象" class="headerlink" title="2.JSP内置对象"></a>2.JSP内置对象</h1><h3 id="JSP提供9个内置对象"><a href="#JSP提供9个内置对象" class="headerlink" title="JSP提供9个内置对象:"></a>JSP提供9个内置对象:</h3><pre><code> 对象名称         衍生类     功能简述</code></pre><p>(1)requestJavax.servelet.ServletRequest.HttpServletRequest 取得客户端与系统的信息</p><p>(2)responseJavax.servlet.Servlet Request.HTTP Servlet.Response响应客户端信息</p><p>(3)applicationJavax,servlet.ServletContext记录和处理上线者共享的数据</p><p>(4)sessionJavax.servlet.Http.Session记录和处理上线者的个别数据</p><p>(5)outJavax.servlet.jsp.writer控制数据输出的操作</p><p>(6)configJavax.servlet.servletConfig取得JSP编译后Servlet信息</p><p>(7)PageContextJavax.servlet.jsp.PageContext存储和处理系统运行时的各种信息</p><p>(8)pageJavax.lang.Object代表目前的这个JSP网页对象</p><p>(9)exceptionJavax.lang.Throwable异常处理机制</p><h3 id="内置对象生命周期"><a href="#内置对象生命周期" class="headerlink" title="内置对象生命周期"></a>内置对象生命周期</h3><p>  application &gt; session &gt; page &gt; request</p><h3 id="Request内置对象"><a href="#Request内置对象" class="headerlink" title="Request内置对象:"></a>Request内置对象:</h3><h4 id="一-Request内置对象的常用方法"><a href="#一-Request内置对象的常用方法" class="headerlink" title="一:Request内置对象的常用方法"></a>一:Request内置对象的常用方法</h4><pre><code>    方法                               说明     (1)  getAttribute( String name)       返回 name 所指的值     (2) setAttribute( String name , Object obj)  设定name所指定的属性为 obj     (3) removeAttribute( String name)       删除name所指定的属性     (4) getAttributeNames()       返回request对象所有的属性名称集合     (5) getParameter( String name)       从客户端获取name所指定的参数     (6) getParameter Names()       从客户端获取所有参数名称     (7) getParameterValues( String name)       从客户端获取所指定参数的所有值     (8) setCharacterEncoding( String encoding)设定请求正文中所使用的字符编码(只支持post提交的数据)</code></pre><h5 id="Request内置对象应用实例"><a href="#Request内置对象应用实例" class="headerlink" title="Request内置对象应用实例"></a>Request内置对象应用实例</h5><pre class="line-numbers language-none"><code class="language-none">       &lt;% Enumeration enu = request.getParameterNames(); //page标签导入 import="Java.util.*" while(enu.hasMoreElements()){ String parameterName = (String) enu.nextElement(); String parameterValue = request.getParameter(parameterName); out.print("参数名称:"+parameterName); out.print("\t参数内容:"+parameterValue);}   %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二-Response内置对象"><a href="#二-Response内置对象" class="headerlink" title="二:Response内置对象"></a>二:Response内置对象</h3><pre><code>方法说明    (1) setContentType( String type)       动态响应content Type属性    (2) setHeader( String name,String value)     设置HTTP应答报文的首部字段和值及自动更新    (3) setRedirect( String redirectURL)       将客户端重定向到指定URL     (4) setStatus( int n)       设定HTTP返回的状态值    (5) addCookie( Cookie cookie)       添加一个Cookie对象 </code></pre><h1 id="3-JSP语法"><a href="#3-JSP语法" class="headerlink" title="3.JSP语法"></a>3.JSP语法</h1><h3 id="一、JSP脚本标记"><a href="#一、JSP脚本标记" class="headerlink" title="一、JSP脚本标记"></a>一、JSP脚本标记</h3><h4 id="1-脚本段"><a href="#1-脚本段" class="headerlink" title="1.脚本段"></a>1.脚本段</h4><pre><code>    &lt;% Java程序段 %&gt;</code></pre><h4 id="2-JSP声明"><a href="#2-JSP声明" class="headerlink" title="2.JSP声明"></a>2.JSP声明</h4><pre><code>    &lt;%! 声明1;声明2; %&gt;    PS: 1.可以在 &lt;%@ page %&gt;直接使用已经声明的变量和方法        2.多个页面声明，写成单独的一个文件用             &lt;%@ include %&gt;/&lt;jsp:include&gt;</code></pre><h4 id="3-JSP表达式"><a href="#3-JSP表达式" class="headerlink" title="3.JSP表达式"></a>3.JSP表达式</h4><pre><code>    &lt;%= 变量/表达式 %&gt;</code></pre><h4 id="4-JSP注释"><a href="#4-JSP注释" class="headerlink" title="4.JSP注释"></a>4.JSP注释</h4><pre><code>    &lt;%--  --%&gt;</code></pre><h3 id="二、JSP指令标记"><a href="#二、JSP指令标记" class="headerlink" title="二、JSP指令标记"></a>二、JSP指令标记</h3><h4 id="1-page页面指令标记"><a href="#1-page页面指令标记" class="headerlink" title="1.page页面指令标记:"></a>1.page页面指令标记:</h4><pre><code>　　&lt;%@ page 属性1="value1" 属性2="value2“ %&gt;    属性（每次一个属性）:       (1)language: 脚本语言 Java        (2)import  在程序中导入的类和包        (3)session: true / false  设定HTTP Session        (4)autoFlash: true / false  设置缓冲区填满时 缓冲自动刷新        (5)isThreadSafe: true / false  设置JSP　页面支持多线程        (6)isErrorPage: false / true 　　指定当前页面作为另一页面的错误处理页码        (7)errorPage　　指定当前网页的错误处理页码的ＵＲＬ        (8)contentType: text/html;charset=gb2312                        页面响应的MIME类型；指定字符编码</code></pre><h4 id="２-include静态包含指令标记："><a href="#２-include静态包含指令标记：" class="headerlink" title="２.include静态包含指令标记："></a>２.include静态包含指令标记：</h4><pre><code>    &lt;%@　include file＝＂相对位置＂%&gt;    相同文件夹下   建议以 .jspf(jps fragment)(PS: 由于键值对,除import,pageEncoding,不可以引入其他相同属性)</code></pre><h4 id="3-taglib指令标记"><a href="#3-taglib指令标记" class="headerlink" title="3.taglib指令标记"></a>3.taglib指令标记</h4><pre><code>    &lt;%@taglib  url="标签库url"  prefix="自定义标签前缀" %&gt;    &lt;publi:loop&gt;        ...    &lt;/publi:loop&gt;</code></pre><h3 id="三、JSP动作标记"><a href="#三、JSP动作标记" class="headerlink" title="三、JSP动作标记"></a>三、JSP动作标记</h3><h4 id="1-jsp-include-传参详列-Page-25"><a href="#1-jsp-include-传参详列-Page-25" class="headerlink" title="1.jsp:include:(传参详列:Page 25)"></a>1.<a href="jsp:include">jsp:include</a>:(传参详列:Page 25)</h4><pre><code>    不带参数：&lt;jsp:include page="相对url" flush="true/false"/&gt;       带参数：&lt;jsp:include page="相对url" flush="true/false"/&gt;                          &lt;jsp:param name="属性名" value="属性值"/&gt;    // 传递多个参数给动态文件                         &lt;jsp:param...&gt;                   &lt;/jsp:include&gt;        </code></pre><h4 id="2-jsp-forward-服务器端跳转-浏览器地址栏不做变化"><a href="#2-jsp-forward-服务器端跳转-浏览器地址栏不做变化" class="headerlink" title="2.jsp:forward:(服务器端跳转,浏览器地址栏不做变化)"></a>2.<a href="jsp:forward">jsp:forward</a>:(服务器端跳转,浏览器地址栏不做变化)</h4><pre><code>     不带参数:  &lt;jsp:forward page="URL"&gt;        带参数:   &lt;jsp:forward page="URL"&gt;     &lt;jsp:param name="属性名" value="属性名"/&gt;      ...           &lt;/jsp:forward&gt;</code></pre><h4 id="3-jsp-param"><a href="#3-jsp-param" class="headerlink" title="3.jsp:param:"></a>3.<a href="jsp:param">jsp:param</a>:</h4><pre><code>      &lt;jsp:aram name="参数名"  value="参数值"/&lt;%=表达式%&gt;  /&gt;传递的参数通过request.getParameter("属性名")获取参数的值.单独使用&lt;jsp:param&gt;没有意义</code></pre><h4 id="4-jsp-plugin"><a href="#4-jsp-plugin" class="headerlink" title="4.jsp:plugin:"></a>4.<a href="jsp:plugin">jsp:plugin</a>:</h4><pre><code>&lt;jsp:plugin&gt;动作用于jsp网页加载Java Applet 或 JavaBean 程序组件,       与HTML的&lt;Applet&gt;和&lt;Object&gt;标签有类似的功能.常用属性表:       (1)  type:加载Java程序类型,可设置值Applet,Bean       (2)  code:加载Java程序编译后的类名称, showpic.class       (3)  codebase:  编译后Java程序类所在的目录,可设置绝对值路径或相对路径.  默认执行当前网页的目录默认值.       (4)  name:  用来加载Java Applet 和 JavaBean程序设置一个用以识别的名称.       (5)   align:  设置加载的程序在窗口的对齐方式,可设置由bottom,top,middle,left,right.       (6)  height:  加载程序在窗口中显示的高度       (7)  width:  加载程序在窗口中显示的宽度       (8)  hspace:  加载程序的显示器和网页其他内容的水平间距       (9)  vspace:  加载程序的显示区与网页其他内容的垂直距离       (10)  &lt;jsp:params&gt;:  将参数传递给加载程序,必须在&lt;jsp:params&gt;  &lt;/jsp/params&gt;中使用 &lt;jsp:param&gt; 来设置.</code></pre><h4 id="5-jsp-userBean-jsp-setProperty-和-jsp-getProperty动作标记"><a href="#5-jsp-userBean-jsp-setProperty-和-jsp-getProperty动作标记" class="headerlink" title="5.jsp:userBean jsp:setProperty 和 jsp:getProperty动作标记"></a>5.<a href="jsp:userBean">jsp:userBean</a> <a href="jsp:setProperty">jsp:setProperty</a> 和 <a href="jsp:getProperty">jsp:getProperty</a>动作标记</h4><pre><code>&lt;jsp:userBean&gt;动作标记用来加载JSP页面中使用的JavaBean    &lt;jsp:userBean id="Java Bean实列名称" scope"page / request / session / application"  class="package.class"&gt;    属性:            (1) id:  JavaBean实列名称            (2) scope:  指定该Bean变量的有效范围.            (3) class:  导入的Java包 例如:需求时间 导入 Java.util.Date       &lt;jsp:setProperty&gt;动作标记用于设置已经实列化的Bean对象属性</code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;jsp:setProperty name="JavaBean实列名称" {  property="*"  / property="属性名"  [param="参数"] / property="属性名'  value"{String&lt;%=表达式%&gt;" }/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>(PS:  &lt;jsp:setProerty&gt;中 name值 必须和 &lt;jsp:useBean&gt;中 id值相同, 且大小写敏感.&lt;jsp:getProerty&gt;动作标记可获得Bean的著性质,用于页面中显示.    &lt;jsp:getProerty name="JavaBean实列名称" property="属性名"/&gt;</code></pre><h1 id="数据库导入"><a href="#数据库导入" class="headerlink" title="数据库导入"></a>数据库导入</h1><h2 id="1-cn-com-Dao"><a href="#1-cn-com-Dao" class="headerlink" title="1.cn.com.Dao"></a>1.cn.com.Dao</h2><ol><li><p>cn.com.Dao.JDBCUtils</p><pre class="line-numbers language-none"><code class="language-none">package cn.com.Dao;import java.sql.*;public class JDBCUtils { //连接数据库，关闭数据库 接口 private static String url="jdbc:mysql://localhost:3306/student?serverTimezone=UTC"; private static String user="root"; private static String pwd="root"; // JDBC 驱动器 public static Connection getConnection() {  Connection conn = null;  try {   Class.forName("com.mysql.cj.jdbc.Driver");   conn=DriverManager.getConnection(url,user,pwd);  } catch (Exception e) {   // TODO Auto-generated catch block   e.printStackTrace();  }  return conn; } // 验证链接是否正常 public static void CloseAll(Connection conn,PreparedStatement prestmt,Statement stmt,ResultSet rs) {  if(rs!=null) {   try {    rs.close();    if(stmt!=null) {     stmt.close();    }    if(prestmt!=null) {     prestmt.close();    }    if(conn!=null) {     conn.close();    }   }    catch (SQLException e) {    e.printStackTrace();   }  } }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>cn.com.Dao.UserDAO</p><pre class="line-numbers language-none"><code class="language-none">package cn.com.Dao;import java.sql.*;import java.util.ArrayList;import java.util.List;import org.omg.CORBA.Request;import java.sql.Date;import java.text.SimpleDateFormat;import cn.com.JavaBean.User;public class UserDAO { /*  * 数据库查询  *   */ public List&lt;User&gt; findAllUsers(){  // 初始化数据  Connection conn=null;  Statement stmt=null;  List&lt;User&gt; users=null;  ResultSet rs=null;    try {  // 链接驱动器   conn =JDBCUtils.getConnection();  // 读取执行数据库操作命令   stmt=conn.createStatement();   String sql="select * from user2";   rs=stmt.executeQuery(sql);    // 创建对象储存数据   users=new ArrayList&lt;User&gt;();  // next() 一行行的执行数据   while(rs.next()) {        User u=new User();   // 用数据库的列名，准确性，可读性较高    u.setID(rs.getInt("ID"));    u.setName(rs.getString("Name"));    u.setPwd(rs.getString("Pwd"));    u.setEmail(rs.getString("Email"));    u.setSex(rs.getString("Sex"));    u.setBirthday(rs.getDate("Birthday"));   // 利用List数据的方法存入链数组    users.add(u);   }  } catch (SQLException e) {   e.printStackTrace();  }finally {   // 关闭数据库   JDBCUtils.CloseAll(conn, null, stmt, rs);  }  return users;   } /*  * 数据库删除  *   */ public boolean DeleteUserByID(int id) {  Connection conn=null;  PreparedStatement prestmt=null;  ResultSet rs=null;    try {   conn =JDBCUtils.getConnection();   String sql="delete from user2 where ID = ?";   prestmt=conn.prepareStatement(sql);   prestmt.setInt(1, id);   int row=prestmt.executeUpdate();   if(row&gt;0) {    return true;   }   return false;  } catch (SQLException e) {   e.printStackTrace();  }finally {   JDBCUtils.CloseAll(conn, prestmt, null, rs);  }  return false; } /*  * 数据库增加  *   */ public boolean InsertUserByID(User user) {  Connection conn=null;  PreparedStatement prestmt=null;  ResultSet rs=null;    try {   conn =JDBCUtils.getConnection();   String sql="insert into 'user' (Name,password,Email,sex,date) values (?,?,?,?)" ;   prestmt=conn.prepareStatement(sql);   prestmt.setString(1, user.getName());   prestmt.setString(2, user.getPassword());   prestmt.setString(3, user.getEmail());   prestmt.setString(4, user.getDate());   int row=prestmt.executeUpdate();   if(row&gt;0) {    return true;   }   return false;  } catch (SQLException e) {   e.printStackTrace();  }finally {   JDBCUtils.CloseAll(conn, prestmt, null, rs);  }  return false; }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="2-cn-com-JavaBean"><a href="#2-cn-com-JavaBean" class="headerlink" title="2.cn.com.JavaBean"></a>2.cn.com.JavaBean</h2><ol><li>cn.com.JavaBean.User<pre class="line-numbers language-none"><code class="language-none">package cn.com.JavaBean;import java.util.Date;/* * 创建 对象 对映数据库的数据  * 作为接口用于读取和写入的操作 */public class User { private int ID; private String Name; private String Pwd; private String Email; private Date Birthday; private String Sex; public int getID() {  return ID; } public void setID(int iD) {  ID = iD; } public String getName() {  return Name; } public void setName(String name) {  Name = name; } public String getPwd() {  return Pwd; } public void setPwd(String pwd) {  Pwd = pwd; } public String getEmail() {  return Email; } public void setEmail(String email) {  Email = email; } public Date getBirthday() {  return Birthday; } public void setBirthday(Date birthday) {  Birthday = birthday; } public String getSex() {  return Sex; } public void setSex(String sex) {  Sex = sex; } public User() {  super(); } @Override public String toString() {  return "User [ID=" + ID + ", Name=" + Name + ", Pwd=" + Pwd + ", Email=" + Email + ", Birthday=" + Birthday    + ", Sex=" + Sex + "]"; } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="3-cn-com-Impl"><a href="#3-cn-com-Impl" class="headerlink" title="3.cn.com.Impl"></a>3.cn.com.Impl</h2><p>1. </p><pre class="line-numbers language-none"><code class="language-none">package cn.com.lmpl;import cn.com.JavaBean.*;import java.util.List;import cn.com.Dao.*;/* * 数据封装 调用方法函数 */public class UserImpi { public List&lt;User&gt; findAllUsers(){  UserDAO ud = new UserDAO();  return ud.findAllUsers(); } public boolean DeleteUserByID(int id) {  UserDAO ud=new UserDAO();  return ud.DeleteUserByID(id); } public boolean InsertUser(User user){  return ud.InsertUser(user); }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-cn-com-Servlet"><a href="#4-cn-com-Servlet" class="headerlink" title="4.cn.com.Servlet"></a>4.cn.com.Servlet</h2><ol><li><p>cn.com.Servlet.DeleteUserByServlet</p><pre class="line-numbers language-none"><code class="language-none">package cn.com.Servlet;import jakarta.servlet.RequestDispatcher;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.List;import cn.com.JavaBean.User;import cn.com.lmpl.UserImpi;/** * Servlet implementation class DeleteUserByServlet */public class DeleteUserByServlet extends HttpServlet { private static final long serialVersionUID = 1L;           /**     * @see HttpServlet#HttpServlet()     */    public DeleteUserByServlet() {        super();    } /**  * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)  */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {  response.setCharacterEncoding("utf-8");  response.setContentType("text/html; charset=utf-8");  // 调用实现方法的对象  UserImpi ui =new UserImpi();    // 将前端的请求数据 获取并传入方法  int id =Integer.parseInt(request.getParameter("id")) ;    // 获取方法返回的数据，判断结果  boolean f=ui.DeleteUserByID( id);  if(f) {   response.getWriter().write("删除成功");  }else  {   response.getWriter().write("删除失败");  }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>cn.com.Servlet.InsertUserByServlet</p><pre class="line-numbers language-none"><code class="language-none">package cn.com.Servlet;import jakarta.servlet.RequestDispatcher;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.List;import cn.com.JavaBean.User;import cn.com.lmpl.UserImpi;/** * Servlet implementation class DeleteUserByServlet */public class InsertUserByServlet extends HttpServlet { private static final long serialVersionUID = 1L;           /**     * @see HttpServlet#HttpServlet()     */    public DeleteUserByServlet() {        super();    } /**  * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)  */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {  response.setCharacterEncoding("utf-8");  response.setContentType("text/html; charset=utf-8");            String name = requset.getParameter("Name");            String password = requset.getParameter("password");            String Email = requset.getParameter("Email");            String sex =  requset.getParameter("sex");            // String  date = requset.getParameter("date");            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");   String birthday = request.getParameter("birthday");    Date date = null;            try{                dat = new Date(sdf.parse(birthday));            }catch(ParseException e){                e.printStackTrace();            }            UserImpi ui = new UserImpi();            User u  = new User();            u.setName(name);            boolean flag = ui.InsertUser(u);            if(flag){                response.getWriter.write("成功");            }else{                response.getWriter.write("失败");            }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>cn.com.Servlet.ShowAllUserByServlet</p><pre class="line-numbers language-none"><code class="language-none">package cn.com.Servlet;import jakarta.servlet.RequestDispatcher;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.List;import cn.com.JavaBean.User;import cn.com.lmpl.UserImpi;/**  * Servlet implementation class ShowAllUsersServlet */public class ShowAllUsersServlet extends HttpServlet { private static final long serialVersionUID = 1L;           /**     * @see HttpServlet#HttpServlet()     */    public ShowAllUsersServlet() {        super();    } /**  * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)  */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {  // 调用方法实现的对象  UserImpi ui =new UserImpi();  // 将从数据库获取的对象传入 List 数组  List&lt;User&gt; users=ui.findAllUsers();  // 创建服务器对象,缓存数据对象  request.setAttribute("users", users);  // 实现页面跳转  显示结果  RequestDispatcher rd = request.getRequestDispatcher("ShowUsers.jsp");  rd.forward(request, response);   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="5-InsertUser"><a href="#5-InsertUser" class="headerlink" title="5. InsertUser"></a>5. InsertUser</h2><pre class="line-numbers language-none"><code class="language-none">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"    pageEncoding="UTF-8"%&gt;   &lt;%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %&gt;   &lt;%@page import="cn.com.JavaBean.*,java.util.*" %&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;title&gt;数据库插入页面&lt;/title&gt;&lt;style type="text/css"&gt;table { border-collapse:collapse;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;     &lt;table&gt;        &lt;tr&gt;            &lt;td&gt;用户名&lt;/td&gt;            &lt;td&gt;&lt;input type="text" name="Name"&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;密码&lt;/td&gt;            &lt;td&gt;&lt;input type="text" name="password"&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;邮箱&lt;/td&gt;            &lt;td&gt;&lt;input type="text" name="Email"&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;性别&lt;/td&gt;            &lt;td&gt;                &lt;input type="radio" value="1" name="sex" checked&gt;                &lt;input type="radio" value="0" name="sex"&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;出生日期&lt;/td&gt;            &lt;td&gt;                &lt;input type="date" name="date"&gt;&lt;/input&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;&lt;td colspan="2"&gt;&lt;input type="submit" value="插入"&gt;&lt;/td&gt;&lt;/tr&gt;    &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="JavaWeb" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/JavaWeb/"/>
    
    <category term="基础" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/JavaWeb/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="基础" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="JavaWeb" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 基础</title>
    <link href="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/01/02/JavaScript-%E5%9F%BA%E7%A1%80/"/>
    <id>https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/01/02/JavaScript-%E5%9F%BA%E7%A1%80/</id>
    <published>2023-01-02T08:12:58.000Z</published>
    <updated>2023-02-06T15:16:10.823Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-文字样式"><a href="#1-文字样式" class="headerlink" title="1.文字样式"></a>1.文字样式</h1><h2 id="CSS文件样式编辑"><a href="#CSS文件样式编辑" class="headerlink" title="CSS文件样式编辑"></a>CSS文件样式编辑</h2><pre class="line-numbers language-none"><code class="language-none">.class #id {  font-size: ;/* //字体大小 */  font-family: ; /* //字体 */  font-weight: ;/* //字体粗细 */  font-style: ;/* /字体风格 */  font: ;/* 综合设置字体 */} @font-face{ font-family: ; /* 字体名称 */; src: ; /* 字体路径 */}/* CSS文本外观属性 */*{ color: ;/* 文本颜色 */ letter-spacing:;/* 字间距 */ word-spacing:;/* 单词间距 */ line-height:;/* 行间距 */ text-transform:;/* 文本转换 */ none 默认;capitalized 首字符大写;uppercase 全部字符转换为大写;lowercase 全部字母转换为小写; text-decoration:;/* 文本装饰 */none 默认;underline 下划线;overline 上划线;line-through 删除线; text-align:;/* 水平对齐方式 */left  right  center (仅适用于块级元素) text-indent:;/* 首行缩进 */ white-space:;/* 空白符处理 */normal 空白无效化(仅一个空格); pre 预格式化; nowrap 空白无效化(一行,无视字数量); text-shadow:;/* 阴影效果 */h-shadow 水平阴影距离; v-shadow 垂直到阴影的距离; blur 模糊半径; color 阴影颜色; text-overflow:;/* 表示对象内溢出文本 */ clip 修剪溢出文本,不显示省略标签; ellipsis 用省略标签"..."替代; word-wrap:;/* 实现长单词或者URL地址(统一资源定位器)的自动换行 */break-word 内部换行(保持文本在ui设计面板内部);}/* CSS复合选择器 */一,以标签为选择的1 标签选择器p{}2 后代选择器p strong{}3 并集选择器(较特殊,各种都可以并集)h2 h3 p .class{}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链接伪类控制超链接"><a href="#链接伪类控制超链接" class="headerlink" title="链接伪类控制超链接"></a>链接伪类控制超链接</h2><pre class="line-numbers language-none"><code class="language-none">a:link{    /* 默认格式 */}a:visited{    /* 被访问之后的样式 */}a:hover{    /* 鼠标指针经过，悬停时超链接的样式 */}a:active{    /* 鼠标点击不放时的样式 */}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-选择器关系"><a href="#2-选择器关系" class="headerlink" title="2.选择器关系"></a>2.选择器关系</h1><h3 id="一、属性选择器"><a href="#一、属性选择器" class="headerlink" title="一、属性选择器"></a>一、属性选择器</h3><pre><code>1.只要 P 元素 id 属性以 "one" 开头就会被选中p[id^="one"]{ }2.匹配包含 id 属性,且 id 属性值是 "section" 结尾的 div 元素div[id$="section"]{ }3.匹配包含 id 属性,且 id 属性值包含 "section" 字符串的任意 div 元素div[id*="section"]{ }</code></pre><h3 id="二、关系选择器"><a href="#二、关系选择器" class="headerlink" title="二、关系选择器"></a>二、关系选择器</h3><pre><code>1.子选择器      /* 当子元素只做某个父元素的子类时生效 */h1&gt;strong{ }2.兄弟选择器/* 在某个元素选择器后触发 */    (1)临近选择器       /*  在位于同一父级元素; 第二个元素 紧跟着 第一个元素 */    p+h2{ }    (2)普通兄弟选择器    /*  在位于同一父级元素; 第二个元素 不必跟着 第一个元素 */    p~h2{ }</code></pre><h3 id="三、结构化伪类选择器"><a href="#三、结构化伪类选择器" class="headerlink" title="三、结构化伪类选择器"></a>三、结构化伪类选择器</h3><pre><code>1.:root选择器     /* 用于匹配文档根标签 ，全局设定 */:root{ } == *{ }2.:not选择器    /* 排除 父结构元素 下 子结构元素 该功能的继承效果 */body *:not(h2){ }3.:only-child选择器      /* 用于匹配 父元素 有且仅有一个 子元素 才生效的 */strong:only-child{ }4.:first-child 和 :last-child 选择器      /* 和 :only-child选择器 条件类似 */p:first-child{ } / p:last-child{ } 5.:nth-child(n) 和 :nth-last-child(n) 选择器    /* 两者的关系是 顺数 或 倒数 */  6.:nth-of-type(n) 和 :nth-last-of-type(n) 选择器     /* 匹配 标签本身 的顺序 */h2:nth-of-type(odd){ }   匹配 h2 的奇数行h2:nth-of-type(even){ }  匹配 h2 的偶数行p:nth-last-of-type(2){ } 匹配 p 倒数的第二数行7.:empty选择器     /* 匹配 没有 子元素 或 文本内容为空 所有元素 */:empty{ }</code></pre><h3 id="四、伪元素选择器-x2F-这对已经定义好的伪元素使用的选择器-x2F"><a href="#四、伪元素选择器-x2F-这对已经定义好的伪元素使用的选择器-x2F" class="headerlink" title="四、伪元素选择器     /* 这对已经定义好的伪元素使用的选择器 */"></a>四、伪元素选择器     /* 这对已经定义好的伪元素使用的选择器 */</h3><pre><code>1.:before伪元素选择器  必须配合 content 属性指定要插入的内容p:before{content: " ";}2.:after为元素选择器p:after{content: " ";}</code></pre><h1 id="3-表格-表单"><a href="#3-表格-表单" class="headerlink" title="3.表格 表单"></a>3.表格 表单</h1><h3 id="网页底部信息版本"><a href="#网页底部信息版本" class="headerlink" title="网页底部信息版本"></a>网页底部信息版本</h3><pre class="line-numbers language-none"><code class="language-none">&lt;caption&gt; &lt;/caption&gt;    定义表格的标题&lt;table border="" (表格边框)&gt;     &lt;tr&gt;        &lt;td&gt;        &lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建表格："><a href="#创建表格：" class="headerlink" title="创建表格："></a>创建表格：</h3><h4 id="一、table标签属性"><a href="#一、table标签属性" class="headerlink" title="一、table标签属性"></a>一、table标签属性</h4><pre><code>1.border：表格边框      border-collapse：collapse;  边框合并。         1.HTML设置cellspacing属性无效 2.tr 无border属性2.cellspacing：单元格间距离3.cellpadding：单元格内容与单元格边缘距离4.withd：宽5.height：高6.align：left，center，right 表格在网页的对齐方式7.bgcolor：背景颜色8.background：url（）设置表格背景图像</code></pre><h4 id="二、tr标签属性"><a href="#二、tr标签属性" class="headerlink" title="二、tr标签属性"></a>二、tr标签属性</h4><pre><code>1.height：高2.align：left，center，right  一行内容水平对齐方向3.valign： 一行内容的垂直对齐方向4.bgcolor：背景行颜色5.background：url() 设置行背景图片</code></pre><h4 id="三、td标签属性"><a href="#三、td标签属性" class="headerlink" title="三、td标签属性"></a>三、td标签属性</h4><pre><code>1.height：高2.align：left，center，right  一行内容水平对齐方向3.valign： 一行内容的垂直对齐方向4.bgcolor：背景行颜色5.background：url() 设置行背景图片6.colspan：单元格横跨列数7.rowspan：单元格纵跨列数</code></pre><h4 id="四、th-和-td-相同"><a href="#四、th-和-td-相同" class="headerlink" title="四、th 和 td 相同"></a>四、th 和 td 相同</h4><pre><code>但用于定义表头单元格，默认加粗，居中显示</code></pre><h4 id="五、表格结构"><a href="#五、表格结构" class="headerlink" title="五、表格结构"></a>五、表格结构</h4><pre><code>1.thead：定义表格头部，包含网页logo和导航头部信息2.tfoot：定义表格页脚，位于 thead 标签后，包含网页底部的企业信息3.tbody：定义表格的主体，位于 tfoot 标签后，包含其他内容</code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;form action="url地址" method="提交方式" name="调单名称"&gt;&lt;/form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建表单："><a href="#创建表单：" class="headerlink" title="创建表单："></a>创建表单：</h3><h4 id="一、action属性"><a href="#一、action属性" class="headerlink" title="一、action属性"></a>一、action属性</h4><pre><code>1.当提交表单时，数据会传送到 名为 ” “的页面2.可以是相对路径或者绝对路径。  列如： action=mailto：htmlcss@163.com</code></pre><h4 id="二、method属性"><a href="#二、method属性" class="headerlink" title="二、method属性"></a>二、method属性</h4><pre><code>&lt;form action="form_action.asp" method="get / post" name="调单名称"&gt;用于指明表单处理服务器数据的方法1.get：保密差，数据量有限制2.post：保密好，数据量无限制</code></pre><h4 id="三、name属性"><a href="#三、name属性" class="headerlink" title="三、name属性"></a>三、name属性</h4><pre><code>用于指定表单名称，表单控件中具有name属性的元素会将用户填写的内容交给服务器</code></pre><h4 id="四、autocomplete属性"><a href="#四、autocomplete属性" class="headerlink" title="四、autocomplete属性"></a>四、autocomplete属性</h4><pre><code>指定表单是否有自动完成功，将表单控件输入的内容记录下来1.on2.off</code></pre><h4 id="五、novalidate属性"><a href="#五、novalidate属性" class="headerlink" title="五、novalidate属性"></a>五、novalidate属性</h4><pre><code>指定在提交表单时取消对表单进行有效的检查1.novalidate="novalidate”</code></pre><h3 id="lt-input-gt-表单控件"><a href="#lt-input-gt-表单控件" class="headerlink" title="< input >表单控件"></a>&lt; input &gt;表单控件</h3><h4 id="一、input控件"><a href="#一、input控件" class="headerlink" title="一、input控件"></a>一、input控件</h4><p>  (1)type属性<br>    1.text<br>    2.password<br>    3.radio：单选按钮<br>    4.checkbox：复选框<br>    5.button：普通按钮<br>    6.submit：提交按钮<br>    7.reset：重置按钮<br>    8.image：图像形式的提交按钮<br>    9.hidden：隐藏域<br>    10.file：文件域<br>  (2)name属性：控件名称<br>  (3)value属性:默认文本值<br>  (4)size属性：input控件在页面的显示宽度<br>  (5)readonly属性：只读无法修改<br>  (6)disabled属性：禁用该控件<br>  (7)checked属性：定义选择控件默认被选中<br>  (8)maxlength属性：控件允许输入的最多字符</p><p>  (9)email类型<br>  </p><pre class="line-numbers language-none"><code class="language-none">&lt;input type="email"/&gt;    专门用于验证Email输入框的内容的邮件格式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  (10)url类型<br>  <pre class="line-numbers language-none"><code class="language-none">&lt;input type="url"/&gt;    专门用于验证输入框的内容是url地址格式的文本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  (11)tel类型<br>  <pre class="line-numbers language-none"><code class="language-none">&lt;input type="tel"/&gt;    专门用于提供输入电话号码的文本框，配合 pattern 属性使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  (12)search类型<br>  <pre class="line-numbers language-none"><code class="language-none">&lt;input type="search"/&gt;    专门用于输入搜素关键词的文本框，在用户输入内容后，右侧会附带一个删除图标<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  (13)color类型<br>  <pre class="line-numbers language-none"><code class="language-none">&lt;input type="color"/&gt;    用于设置颜色的文本框，通过 value属性值 改变默认颜色<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  (14)number类型<br>  <pre class="line-numbers language-none"><code class="language-none">&lt; input type="number"/&gt;    专门用于验证文本框内容是否是数字或在限定范围内    1.value：    2.max：    3.min：    4.step：输入域合法的间隔的升降值，默认值1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>  (15)range类型<br>  <pre class="line-numbers language-none"><code class="language-none">&lt;input type="range"/&gt;用于提供一定范围内的输入范围<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  (16)Date pickers类型<br>  <pre class="line-numbers language-none"><code class="language-none">&lt;input type=Date，month，week /&gt; 1.Date 2.month 3.week 4.time 5.datetime 6.datetime-local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>  (17)autofocus属性<br>        用于指定页面加载后是否自动获取焦点<br>        1.true<br>        2.off<br>  (18)form属性<br>        1.可以在form表外进行操作<br>        2.在指定form属性为表单的id，所以该输入框任然属于表单的一部分<br>  (19)list属性<br>     <pre class="line-numbers language-none"><code class="language-none">例如：    &lt;from action="#" method="post"&gt;    请输入网址：&lt;input  type="url" list="url_list" name="weburl" /&gt;    &lt;datalist id="url_list"&gt;        &lt;option lable="百度" value="htpp://www.baidu.com"&gt;&lt;/option&gt;    &lt;/datalist&gt;    &lt;input type="submit" value="提交" /&gt;    &lt;/form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>  (20)multiple属性<br>        适用Email类型和file类型，可以多个内容段<br>  (21)placeholder属性<br>        输入框提供相关提示<br>  (22)required属性<br>        用于判断用户是否在表单输入框中输入内容，表单内容为空时，不允许用户提交表单<br>    <pre class="line-numbers language-none"><code class="language-none">&lt;input required="required"/&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><h3 id="二、textarea控件"><a href="#二、textarea控件" class="headerlink" title="二、textarea控件"></a>二、textarea控件</h3><pre><code>（1）name属性（2）readonly属性：只读无法修改（3）disabled属性：禁用该控件</code></pre><h3 id="三、select控件"><a href="#三、select控件" class="headerlink" title="三、select控件"></a>三、select控件</h3><h4 id="（1）select属性"><a href="#（1）select属性" class="headerlink" title="（1）select属性"></a>（1）select属性</h4><pre><code>    1.size：下拉菜单可见选项数    2.multiple：定义 multiple="multiple" 具有多选择功能</code></pre><h4 id="（2）option属性"><a href="#（2）option属性" class="headerlink" title="（2）option属性"></a>（2）option属性</h4><pre><code>    1.selected：定义 selected="selected" 默认选定</code></pre><h4 id="（3）optgroup属性"><a href="#（3）optgroup属性" class="headerlink" title="（3）optgroup属性"></a>（3）optgroup属性</h4><p> / 选项分组的方法和效果 /<br>例如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;from action="#" method="post"&gt;    &lt;select&gt;        &lt;optgroup lable="北京"&gt;            &lt;option&gt; &lt;/option&gt;            &lt;option&gt; &lt;/option&gt;        &lt;/optgroup&gt;         &lt;optgroup lable="上海"&gt;            &lt;option&gt; &lt;/option&gt;            &lt;option&gt; &lt;/option&gt;        &lt;/optgroup&gt;    &lt;/select&gt;&lt;/form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（4）keygen"><a href="#（4）keygen" class="headerlink" title="（4）keygen"></a>（4）keygen</h4><h4 id="（5）datalist属性"><a href="#（5）datalist属性" class="headerlink" title="（5）datalist属性"></a>（5）datalist属性</h4><pre><code>    1.自行输入内容，指定输入框绑定的datalist元素</code></pre><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;from action="#" method="post"&gt;请输入用户名：&lt;input  type="text" list="namelist" /&gt;&lt;datalist id="namelist"&gt;    &lt;option&gt;admin&lt;/option&gt;&lt;/datalist&gt;&lt;input type="submit" value="提交" /&gt;&lt;/form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-布局"><a href="#4-布局" class="headerlink" title="4.布局"></a>4.布局</h1><h3 id="一、浮动"><a href="#一、浮动" class="headerlink" title="一、浮动"></a>一、浮动</h3><pre><code>选择器{float：left，right，none}</code></pre><h3 id="二、清除浮动"><a href="#二、清除浮动" class="headerlink" title="二、清除浮动"></a>二、清除浮动</h3><pre><code>选择器{clear:left,right，none，both}选择器{overflow：hidden}    消除子标签对父标签的影响选择器:after{必须设置 height:0 样式；必须设置 content:"".}</code></pre><h3 id="三、定位属性"><a href="#三、定位属性" class="headerlink" title="三、定位属性"></a>三、定位属性</h3><h4 id="1-定位模式"><a href="#1-定位模式" class="headerlink" title="(1)定位模式"></a>(1)定位模式</h4><pre><code>    选择器{position:属性值}    1.static:自动定位    2.relative:相对定位，相对于自身在同级文档流的移动    3.absolute：绝对定位，相对于父标签进行定位    4，fixed：固定定位，相对于浏览器进行定位</code></pre><h4 id="2-边偏移"><a href="#2-边偏移" class="headerlink" title="(2)边偏移"></a>(2)边偏移</h4><pre><code>    1.top    2.bottom    3.left    4.right </code></pre><h3 id="四、文本内容溢出"><a href="#四、文本内容溢出" class="headerlink" title="四、文本内容溢出"></a>四、文本内容溢出</h3><pre><code>选择器{overflow：属性值}1.visible：内容不会剪切，会呈现在标签框外2.hidden：溢出内容被剪切，且不可见3.auto：在需要时产生滚动条，自适应4.scroll：溢出内容会被修剪，浏览器会始终显示滚动条</code></pre><h3 id="五、标签顺序"><a href="#五、标签顺序" class="headerlink" title="五、标签顺序"></a>五、标签顺序</h3><pre><code>选择器{z-index：0}  数字越大优先级越高</code></pre><h1 id="5-过度、变形和动画"><a href="#5-过度、变形和动画" class="headerlink" title="5.过度、变形和动画"></a>5.过度、变形和动画</h1><h3 id="一、过度"><a href="#一、过度" class="headerlink" title="一、过度"></a>一、过度</h3><h4 id="1、transition-property属性"><a href="#1、transition-property属性" class="headerlink" title="1、transition-property属性"></a>1、transition-property属性</h4><pre><code>    功能:渐隐，渐显，速度变化（设置应用过度的CSS属性）    (1)none    (2)all    (3)property：定义应用过渡效果  // transition-property:background-color;    版本私有前缀：    -webkit-transition-property： 谷歌    -moz-transition-property：  火狐    -o-transition-property：    IE    -ms-transition-property：   欧朋</code></pre><h4 id="2、transition-duration属性"><a href="#2、transition-duration属性" class="headerlink" title="2、transition-duration属性"></a>2、transition-duration属性</h4><pre><code>    定义过渡效果持续时间    transition-duration：5s；</code></pre><h4 id="3、transition-timing-function属性"><a href="#3、transition-timing-function属性" class="headerlink" title="3、transition-timing-function属性"></a>3、transition-timing-function属性</h4><pre><code>    规定过渡效果的速度曲线    (1)liner:相同速度开始至结束的过渡效果，等同于 cubic-bezier(0,0,1,1);    (2)ease:以慢速开始，然后加快，最后慢慢结束的过渡效果，等同于 cubic-bezier(0。25,0.1,0.25,1);    (3)ease-in:以慢速开始，然后逐渐加快的过渡效果，等同于 cubic-bezier(0.42,0,1,1);    (4)ease-out:以慢速结束的过渡效果，等同于 cubic-bezier(0,0,0.58,1);    (5)ease-in-out:以慢速开始和结束的过渡效果，等同于 cubic-bezier(0.42,0,0.58,1);    (6)cubic-bezier(n,n,n,n):用于定义加速或者减速的贝塞尔曲线的形状（0~1值）。</code></pre><h4 id="4、transition-delay属性"><a href="#4、transition-delay属性" class="headerlink" title="4、transition-delay属性"></a>4、transition-delay属性</h4><pre><code>    规定过渡效果的开始时间    (1)transition-delay: time;</code></pre><h4 id="5、transition属性"><a href="#5、transition属性" class="headerlink" title="5、transition属性"></a>5、transition属性</h4><pre><code>    复合属性    transition：border-radius 5s ease-in-out 2s,                border-radius 5s ease-in-out 2s</code></pre><h3 id="二、变形"><a href="#二、变形" class="headerlink" title="二、变形"></a>二、变形</h3><h4 id="1、transform属性"><a href="#1、transform属性" class="headerlink" title="1、transform属性"></a>1、transform属性</h4><pre><code>    功能:平移、缩放、倾斜、旋转    (1)translate(): 移动元素，基于X，Y重新定位元素    (2)scale(): 缩放元素对象，使元素对象尺寸变化    (3)skew(): 倾斜元素对象，取值为度数值    (4)rotate(): 旋转元素对象，取值为度数值 </code></pre><h4 id="2、2D变形"><a href="#2、2D变形" class="headerlink" title="2、2D变形"></a>2、2D变形</h4><pre><code>    (1)平移        transform:translate(X,Y);    (2)缩放        transform:scale(X,Y);        第一值:负数(翻转)，0~1(缩小)，1(增大)        第二值:可以省略    (3)倾斜        transform:skew(X,Y);        单位值:deg，取值正负值，        第二值:默认0    (4)旋转        transform:rotate(angle);        单位值:deg，取值正值(顺时)，负值(逆时)    (5)更爱变换的中心        transform:X,Y,Z</code></pre><h4 id="3、3D变形"><a href="#3、3D变形" class="headerlink" title="3、3D变形"></a>3、3D变形</h4><pre><code>    (1)transform:rotateX(a);    (2)transform:rotateY(a);    (3)transform:rotated3d(1,1,0,45deg);</code></pre><h4 id="4、perspective属性"><a href="#4、perspective属性" class="headerlink" title="4、perspective属性"></a>4、perspective属性</h4><pre><code>    为呈现良好视距，3D视距旋转    (1)transform-style: 用于保存元素的3D空间        flat：子元素将不保留3D位置        preserve-3d：子元素将保留3D位置    (2)backface-visibility: 定义元素在屏幕时是否可见        visible:背面是可见        hidden:背面是不可见的</code></pre><h3 id="三、动画"><a href="#三、动画" class="headerlink" title="三、动画"></a>三、动画</h3><h4 id="1、-keyframes-规则"><a href="#1、-keyframes-规则" class="headerlink" title="1、@keyframes 规则"></a>1、@keyframes 规则</h4><pre><code>    (1)animationname: 表示当前动画的名称，他将作为引用的唯一标识，不为空    (2)keyframes-selector: 关键帧选择器，值可以是百分比，from（0%）或to（100%）    (3)css-styles: 定义执行到当前关键帧时对应的动画状态，有css样式属性进行定义，可多个属性，不能为空        语法格式:    <pre class="line-numbers language-none"><code class="language-none">@keyframes animationname {    keyframes-selector {        css-styles;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>    例如：    <pre class="line-numbers language-none"><code class="language-none">淡出动画@keyframes appear {    0%{ opacity:0; }    100%{ opacity:1; }}@keyframes appear {    from{ opacity:0; }    to{ opacity:1; }}@keyframes appear {    from to{ opacity:0; }    20% 80%{ opacity:1; }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h4 id="2、animation-name属性"><a href="#2、animation-name属性" class="headerlink" title="2、animation-name属性"></a>2、animation-name属性</h4><pre><code>    定义应用的动画名称    animationname-name: name;</code></pre><h4 id="3、animation-duration属性"><a href="#3、animation-duration属性" class="headerlink" title="3、animation-duration属性"></a>3、animation-duration属性</h4><pre><code>    定义整个动画效果完成效果所需要的时间    animation-duration:time;</code></pre><h4 id="4、animation-timing-function属性"><a href="#4、animation-timing-function属性" class="headerlink" title="4、animation-timing-function属性"></a>4、animation-timing-function属性</h4><pre><code>    规定动画的速度曲线</code></pre><h4 id="5、animation-delay属性"><a href="#5、animation-delay属性" class="headerlink" title="5、animation-delay属性"></a>5、animation-delay属性</h4><pre><code>    定义执行动画效果延迟的时间</code></pre><h4 id="6、animation-iteration-count属性"><a href="#6、animation-iteration-count属性" class="headerlink" title="6、animation-iteration-count属性"></a>6、animation-iteration-count属性</h4><pre><code>    定义动画的播放次数</code></pre><h4 id="7、animation-deraction属性"><a href="#7、animation-deraction属性" class="headerlink" title="7、animation-deraction属性"></a>7、animation-deraction属性</h4><pre><code>    定义当前动画播放的方向    (1)normal    (2)alternate:奇数正常，偶数逆向播放</code></pre><h4 id="8、animation属性"><a href="#8、animation属性" class="headerlink" title="8、animation属性"></a>8、animation属性</h4><pre><code>     复合属性        animation: mymove 5s linear 2s 3 alternate;</code></pre><h1 id="6-少见的标签功能"><a href="#6-少见的标签功能" class="headerlink" title="6.少见的标签功能"></a>6.少见的标签功能</h1><h4 id="1-nav标签"><a href="#1-nav标签" class="headerlink" title="1.nav标签"></a>1.nav标签</h4><pre><code>    定义导航链接</code></pre><h4 id="2-footer标签"><a href="#2-footer标签" class="headerlink" title="2.footer标签"></a>2.footer标签</h4><pre><code>    定义一个页面或者区域的底部</code></pre><h4 id="3-article标签"><a href="#3-article标签" class="headerlink" title="3.article标签"></a>3.article标签</h4><pre><code>    定义一篇日志，一条新闻或用户评论（代表文档、页面或者应用程序中与上下文不相关的独立部分）</code></pre><h4 id="4-section标签"><a href="#4-section标签" class="headerlink" title="4.section标签"></a>4.section标签</h4><pre><code>    小标题，</code></pre><h4 id="5-aside标签"><a href="#5-aside标签" class="headerlink" title="5.aside标签"></a>5.aside标签</h4><pre><code>    定义当前页面或者文章的附属信息部分</code></pre><h4 id="6-video-x2F-x2F-可以使用网站资源"><a href="#6-video-x2F-x2F-可以使用网站资源" class="headerlink" title="6.video  //可以使用网站资源"></a>6.video  //可以使用网站资源</h4><pre class="line-numbers language-none"><code class="language-none">&lt;video src="video.mp4" controls="controls"&gt;&lt;/video&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>    1.autoplay:页面加载完后自动播放视频    2.loop：视频结束时重现开始播放    3.preload：  // 在页面加载时进行加载        (1)auto:        (2)meta:        (3)none:    4.poster：        (1)URL:当视频缓冲不足时，该属性值链接一个图像，并将图像按一定比例显示出来    5.muted：嵌入的视频静音播放例如：</code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;video controls="controls"&gt;    &lt;source src="video.mp4" type="video/mp4"&gt;    &lt;source src="video.ogg" type="video/ogg"&gt;    &lt;source src="video.webm" type="video/webm"&gt;&lt;/video&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-audio"><a href="#7-audio" class="headerlink" title="7.audio"></a>7.audio</h4><pre class="line-numbers language-none"><code class="language-none">&lt;audio src="audio.mp3" controls="controls"&gt;&lt;/audio&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>    1.autoplay:页面加载完后自动播放音频    2.loop：音频结束时重现开始播放    3.preload：  // 在页面加载时进行加载        (1)auto:        (2)meta:        (3)none:例如：</code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;audio controls="controls"&gt;    &lt;source src="audio.mp3" type="audio/mp3"&gt;    &lt;source src="audio.ogg" type="audio/ogg"&gt;    &lt;source src="audio.wav" type="audio/wav"&gt;&lt;/audio&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-画布"><a href="#7-画布" class="headerlink" title="7.画布"></a>7.画布</h1><h3 id="一、画布使用"><a href="#一、画布使用" class="headerlink" title="一、画布使用"></a>一、画布使用</h3><h4 id="1-创建画布"><a href="#1-创建画布" class="headerlink" title="1.创建画布"></a>1.创建画布</h4><pre class="line-numbers language-none"><code class="language-none">&lt; canvas id="cavs" width=" " height=" "&gt; &lt;/canvas&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-获取画布"><a href="#2-获取画布" class="headerlink" title="2.获取画布"></a>2.获取画布</h4><pre class="line-numbers language-none"><code class="language-none">var canvas = ducument.getElementById('cavs');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-准备画笔"><a href="#3-准备画笔" class="headerlink" title="3.准备画笔"></a>3.准备画笔</h4><pre class="line-numbers language-none"><code class="language-none">canvas.getContext('2d'); // 如果三维画制造图片--webgl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="二、绘制线"><a href="#二、绘制线" class="headerlink" title="二、绘制线"></a>二、绘制线</h3><h4 id="1-初始位置"><a href="#1-初始位置" class="headerlink" title="1.初始位置"></a>1.初始位置</h4><pre class="line-numbers language-none"><code class="language-none">var cas = ducument.getElementById('cas');var context cas.getContext('2d');context.moveTo(100,100);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-连接端点"><a href="#2-连接端点" class="headerlink" title="2.连接端点"></a>2.连接端点</h4><pre class="line-numbers language-none"><code class="language-none">context.lineTo(100,100);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-描边"><a href="#3-描边" class="headerlink" title="3.描边"></a>3.描边</h4><pre class="line-numbers language-none"><code class="language-none">context.stroke();连接初始位置和连线端点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-绘制圆"><a href="#4-绘制圆" class="headerlink" title="4.绘制圆"></a>4.绘制圆</h4><pre class="line-numbers language-none"><code class="language-none">        arc(X,Y,Z,开始角度,结束角度,方向)```                例如:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>        context.arc(150,25,100,0.05*Math.PI,0.95*Math.PI);</code></pre><pre class="line-numbers language-none"><code class="language-none">####    5.线的样式        (1)宽度:context.lineWidth='10';        (2)描边颜色:context.strokeStyle='red / #f00';        (3)断电形状:lineCap='属性值'            [1]butt:默认直线方形边缘            [2]round:显示圆形端点            [3]square:显示方形端点### 三、线的路径####    1.重置路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>    context.beginPath();</code></pre><pre class="line-numbers language-none"><code class="language-none">####    2.闭合路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>    context.colsePath();    </code></pre><pre class="line-numbers language-none"><code class="language-none">####    3.填充路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>    context.fill();</code></pre><pre class="line-numbers language-none"><code class="language-none"># 8.DOM文档对象模型### 一、####    (1)获取元素        1. ducument.getElementById('自定义名')        2. ducument.getElementsByTagName('标签名') //集合 不能用push()等方法        3. element.getElementsByTagName('标签名')          4.document.getElementsByName('Name名')        5.document.getElementsByClassName('ClassName名')        6.document.querySelector('.box / #box / li')    ####    (2)document 对象属性        1.document.body        2.document.title        3.document.documentElement        4.document.forms        5.document.images####    (3)操作元素内容        1.element.innerHTML        2.element.innerText        3,element.textContent####    (4)操作元素属性        1.img元素            img.src / img.title         2.表单input元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>        &lt;button&gt;按钮&lt;/button&gt;        &lt;input type="text" value="输出内容"&gt;            &lt;script&gt;                var btn = document.querySelector('button');                var input = document.querySelector('input');                btn.onclick = function(){                    input.value = '被点击了！';                    this.disabled = true;                };            &lt;/script&gt;    ```</code></pre><h4 id="5-操作元素样式"><a href="#5-操作元素样式" class="headerlink" title="(5)操作元素样式"></a>(5)操作元素样式</h4><pre><code>    1.style属性        background        backgroundColor        display        fontSize        height        left        listStyleType        overflow        textAlign        textDecoration        textIndent        transform</code></pre><h4 id="6-操作className属性"><a href="#6-操作className属性" class="headerlink" title="(6)操作className属性"></a>(6)操作className属性</h4><h4 id="7-获取焦点-onfocus-失去焦点-onblur"><a href="#7-获取焦点-onfocus-失去焦点-onblur" class="headerlink" title="(7)获取焦点 onfocus 失去焦点 onblur"></a>(7)获取焦点 onfocus 失去焦点 onblur</h4><h4 id="8-排他思想"><a href="#8-排他思想" class="headerlink" title="(8)排他思想"></a>(8)排他思想</h4><pre><code>    两层循环</code></pre><h4 id="9-鼠标指针经过时背景变色"><a href="#9-鼠标指针经过时背景变色" class="headerlink" title="(9)鼠标指针经过时背景变色"></a>(9)鼠标指针经过时背景变色</h4><pre><code>    table / thead tr th / tbody tr td </code></pre><h4 id="10"><a href="#10" class="headerlink" title="(10)"></a>(10)</h4><pre><code>    1.获取属性：div.getAttribute('id');    2.设置属性：div.setAttribute('index',2);    3.移除属性：div.removeAttribute('id');</code></pre><h4 id="11-节点层级"><a href="#11-节点层级" class="headerlink" title="(11)节点层级"></a>(11)节点层级</h4><pre><code>    1.父节点        先建立document.querySelector('.child');              child.parentNode;    2.子节点        childNodes        console.log(ul.childNodes[0].nodeType);</code></pre><h1 id="9-常用命令规则"><a href="#9-常用命令规则" class="headerlink" title="9.常用命令规则"></a>9.常用命令规则</h1><p>头  header<br>导航    nav<br>侧栏    siderbar<br>左，右，中间    left，right，center<br>标志    logo<br>页面主体    main<br>新闻    news<br>子导航  subnav<br>子菜单  submenu<br>内容    content / container<br>尾  footer<br>栏目    column<br>登录条  loinbar<br>广告    banner<br>热点    hot<br>下载    download<br>菜单    menu<br>搜索    search<br>友情链接    friedlink<br>滚动    scroll<br>文章列表    list<br>小技巧  tips<br>加入    joinus<br>服务    service<br>状态    status<br>合作伙伴    partner<br>版权    copyright<br>标签页  tab<br>提示信息    msg<br>栏目标题    title<br>指南    guild<br>注册    register<br>投票    vote</p><p>CSS文件<br>主要样式    master<br>模块样式    module<br>基本样式    base<br>版本样式    layout<br>专栏    columns<br>表单    forms<br>主题    themes<br>文字    font<br>打印    print</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/JavaScript/"/>
    
    <category term="基础" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/JavaScript/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="基础" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="JavaScript" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>BigData-词频统计编程</title>
    <link href="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/01/02/BigData-%E8%AF%8D%E9%A2%91%E7%BB%9F%E8%AE%A1%E7%BC%96%E7%A8%8B/"/>
    <id>https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/01/02/BigData-%E8%AF%8D%E9%A2%91%E7%BB%9F%E8%AE%A1%E7%BC%96%E7%A8%8B/</id>
    <published>2023-01-02T07:07:10.000Z</published>
    <updated>2023-02-06T15:34:44.642Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="BigData-Hadoop-词频统计编程"><a href="#BigData-Hadoop-词频统计编程" class="headerlink" title="BigData Hadoop 词频统计编程"></a>BigData Hadoop 词频统计编程</h2><h4 id="1-编译WordCount-java-程序-将程序在Hadoop-集中运行"><a href="#1-编译WordCount-java-程序-将程序在Hadoop-集中运行" class="headerlink" title="1.编译WordCount.java 程序,将程序在Hadoop 集中运行"></a>1.编译WordCount.java 程序,将程序在Hadoop 集中运行</h4><h4 id="2-在HDFS中处理文件-进行上传"><a href="#2-在HDFS中处理文件-进行上传" class="headerlink" title="2.在HDFS中处理文件 进行上传"></a>2.在HDFS中处理文件 进行上传</h4><h4 id="3-运行-Word-Count-java"><a href="#3-运行-Word-Count-java" class="headerlink" title="3.运行 Word Count.java"></a>3.运行 Word Count.java</h4><p>1.文件上传到 /home/hadoop/data/wordcount<br>2.切换到该目录下<br>3.Hadoop集群上运行 MapReduce的程序WordCount.java</p><pre class="line-numbers language-none"><code class="language-none">gedit WordCount.java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.在本地创建 wordcount_classes :</p><pre class="line-numbers language-none"><code class="language-none">mkdir wordcount_classes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.编译 WordCount.java. 输入下面的命令编译 WordCount.java 程序并设置正确的路径及输出目录.<br>    用 -d (directory,目录)选择指定编译结果的 .class文件的存放目录:</p><pre class="line-numbers language-none"><code class="language-none">javac -cp /home/hadoop/hadoop-2.9.0/share/hadoop/*   -d  wordcount_class WordCount.java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.为编译的 wordcount目录创建一个.jar 文件.  因为需要将该 .jar 发送到集群的其他节点同时运行.</p><pre class="line-numbers language-none"><code class="language-none">jar -cvf WordCount.jar -C wordcount_classes/ .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.创建Map Reduce 输入文件 /tmp/MR-WordCount,上传到 YouTube 数据集当作 WordCount程序的输入文件.</p><pre class="line-numbers language-none"><code class="language-none">Hadoop fs -mkdir /tmp/MR-WordCount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8.使用Hadoop的put命令把 YouTupe 数据集从本地系统的 /home/hadoop/data/wordcount 复制到HDFS 的 /tmp/MR-WrodCount目录:</p><pre class="line-numbers language-none"><code class="language-none">hadoop fs -put YoutubeDataSets.txt  /tmp/MR-WordCount/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9.查看文件是否上传成功,命令如下:</p><pre class="line-numbers language-none"><code class="language-none">hadoop fs -ls /tmp/MR-WordCount/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10.运行MapReduce</p><pre class="line-numbers language-none"><code class="language-none">hadoop jar WordCount.jar  cn.hust.book.bigdata.ch04.WordCount /tmp/MR-WordCount/YoutubeDataSets.txt /tmp/MR-WordCount/output  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="WordCount-java"><a href="#WordCount-java" class="headerlink" title="WordCount.java"></a>WordCount.java</h3><pre class="line-numbers language-none"><code class="language-none">import java.awt.JobAttributes;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.lang.module.Configuration;import java.net.URI;import java.nio.file.FileSystem;import java.nio.file.LinkOption;import java.nio.file.Path;import java.nio.file.WatchKey;import java.nio.file.WatchService;import java.nio.file.WatchEvent.Kind;import java.nio.file.WatchEvent.Modifier;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.Scanner;import java.util.StringTokenizer;import javax.naming.Context;import org.w3c.dom.Text;public class WordCount { public static class MyMapper extends Mapper&lt;Object,Text,Text,IntWritable&gt;{  private final static IntWritable one = new IntWritable(1);  private Text word = new Text();  public void map(Object key,Text value,Context context) throws IOException,InterruptedException{   StringTokenizer itr = new     StringTokenizer(value.toString(),"\t"); //以制表符分隔一行文本    while(itr.hasMoreTokens()) {     word.set(itr.hasMoreTokens());     context.write(word,one);    }  } } public static class MyReducer extends Reducer&lt;Text,IntWritable,Text,IntWritable&gt;{ public void reduce(Text Key,Iterable&lt;IntWritable&gt;values,Context context) throws IOException,InterruptedException  {  int sum = 0;  for(IntWritable value: values) { // 相同Key累计计数   sum += value.get();  }  countext.write(key,new IntWritable(sum)); }} public static void main(String[] args) {   Configuration conf = new Configuration();   String[] otherArgs = new GenericOptionsParser(conf,args).getRemainingArgs();   Job job = new Job(conf,"WordCount");   job.setJarByClass(WordCount.class);   job.setMapperClass(MyMapper.class);   job.setReducerClass(MyReducer.class);   job.setOutputKeyClass(Text.class);   job.setOutputValueClass(InyWritable.class);   FileInputStream.addInputPath(job,new Pathath(otherArgs[0]));   FileOutputStream.setPutputPath(job,new Path(otherArgs[1]));   System.out.println(job,waitForCompletion(true) ? 0:1 ); }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Linux" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/Linux/"/>
    
    <category term="BigData" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/Linux/BigData/"/>
    
    <category term="词频统计编程" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/Linux/BigData/%E8%AF%8D%E9%A2%91%E7%BB%9F%E8%AE%A1%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Linux" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/Linux/"/>
    
    <category term="BigData" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/BigData/"/>
    
    <category term="基础" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础命令</title>
    <link href="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/01/02/BigData-HDFS%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/01/02/BigData-HDFS%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</id>
    <published>2023-01-02T07:07:00.000Z</published>
    <updated>2023-02-06T15:17:36.456Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="启动Hadoop"><a href="#启动Hadoop" class="headerlink" title="启动Hadoop"></a>启动Hadoop</h3><pre class="line-numbers language-none"><code class="language-none">cd / -name hadoopsbin/start-all.shjpsbin/hadoop dfsadmin -report初始化：bin/hadoop namenod -format集群启动：sbin/start-all.sh集群停止：sbin/stop-all.sh查看日志：ll logs/   cat logs/hadoop-hadoop-namenode-master.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看HDFS的命令：hadoop-fs"><a href="#查看HDFS的命令：hadoop-fs" class="headerlink" title="查看HDFS的命令：hadoop fs"></a>查看HDFS的命令：hadoop fs</h3><pre class="line-numbers language-none"><code class="language-none">Hadoop fs -ls   -mkdir   -copyFromLocal newtest  /home/user   -put /home/user  /user/hadoop   -copyToLocal /user/hadoop /home/hadoop   -get /user/hadoop /home/user   -chmod 777 /user/hadoop   -rm  -r text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="负载均衡：hdfs-balancer"><a href="#负载均衡：hdfs-balancer" class="headerlink" title="负载均衡：hdfs balancer"></a>负载均衡：hdfs balancer</h3><pre class="line-numbers language-none"><code class="language-none">hdfs balancer -threshold ```  ### HDFS API使用方法1.get（）方法实现 static FileSystem get(Configuration conf);2.获取具体的封装 opertor(){  获取Configuration对象  获取FileSystem对象  对文件进行相应操作 }###1.上传本地文件：  具体实现：CopyFile.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>    package com.hafs;    import org.apache.hadoop.conf.Configuration;    import org.apache.hadoop.fs.FileStatus;    import org.apache.hadoop.fs.FileSystem;    impory org.apache.hadoop.fs.Path;    public class CopyFile{        public static void main(String[] args) throws Excerion{            Configuration conf = new Configuration();            FileSystemhdfs = FileSystem.get(conf);            //本地文件            Path src = new Path("/home/hadoop/CopyFile.text");            //HDFS的指定位置            Path dst = new Path("/");            hdfs.copyFromLocalFile(src,dst);            System.out.print("Upload to"+conf.get("fs.default.name"));            FileStatus files[] = hdfs.listStatus(dst);            for(FileStstus file:files){                System.out.print(file.getPath());            }        }    }</code></pre><pre class="line-numbers language-none"><code class="language-none">  导出为CopyFile.jar文件，上传到集群中并文件所在位置执行命令：```   Hadoop jar CopyFile.jar com.hdfs.CopyFile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-创建HDFS文件"><a href="#2-创建HDFS文件" class="headerlink" title="2.创建HDFS文件"></a>2.创建HDFS文件</h3><pre><code>    Public FSDateOutputStream create (Path f)    具体实现：CreateFile.jar</code></pre><pre class="line-numbers language-none"><code class="language-none">Package com.hdfs;import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.fs.FSDataOutputStream;import org.apache.hadoop.fs.FileSysteam;import org.apache.hadoop.fs.Path;public class CreateFile{ public static void main (String[] args) throws Exception{  Configuration conf = new Configuration();  FileSysteamhdfs = FileSyteam.get(conf);   byte[] buff = "hello hadoop world!\n".getByets();   Path dfs = new Path("/test");   FSDataOutputStream outputStream = hdfs.create(dfs);//调用create（）方法，创建文件   outputStream.write(buff,0,buff.length);  } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>    导出为CreatFile.jar文件，上传到集群中并文件所在位置执行命令：</code></pre><pre class="line-numbers language-none"><code class="language-none">hadoop jar CreateFile.jar comhdfs.CreateFile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-创建HDFS目录"><a href="#3-创建HDFS目录" class="headerlink" title="3.创建HDFS目录"></a>3.创建HDFS目录</h3><pre><code>    public boolean mkdirs(Path f)    具体实现：CreateDir.jar</code></pre><pre class="line-numbers language-none"><code class="language-none">package com.hdfs;import org.apache.hadoop.conf.Configuration;improt org.apache.hadoop.fs.FileSysteam;import org.apache.hadoop.fs.Path;public class CreateDir{ public static void main (String[] args) throws Exception{  Configuration conf = new Configuration();  FileSyateamhdfs = FileSyateam.get(conf);  Path dfs = new Path("/TestDir");  //调用mkdir（）方法，创建目录  hdfs.mkdirs(dfs); }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>    导出CreateDir.jar文件，上传到集群中并文件所在位置执行命令：</code></pre><pre class="line-numbers language-none"><code class="language-none">hadoop jar CreateDir.jar com.hdfs.CreateDir;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Linux" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/Linux/"/>
    
    <category term="BigData" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/Linux/BigData/"/>
    
    <category term="HDFS基础命令" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/Linux/BigData/HDFS%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="Linux" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/Linux/"/>
    
    <category term="BigData" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/BigData/"/>
    
    <category term="基础" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础命令</title>
    <link href="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/01/02/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2023/01/02/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</id>
    <published>2023-01-02T07:06:59.000Z</published>
    <updated>2023-02-06T15:27:01.657Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-1-1-用户和用户组"><a href="#1-1-1-用户和用户组" class="headerlink" title="1.1.1 用户和用户组"></a>1.1.1 用户和用户组</h2><h3 id="用户创建"><a href="#用户创建" class="headerlink" title="用户创建"></a>用户创建</h3><p>1.useradd<br>2.passwd</p><h3 id="1-创建用户组"><a href="#1-创建用户组" class="headerlink" title="1.创建用户组"></a>1.创建用户组</h3><p>1.groupadd testgroup</p><h3 id="2-创建用户组同时增加用户组"><a href="#2-创建用户组同时增加用户组" class="headerlink" title="2.创建用户组同时增加用户组"></a>2.创建用户组同时增加用户组</h3><p>1.useradd  -g testgroup test</p><h3 id="3-已有用户增加用户组"><a href="#3-已有用户增加用户组" class="headerlink" title="3.已有用户增加用户组"></a>3.已有用户增加用户组</h3><p>1.usermod -G groupname username</p><h3 id="4-永久删除用户和用户组"><a href="#4-永久删除用户和用户组" class="headerlink" title="4.永久删除用户和用户组"></a>4.永久删除用户和用户组</h3><p>1.userdel test<br>2.userdel -r test<br>3.groupdel testgroup</p><h2 id="1-1-2-文件与目录"><a href="#1-1-2-文件与目录" class="headerlink" title="1.1.2 文件与目录"></a>1.1.2 文件与目录</h2><h3 id="1-切换"><a href="#1-切换" class="headerlink" title="1.切换"></a>1.切换</h3><p>1.cd /home<br>2.cd %返回上级<br>3.cd ../..<br>4.pwd   %显示当前目录名称</p><h3 id="2-查看目录文件信息"><a href="#2-查看目录文件信息" class="headerlink" title="2.查看目录文件信息"></a>2.查看目录文件信息</h3><p>1.ls -a %所有文件<br>2.ls -al%详细信息<br>3.ls -alrt%按时间（l：详细列表 r:反向序列  t:按时间）</p><h3 id="3-文件目录复制"><a href="#3-文件目录复制" class="headerlink" title="3.文件目录复制"></a>3.文件目录复制</h3><p>1.cp file1<br>2.cp -a dir1%目录<br>3.cp -a tem/dir1 .%复制目录到当前目录</p><h3 id="4-文件目录的创建、移动、删除"><a href="#4-文件目录的创建、移动、删除" class="headerlink" title="4.文件目录的创建、移动、删除"></a>4.文件目录的创建、移动、删除</h3><p>1.mkdir dir1<br>2.mkdir -p /tmp/dir1/dir2<br>3.mv dir1  dir2%重命名<br>4.rm -f file1%删除文件名为file1 文件<br>5.rm -rf dir2 %删除dir2 目录和子目录内容</p><h3 id="5-查看文件内容"><a href="#5-查看文件内容" class="headerlink" title="5.查看文件内容"></a>5.查看文件内容</h3><p>1.cat file<br>2.tac file<br>3.more file%查看长文件内容</p><h3 id="6-文本内容处理"><a href="#6-文本内容处理" class="headerlink" title="6.文本内容处理"></a>6.文本内容处理</h3><p>1.grep str /tmp/test<br>2.grep ^str /tmp/test%str 开始的文件<br>3.grep [0-9] /tmp/test%包含数字的<br>4.grep str -r /tmp/*%在目录 tmp以及子目录查找<br>5.diff file1 file2%文本间不同的<br>6.sdiff file1 file2%一对比的方式显示不同</p><h3 id="7-Vim文件编辑器"><a href="#7-Vim文件编辑器" class="headerlink" title="7.Vim文件编辑器"></a>7.Vim文件编辑器</h3><p>1.vim test.txt<br>2.按 i 键 进入</p><h3 id="8-查询"><a href="#8-查询" class="headerlink" title="8.查询"></a>8.查询</h3><p>1.find / -name file1<br>2.find / -user user1<br>3.find /home/user1 -name *.bin %查询扩展名 .bin 文件</p><h3 id="9-压缩、解压"><a href="#9-压缩、解压" class="headerlink" title="9.压缩、解压"></a>9.压缩、解压</h3><p>1.tar -cvf archive.tar file %文件file压缩成archive.tar<br>    （C:建立压缩文档 V：显示所有过程  F显示档案名称）<br>2.tar -tf archive.tar%显示一个包的内容<br>3.tar -xvf archive.tar%解压一个包<br>4.tar -xavf archive.tar.gz%解压.tar.gz压缩包<br>    （X:解压  tar.gz:压缩/解压的为tar.gz 文件）<br>5.tar -xjvf archive.tar.bz2 -C /tmp<br>                %把压缩包解压到 /tmp 目录下</p><h3 id="10-修改文件目录权限"><a href="#10-修改文件目录权限" class="headerlink" title="10.修改文件目录权限"></a>10.修改文件目录权限</h3><p>1.chmod 777 test %test文件修改为EveryOne可用<br>2.chmod a+rwx test%同上<br>    （a：所有用户 g:同组用户 o:其他用户r:读w:写x：执行 ）<br>3.chgrp student /opt/book%把/opt/book用户组修改为 student<br>4.chown zhangsan /opt/book% /opt/book文件所有者修改为  zhangsan</p><p>2.1.3 主机名</p><h3 id="11-查找主机名"><a href="#11-查找主机名" class="headerlink" title="11.查找主机名"></a>11.查找主机名</h3><p>1.hostname </p><h3 id="12-永久修改主机名"><a href="#12-永久修改主机名" class="headerlink" title="12.永久修改主机名"></a>12.永久修改主机名</h3><p>1.hostnamectl set-hostname hadoop<br>  cat /etc/hostname<br>2.vim /etc/hosts<br>  cat /etc/hosts</p><h2 id="1-1-4分区管理"><a href="#1-1-4分区管理" class="headerlink" title="1.1.4分区管理"></a>1.1.4分区管理</h2><h3 id="1-查看硬盘使用状况"><a href="#1-查看硬盘使用状况" class="headerlink" title="1.查看硬盘使用状况"></a>1.查看硬盘使用状况</h3><p>1.df -h %-h:显示为易读格式</p><h3 id="2-硬盘分区"><a href="#2-硬盘分区" class="headerlink" title="2.硬盘分区"></a>2.硬盘分区</h3><p>1.fdisk -l%查看分区<br>2.fdisk /dev/sda3%使用fdisk管理分区</p><h3 id="3-挂载硬盘"><a href="#3-挂载硬盘" class="headerlink" title="3.挂载硬盘"></a>3.挂载硬盘</h3><p>1.mkdir /mnt/vcdrom<br>2.mount</p><h2 id="1-1-5文件目录访问权限"><a href="#1-1-5文件目录访问权限" class="headerlink" title="1.1.5文件目录访问权限"></a>1.1.5文件目录访问权限</h2><h3 id="1-查看文件和目录访问权限"><a href="#1-查看文件和目录访问权限" class="headerlink" title="1.查看文件和目录访问权限"></a>1.查看文件和目录访问权限</h3><pre><code>    ls  -l /boot</code></pre><h3 id="2-修改文件和目录访问权限"><a href="#2-修改文件和目录访问权限" class="headerlink" title="2.修改文件和目录访问权限"></a>2.修改文件和目录访问权限</h3><pre><code>    chown [选项] 属主[.属主] &lt;文件名&gt;    -c文件更改后显示动作信息（历史）     -R 对目录以及子目录，文件递归设置    -v输出详细内容        chgrp [选项] 属主[.属主] &lt;文件名&gt;    -c     -R    chmod [选项] 属主[.属主] &lt;文件名&gt;    -c    -R    -v    -help        u        g        o        a        操作模式：+,-,=        权限组合：r,w,x        例题：增加文件/root/first.sh的属性可执行权限，              增加文件/root/file1.txt的属组可写权限            chmod u+x /root/first.sh            chmod g+w /root/file1.txt         例题：用数字赋予/root/student1.txt仅有属主可读写权限            chmod 600 /root/test.sh</code></pre><h2 id="1-1-6用户命令管理用户"><a href="#1-1-6用户命令管理用户" class="headerlink" title="1.1.6用户命令管理用户"></a>1.1.6用户命令管理用户</h2><h3 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1.创建用户"></a>1.创建用户</h3><pre><code>    useradd [选项] &lt;用户&gt;    -c comment注释信息     -g group主群组    -G group附加组    -d home主目录路径    -s shell登录Shell环境/bin/bash    -u UID用户ID    -e expire过期日期，默认null xxxx-xx-xx    -f inactive过期后可用天数</code></pre><h3 id="2-删除用户"><a href="#2-删除用户" class="headerlink" title="2.删除用户"></a>2.删除用户</h3><pre><code>    userdel [选项] &lt;用户&gt;    -r删除时是否删除主目录    rm -r userA</code></pre><h3 id="3-密码设置与修改"><a href="#3-密码设置与修改" class="headerlink" title="3.密码设置与修改"></a>3.密码设置与修改</h3><pre><code>    passwd [选项] &lt;用户&gt;    -l name锁住普通用户    -u name 解锁普通用户    -x dayMax使用时间    -n dayMin使用时间    -d 删除用户密码</code></pre><h3 id="4-用户属性修改"><a href="#4-用户属性修改" class="headerlink" title="4.用户属性修改"></a>4.用户属性修改</h3><pre><code>    usermod [选项] &lt;用户&gt;    -c comment修改用户注释    -g group修改用户主组    -G group修改用户附加组    -l name修改用户账号名    -L 锁定用户    -U解锁用户    -u UID修改用户ID值    -d home修改用户主目录路径    -p passwd修改用户密码</code></pre><h3 id="5-显示当前用户"><a href="#5-显示当前用户" class="headerlink" title="5.显示当前用户"></a>5.显示当前用户</h3><pre><code>    whoami6.显示用户信息    id [选项] &lt;用户&gt;    -u显示id    -g显示主群组id    -G显示附加群组id    </code></pre><h2 id="1-1-7使用命令管理用户组"><a href="#1-1-7使用命令管理用户组" class="headerlink" title="1.1.7使用命令管理用户组"></a>1.1.7使用命令管理用户组</h2><h3 id="1-创建用户组-1"><a href="#1-创建用户组-1" class="headerlink" title="1.创建用户组"></a>1.创建用户组</h3><pre><code>    groupadd [选项] &lt;用户&gt;    -g gid 用户组id    -r 建立系统组</code></pre><h3 id="2-删除用户组"><a href="#2-删除用户组" class="headerlink" title="2.删除用户组"></a>2.删除用户组</h3><pre><code>    groupdel &lt;用户组名&gt;需要删除所有在内用户</code></pre><h3 id="3-修改用户组"><a href="#3-修改用户组" class="headerlink" title="3.修改用户组"></a>3.修改用户组</h3><pre><code>    groupmod [选项] &lt;用户&gt;    -g id 修改用户组中添加用户    -n name用户组中删除用户</code></pre><h3 id="4-用户组成员添加-x2F-删除"><a href="#4-用户组成员添加-x2F-删除" class="headerlink" title="4.用户组成员添加/删除"></a>4.用户组成员添加/删除</h3><pre><code>    gpasswd [选项] &lt;用户&gt;    -a name向用户组添加用户    -d name从用户组删除用户</code></pre><h3 id="5-用户组查询"><a href="#5-用户组查询" class="headerlink" title="5.用户组查询"></a>5.用户组查询</h3><pre><code>    groups [用户名]    groups userA第一个为主组</code></pre><h2 id="1-1-8使用fdisk命令分区"><a href="#1-1-8使用fdisk命令分区" class="headerlink" title="1.1.8使用fdisk命令分区"></a>1.1.8使用fdisk命令分区</h2><pre><code>fdisk [选项] [磁盘设备文件]fdisk -l例题：在磁盘/dev/sdb 创建3分区，1扩展分区。（1区10GB，2,3分区8GB，其余为扩展分区）</code></pre><h3 id="1-执行分区命令"><a href="#1-执行分区命令" class="headerlink" title="1.执行分区命令"></a>1.执行分区命令</h3><pre><code>    fdisk /dev/sdb</code></pre><h3 id="2-查询帮助信息"><a href="#2-查询帮助信息" class="headerlink" title="2.查询帮助信息"></a>2.查询帮助信息</h3><pre><code>    m</code></pre><h3 id="3-创建第1个主分区"><a href="#3-创建第1个主分区" class="headerlink" title="3.创建第1个主分区"></a>3.创建第1个主分区</h3><pre><code>    n    p    Enter</code></pre><h3 id="4-创建扩展分区"><a href="#4-创建扩展分区" class="headerlink" title="4.创建扩展分区"></a>4.创建扩展分区</h3><pre><code>    n    e    Enter</code></pre><h3 id="5-显示分区信息"><a href="#5-显示分区信息" class="headerlink" title="5.显示分区信息"></a>5.显示分区信息</h3><pre><code>    p</code></pre><h3 id="6-结束创建分区"><a href="#6-结束创建分区" class="headerlink" title="6.结束创建分区"></a>6.结束创建分区</h3><pre><code>    w</code></pre><pre class="line-numbers language-none"><code class="language-none">1.例题在扩展分区建立2逻辑分区，第1个逻辑分区8G，其余为第2个逻辑分区（1）执行分区命令 fdisk /dev/sdb（2）创建第1个逻辑分区 n Enter（3）创建第2个逻辑分区 n Enter（4）显示分区结果 p（5）结束创建分区 w2.例题删除第2逻辑分区（1）对指定磁盘/dev/sdb执行分区命令 fdisk /dev/sdb（2）输入d 进入删除分区子命令 d（3）输入要删除的分区代码 6（4）显示分区信息 p（5）保存当前分区信息并退出分区命令 w<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Linux" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/Linux/"/>
    
    <category term="基础命令" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/Linux/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="Linux" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/Linux/"/>
    
    <category term="基础" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java, the world&#39;s best programming language</title>
    <link href="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2022/12/25/Java-the-best-langage-at-the-World/"/>
    <id>https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/2022/12/25/Java-the-best-langage-at-the-World/</id>
    <published>2022-12-25T14:10:52.000Z</published>
    <updated>2023-02-10T05:02:07.018Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-Java基础"><a href="#1-Java基础" class="headerlink" title="1.Java基础"></a>1.Java基础</h2><h3 id="1-关键词"><a href="#1-关键词" class="headerlink" title="1.关键词"></a>1.关键词</h3><h4 id="1-return"><a href="#1-return" class="headerlink" title="1.return"></a>1.return</h4><p>Java中return 用法小结</p><pre class="line-numbers language-none"><code class="language-none">package test;return：必须放在方法中//return的主要作用有两点：//1.返回方法指定类型值//2.用于方法结束的标志,return 后面的语句不会被执行public class Test001 {   public static void main(String[] args) {       int i;       System.out.println("return语句之前"+getInfo());       for (i = 0; i &lt; 5; i++) {           if(i==3){               return;//无返回类型，用于方法的结束           }           System.out.println(String.format("i=%d",i));       }       //return 之后的语句将不会被执行       System.out.println("return语句之后"+getInfo());   }   public static int getInfo(){       return 1;//有返回类型，返回方法指定类型的返回值   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-进制转换"><a href="#2-进制转换" class="headerlink" title="2.进制转换"></a>2.进制转换</h4><pre class="line-numbers language-none"><code class="language-none">10进制转化其他进制对应的方法,参数:n(原10进制数据),r(进制),返回值10进制转2进制Integer.toBinaryString(n);一个二进制字符串.10进制转8进制Integer.toOctalString(n);一个八进制字符串10进制转16进制Integer.toHexString(n);一个16进制字符串10进制转 r 进制Integer.toString(100, 16);一个r进制字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-数组"><a href="#2-数组" class="headerlink" title="2.数组"></a>2.数组</h3><h4 id="1-List"><a href="#1-List" class="headerlink" title="1.List"></a>1.List</h4><h5 id="1-List数据的指定修改"><a href="#1-List数据的指定修改" class="headerlink" title="1.List数据的指定修改"></a>1.List数据的指定修改</h5><pre class="line-numbers language-none"><code class="language-none">package ArrayForiter;import java.util.*;import java.util.stream.*;import org.junit.jupiter.api.Test;public class ListItemRemoveTests { public List&lt;String&gt; initList = Arrays.asList("360","aliyun","baidu","bilibili","amazon","bytedance","Tencent"); /*  * 增强for循环删除 ConcurrentModificationException  */ public void test1() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  for(String element : list) {   if(element.startsWith("b")) {    list.remove(element);   }  }  System.out.println(list); } @Test public void test1_1() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  list.forEach ((e) -&gt; {   if(e.startsWith("b")) {    list.remove(e);   }  });  System.out.println(list);   }  /* 低级for size, 删除不全。（功能不完善的 bug */ public void test2() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  for (int i = 0; i &lt; list.size(); i++) {   String str = list.get(i);   if(str.startsWith("b")) {    list.remove(i);   }  }  System.out.println(list); }  /*   * 角标越界  * 无法阻止 for的i增大  */ public void test3() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  int size = list.size();  for (int i = 0; i &lt; size; i++) {   String str = list.get(i);   if(str.startsWith("b")) {    list.remove(i);   }  }  System.out.println(list); } /*  * 逆序删除   * 从后面开始，可以改变 for 增大导致的角标越界  */ public void test4() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  for(int i=list.size()-1;i&gt;0;i--) {   String str = list.get(i);   if(str.startsWith("b")) {    list.remove(i);   }  }  System.out.println(list); } /*  * 调用 iteration 提供的方法  */ public void test5() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  for(Iterator&lt;String&gt; iterator = list.iterator();iterator.hasNext();) {   String str = iterator.next();   if(str.startsWith("b")) {    iterator.remove();   }  }  System.out.println(list); }  public void test5_1() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  for(Iterator&lt;String&gt; iterator = list.iterator();iterator.hasNext();) {   String str = iterator.next();   if(str.startsWith("b")) {    list.remove(str);  // 用的 iterat 方法 但没在关键点用iterator.remove();   }  }  System.out.println(list); } /*  * filter 过滤   * 得到一定量的反向元素  */ public void test6() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  list = list.stream().filter(e -&gt; !e.startsWith("b")).collect(Collectors.toList());  System.out.println(list); }   public static void main(String[] s) {  ListItemRemoveTests a = new ListItemRemoveTests();    /*   * 原因： Iterator迭代时不能remove。    * 是同步操作问题  两者修改次数不一致   */  //a.test1();  //a.test1_1();    //a.test2();  //a.test3();    a.test4();  a.test5();    /*   * 用的 iterat 方法 但没在关键点用iterator.remove();   */  //a.test5_1();    a.test6(); }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Java策略模式"><a href="#2-Java策略模式" class="headerlink" title="2.Java策略模式"></a>2.Java策略模式</h2><p>IStack.java</p><pre class="line-numbers language-none"><code class="language-none">public interface IStack&lt;T&gt; {  /**  * 初始化栈  * @param maxSize: 数组的最大长度。栈的最大长度。  */ public void initStack(int maxSize);  /**  * 销毁栈  */ public void destroyStack();  /**  * 添加数据，进栈。  * @param data 要被添加的数据.类型不确定，所以用泛型。  */ public void push(T data);  /**  * 删除栈顶元素  */ public void pop(); /**  * 判断栈是否为空  * @return true or false.  */ public boolean isEmpty();  /**  * 获取栈顶元素  * @return 栈顶数据元素。数据元素的类型不确定，所以是泛型。  */ public T getTop();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Stack.java</p><pre class="line-numbers language-none"><code class="language-none">public class Stack&lt;T&gt; implements IStack&lt;T&gt; { private int length;// 元素个数。栈的长度。 private T arr[];// 用于存放数据的数组。因为是顺序栈，所以用数组。数组取值是用角标 arr[0] arr[1] ... private int maxSize; /**  * 构造函数  *   * @param maxSize  *            数组的最大长度  */ public Stack(int maxSize) {  this.maxSize = maxSize;  initStack(maxSize); } @Override public void initStack(int maxSize) {  this.maxSize = maxSize;  // 初始化数组。为什么要初始化数组，因为数组不初始化，就没有分配内存空间，是一个空对象，也就是空指针。  arr = (T[]) new Object[maxSize]; } @Override public void destroyStack() {  // TODO Auto-generated method stub } // 添加值 1判断 原有数值长度 是否 已满于最大数组长 // 2 数值 赋予 原有数组末，数组长增加 @Override public void push(T data) {  if(this.length &gt;= this.maxSize){   System.out.println("已满");   return;  }  arr[this.length] = data;  this.length++; } // 添加值 1判断 原有数值长度 是否 为零 // 2 数值 赋予 原有数组 次末，数组长减少 @Override public void pop() {  if(this.length == 0){   System.out.println("已经到底，无法pop");   return;  }  arr[this.length-1] = null;  this.length--; } // 指针 1判断长度 如果为零返回 否则 返回数组 次长度 @Override public T getTop() {  if(this.length == 0){   return null;   }  return this.arr[this.length-1];     } @Override public boolean isEmpty() {  return this.length == 0; }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Test.java</p><pre class="line-numbers language-none"><code class="language-none">public class Test {  public static void main(String[] args) {  Stack&lt;Integer&gt; s = new Stack&lt;&gt;(1024); // 指定栈的长度最大值是1024.      s.push(1);  s.push(2);  s.push(3);    s.pop();  s.pop();    Integer top = s.getTop();  System.out.println(top); }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">栈的添加删除</summary>
    
    
    
    <category term="Java" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/Java/"/>
    
    <category term="数据结构" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/Java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="策略模式" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/categories/Java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Java" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/Java/"/>
    
    <category term="数据结构" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="策略模式" scheme="https://github.com/Wabi-Sabifag/Wabi-Sabifag.github.io/tags/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
