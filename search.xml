<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ErrorReport</title>
      <link href="/2023/10/10/ErrorReport/"/>
      <url>/2023/10/10/ErrorReport/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="2023"><a href="#2023" class="headerlink" title="2023"></a>2023</h1><h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><h3 id="10-1"><a href="#10-1" class="headerlink" title="10"></a>10</h3><p><img src="/../ErrorReport/error1.png" alt="POJO 数据类型和数据库数据类型不同导致 Controller Serivece 无法运作"></p>]]></content>
      
      
      <categories>
          
          <category> ErrorReport </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ErrorReport </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RequirementSpecification</title>
      <link href="/2023/08/23/RequirementSpecification/"/>
      <url>/2023/08/23/RequirementSpecification/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul><li>1.需求分析<br>  产品原型、需求规格说明书</li><li>2.设计<br>  产品文档、UI界面设计、概要设计、详细设计、数据库设计</li><li>3.编码<br>  项目代码，单元测试</li><li>4.测试<br>  测试用例、测试报告</li><li>5.线上运维<br>  软件环境安装、配置</li></ul><p>SSMP 整合案例</p><ul><li>实体类开发                使用Lombok 快速制作实体类</li><li>Dao 开发                  整合MyBatisPlus ，制作数据层测试类</li><li>Service 开发              基于MyBatisPlus 进行增量开发，制作业务层测试类</li><li>Controller 开发           基于Restful 开发，使用PostMan 测试接口功能</li><li>Controller 开发           前后端开发协议制作</li><li>页面开发                  基于VUE，Element制作，前后端联，页面数据处理<ul><li>CRUD 分页，查询操作</li></ul></li><li>项目异常处理</li><li>按条件查询                页面功能调整，Controller修正功能，Service修正功能<pre class="line-numbers language-none"><code class="language-none">目录1 导言    1.1 目的    1.2 范围    1.3 编写说明    1.4 术语定义    1.5 引用标准    1.6 参考资料    1.7 版本更新信息2 系统定义    2.1 项目来源及背景    2.2 项目要达到的目标    2.3 系统结构3 应用环境    3.1 系统运行网络环境    3.2 系统运行硬件环境    3.3 系统运行软件环境4. 功能规格    4.1 角色（Actor）定义        4.1.1 应聘者        4.1.2 普通用户        4.1.3 数据库    4.2 系统上UseCase图    4.3 客服端子系统        4.3.1 职位选择        4.3.2 管理用户        4.3.3 数据库    4.4 管理端子系统        4.4.1 登录管理        4.4.2 题库管理        4.4.3 试卷管理        4.4.4 职位发布        4.4.5 简历管理功能        4.4.6 面试管理功能        4.4.7 用户管理5 性能需求    5.1 界面需求    5.2 响应时间需求    5.3 可荐性需求    5.4 开放性需求    5.5 可扩展性需求    5.6 系统安全性需求<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 测试需求文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MybatisPlus</title>
      <link href="/2023/08/22/MybatisPlus/"/>
      <url>/2023/08/22/MybatisPlus/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1、了解Mybatis-Plus"><a href="#1、了解Mybatis-Plus" class="headerlink" title="1、了解Mybatis-Plus"></a>1、了解Mybatis-Plus</h1><h2 id="1-1、Mybatis-Plus介绍"><a href="#1-1、Mybatis-Plus介绍" class="headerlink" title="1.1、Mybatis-Plus介绍"></a>1.1、Mybatis-Plus介绍</h2><p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高<br>效率而生。<br>官网：<a href="https://mybatis.plus/">https://mybatis.plus/</a> 或 <a href="https://mp.baomidou.com/">https://mp.baomidou.com/</a></p><h2 id="1-2、代码以及文档"><a href="#1-2、代码以及文档" class="headerlink" title="1.2、代码以及文档"></a>1.2、代码以及文档</h2><p>文档地址：<a href="https://mybatis.plus/guide/">https://mybatis.plus/guide/</a><br>源码地址：<a href="https://github.com/baomidou/mybatis-plus">https://github.com/baomidou/mybatis-plus</a></p><h2 id="1-3、特性"><a href="#1-3、特性" class="headerlink" title="1.3、特性"></a>1.3、特性</h2><ul><li>无侵入：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li>损耗小：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li>强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，<br> 更有强大的条件构造器，满足各类使用需求</li><li>支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li>支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、<br>SQLServer2005、SQLServer 等多种数据库</li><li>支持主键自动生成：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解<br>决主键问题</li><li>支持 XML 热加载：Mapper 对应的 XML 支持热加载，对于简单的 CRUD 操作，甚至可以无 XML 启动</li><li>支持 ActiveRecord 模式：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操<br>作</li><li>支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ）</li><li>支持关键词自动转义：支持数据库关键词（order、key……）自动转义，还可自定义关键词</li><li>内置代码生成器：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，<br> 支持模板引擎，更有超多自定义配置等您来使用</li><li>内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List<br>查询</li><li>内置性能分析插件：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li>内置全局拦截插件：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li><li>内置 Sql 注入剥离器：支持 Sql 注入剥离，有效预防 Sql 注入攻击</li></ul><h2 id="1-4、架构"><a href="#1-4、架构" class="headerlink" title="1.4、架构"></a>1.4、架构</h2><p><img src="/../MybatisPlus/1.png" alt="MybatisPlus架构分析图"></p><h2 id="1-5、作者"><a href="#1-5、作者" class="headerlink" title="1.5、作者"></a>1.5、作者</h2><p>Mybatis-Plus是由baomidou（苞米豆）组织开发并且开源的，目前该组织大概有30人左右。<br>码云地址：<a href="https://gitee.com/organizations/baomidou">https://gitee.com/organizations/baomidou</a><br><img src="/../MybatisPlus/2.png" alt="MybatisPlus团队"></p><h1 id="2、快速开始"><a href="#2、快速开始" class="headerlink" title="2、快速开始"></a>2、快速开始</h1><p>对于Mybatis整合MP有常常有三种用法，分别是Mybatis+MP、Spring+Mybatis+MP、Spring Boot+Mybatis+MP。</p><h2 id="2-1、创建数据库以及表"><a href="#2-1、创建数据库以及表" class="headerlink" title="2.1、创建数据库以及表"></a>2.1、创建数据库以及表</h2><p><img src="/../MybatisPlus/3.png" alt="数据库的创建"></p><pre class="line-numbers language-none"><code class="language-none">-- 创建测试表CREATE TABLE `tb_user` (`id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键ID',`user_name` varchar(20) NOT NULL COMMENT '用户名',`password` varchar(20) NOT NULL COMMENT '密码',`name` varchar(30) DEFAULT NULL COMMENT '姓名',`age` int(11) DEFAULT NULL COMMENT '年龄',`email` varchar(50) DEFAULT NULL COMMENT '邮箱',PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;-- 插入测试数据INSERT INTO `tb_user` (`id`, `user_name`, `password`, `name`, `age`, `email`) VALUES('1', 'zhangsan', '123456', '张三', '18', 'test1@itcast.cn');INSERT INTO `tb_user` (`id`, `user_name`, `password`, `name`, `age`, `email`) VALUES('2', 'lisi', '123456', '李四', '20', 'test2@itcast.cn');INSERT INTO `tb_user` (`id`, `user_name`, `password`, `name`, `age`, `email`) VALUES('3', 'wangwu', '123456', '王五', '28', 'test3@itcast.cn');INSERT INTO `tb_user` (`id`, `user_name`, `password`, `name`, `age`, `email`) VALUES('4', 'zhaoliu', '123456', '赵六', '21', 'test4@itcast.cn');INSERT INTO `tb_user` (`id`, `user_name`, `password`, `name`, `age`, `email`) VALUES('5', 'sunqi', '123456', '孙七', '24', 'test5@itcast.cn');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2、创建工程"><a href="#2-2、创建工程" class="headerlink" title="2.2、创建工程"></a>2.2、创建工程</h2><pre class="line-numbers language-none"><code class="language-none">导入依赖：&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0"xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"xsi:schemaLocation="http://maven.apache.org/POM/4.0.0http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;groupId&gt;cn.itcast.mp&lt;/groupId&gt;&lt;artifactId&gt;itcast-mybatis-plus&lt;/artifactId&gt;&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;modules&gt;&lt;module&gt;itcast-mybatis-plus-simple&lt;/module&gt;&lt;/modules&gt;&lt;packaging&gt;pom&lt;/packaging&gt;&lt;dependencies&gt;&lt;!-- mybatis-plus插件依赖 --&gt;&lt;dependency&gt;&lt;groupId&gt;com.baomidou&lt;/groupId&gt;&lt;artifactId&gt;mybatis-plus&lt;/artifactId&gt;&lt;version&gt;3.1.1&lt;/version&gt;&lt;/dependency&gt;&lt;!-- MySql --&gt;&lt;dependency&gt;&lt;groupId&gt;mysql&lt;/groupId&gt;&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;version&gt;5.1.47&lt;/version&gt;&lt;/dependency&gt;&lt;!-- 连接池 --&gt;&lt;dependency&gt;&lt;groupId&gt;com.alibaba&lt;/groupId&gt;&lt;artifactId&gt;druid&lt;/artifactId&gt;&lt;version&gt;1.0.11&lt;/version&gt;&lt;/dependency&gt;&lt;!--简化bean代码的工具包--&gt;&lt;dependency&gt;&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&lt;artifactId&gt;lombok&lt;/artifactId&gt;&lt;optional&gt;true&lt;/optional&gt;&lt;version&gt;1.18.4&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;junit&lt;/groupId&gt;&lt;artifactId&gt;junit&lt;/artifactId&gt;&lt;version&gt;4.12&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.slf4j&lt;/groupId&gt;&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;&lt;version&gt;1.6.4&lt;/version&gt;&lt;/dependency&gt;&lt;/dependencies&gt;&lt;build&gt;&lt;plugins&gt;&lt;plugin&gt;&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&lt;configuration&gt;&lt;source&gt;1.8&lt;/source&gt;&lt;target&gt;1.8&lt;/target&gt;&lt;/configuration&gt;&lt;/plugin&gt;&lt;/plugins&gt;&lt;/build&gt;&lt;/project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3、Mybatis-MP"><a href="#2-3、Mybatis-MP" class="headerlink" title="2.3、Mybatis + MP"></a>2.3、Mybatis + MP</h2><p>下面演示，通过纯Mybatis与Mybatis-Plus整合。</p><h3 id="2-3-1、创建子Module"><a href="#2-3-1、创建子Module" class="headerlink" title="2.3.1、创建子Module"></a>2.3.1、创建子Module</h3><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0"xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"xsi:schemaLocation="http://maven.apache.org/POM/4.0.0http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;&lt;parent&gt;&lt;artifactId&gt;itcast-mybatis-plus&lt;/artifactId&gt;&lt;groupId&gt;cn.itcast.mp&lt;/groupId&gt;&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;/parent&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;packaging&gt;jar&lt;/packaging&gt;&lt;artifactId&gt;itcast-mybatis-plus-simple&lt;/artifactId&gt;&lt;/project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>log4j.properties：</p><pre class="line-numbers language-none"><code class="language-none">log4j.rootLogger=DEBUG,A1log4j.appender.A1=org.apache.log4j.ConsoleAppenderlog4j.appender.A1.layout=org.apache.log4j.PatternLayoutlog4j.appender.A1.layout.ConversionPattern=[%t] [%c]-[%p] %m%n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-2、Mybatis实现查询User"><a href="#2-3-2、Mybatis实现查询User" class="headerlink" title="2.3.2、Mybatis实现查询User"></a>2.3.2、Mybatis实现查询User</h3><p>第一步，编写mybatis-config.xml文件：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE configurationPUBLIC "-//mybatis.org//DTD Config 3.0//EN""http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;configuration&gt;&lt;environments default="development"&gt;&lt;environment id="development"&gt;&lt;transactionManager type="JDBC"/&gt;&lt;dataSource type="POOLED"&gt;&lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;&lt;property name="url" value="jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL=false"/&gt;&lt;property name="username" value="root"/&gt;&lt;property name="password" value="root"/&gt;&lt;/dataSource&gt;&lt;/environment&gt;&lt;/environments&gt;&lt;mappers&gt;&lt;mapper resource="UserMapper.xml"/&gt;&lt;/mappers&gt;&lt;/configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步，编写User实体对象：（这里使用lombok进行了进化bean操作）</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp.simple.pojo;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;@Data@NoArgsConstructor@AllArgsConstructorpublic class User {private Long id;private String userName;private String password;private String name;private Integer age;private String email;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步，编写UserMapper接口：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp.simple.mapper;import cn.itcast.mp.simple.pojo.User;import java.util.List;public interface UserMapper {List&lt;User&gt; findAll();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第四步，编写UserMapper.xml文件：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapperPUBLIC "-//mybatis.org//DTD Mapper 3.0//EN""http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="cn.itcast.mp.simple.mapper.UserMapper"&gt;&lt;select id="findAll" resultType="cn.itcast.mp.simple.pojo.User"&gt;select * from tb_user&lt;/select&gt;&lt;/mapper&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第五步，编写TestMybatis测试用例：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp.simple;import cn.itcast.mp.simple.mapper.UserMapper;import cn.itcast.mp.simple.pojo.User;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Test;import java.io.InputStream;import java.util.List;public class TestMybatis{@Testpublic void testUserList() throws Exception{String resource = "mybatis-config.xml";InputStream inputStream = Resources.getResourceAsStream(resource);SqlSessionFactory sqlSessionFactory = newSqlSessionFactoryBuilder().build(inputStream);SqlSession sqlSession = sqlSessionFactory.openSession();UserMapper userMapper = sqlSession.getMapper(UserMapper.class);List&lt;User&gt; list = userMapper.findAll();for (User user : list) {    System.out.println(user);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.simple.mapper.UserMapper.findAll]-[DEBUG] ==&gt; Parameters:[main] [cn.itcast.mp.simple.mapper.UserMapper.findAll]-[DEBUG] &lt;== Total: 5User(id=1, userName=null, password=123456, name=张三, age=18, email=test1@itcast.cn)User(id=2, userName=null, password=123456, name=李四, age=20, email=test2@itcast.cn)User(id=3, userName=null, password=123456, name=王五, age=28, email=test3@itcast.cn)User(id=4, userName=null, password=123456, name=赵六, age=21, email=test4@itcast.cn)User(id=5, userName=null, password=123456, name=孙七, age=24, email=test5@itcast.cn)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-3、Mybatis-MP实现查询User"><a href="#2-3-3、Mybatis-MP实现查询User" class="headerlink" title="2.3.3、Mybatis+MP实现查询User"></a>2.3.3、Mybatis+MP实现查询User</h3><p>第一步，将UserMapper继承BaseMapper，将拥有了BaseMapper中的所有方法：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp.simple.mapper;import cn.itcast.mp.simple.pojo.User;import com.baomidou.mybatisplus.core.mapper.BaseMapper;import java.util.List;public interface UserMapper extends BaseMapper&lt;User&gt; {List&lt;User&gt; findAll();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步，使用MP中的MybatisSqlSessionFactoryBuilder进程构建：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp.simple;import cn.itcast.mp.simple.mapper.UserMapper;import cn.itcast.mp.simple.pojo.User;import com.baomidou.mybatisplus.core.MybatisSqlSessionFactoryBuilder;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Test;import java.io.InputStream;import java.util.List;public class TestMybatisPlus {@Testpublic void testUserList() throws Exception{String resource = "mybatis-config.xml";InputStream inputStream = Resources.getResourceAsStream(resource);//这里使用的是MP中的MybatisSqlSessionFactoryBuilderSqlSessionFactory sqlSessionFactory = newMybatisSqlSessionFactoryBuilder().build(inputStream);SqlSession sqlSession = sqlSessionFactory.openSession();UserMapper userMapper = sqlSession.getMapper(UserMapper.class);// 可以调用BaseMapper中定义的方法List&lt;User&gt; list = userMapper.selectList(null);for (User user : list) {System.out.println(user);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行报错：<br><img src="/../MybatisPlus/4.png" alt="运行报错"><br>解决：在User对象中添加@TableName，指定数据库表名</p><p><img src="/../MybatisPlus/5.png" alt="解决方法"><br>测试：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.simple.mapper.UserMapper.selectList]-[DEBUG] ==&gt; Preparing:SELECT id,user_name,password,name,age,email FROM tb_user[main] [cn.itcast.mp.simple.mapper.UserMapper.selectList]-[DEBUG] ==&gt; Parameters:[main] [cn.itcast.mp.simple.mapper.UserMapper.selectList]-[DEBUG] &lt;== Total: 5User(id=1, userName=zhangsan, password=123456, name=张三, age=18, email=test1@itcast.cn)User(id=2, userName=lisi, password=123456, name=李四, age=20, email=test2@itcast.cn)User(id=3, userName=wangwu, password=123456, name=王五, age=28, email=test3@itcast.cn)User(id=4, userName=zhaoliu, password=123456, name=赵六, age=21, email=test4@itcast.cn)User(id=5, userName=sunqi, password=123456, name=孙七, age=24, email=test5@itcast.cn)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单说明：</p><ul><li><p>由于使用了MybatisSqlSessionFactoryBuilder进行了构建，继承的BaseMapper中的方法就载入到了<br>SqlSession中，所以就可以直接使用相关的方法；</p></li><li><p>如图：<br><img src="/../MybatisPlus/6.png" alt="继承的BaseMapper中的方法"></p></li></ul><h2 id="2-4、Spring-Mybatis-MP"><a href="#2-4、Spring-Mybatis-MP" class="headerlink" title="2.4、Spring + Mybatis + MP"></a>2.4、Spring + Mybatis + MP</h2><p>引入了Spring框架，数据源、构建等工作就交给了Spring管理。</p><h3 id="2-4-1、创建子Module"><a href="#2-4-1、创建子Module" class="headerlink" title="2.4.1、创建子Module"></a>2.4.1、创建子Module</h3><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0"xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"xsi:schemaLocation="http://maven.apache.org/POM/4.0.0http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;&lt;parent&gt;&lt;artifactId&gt;itcast-mybatis-plus&lt;/artifactId&gt;&lt;groupId&gt;cn.itcast.mp&lt;/groupId&gt;&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;/parent&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;artifactId&gt;itcast-mybatis-plus-spring&lt;/artifactId&gt;&lt;properties&gt;&lt;spring.version&gt;5.1.6.RELEASE&lt;/spring.version&gt;&lt;/properties&gt;&lt;dependencies&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework&lt;/groupId&gt;&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;&lt;version&gt;${spring.version}&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework&lt;/groupId&gt;&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;&lt;version&gt;${spring.version}&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework&lt;/groupId&gt;&lt;artifactId&gt;spring-test&lt;/artifactId&gt;&lt;version&gt;${spring.version}&lt;/version&gt;&lt;/dependency&gt;&lt;/dependencies&gt;&lt;/project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-2、实现查询User"><a href="#2-4-2、实现查询User" class="headerlink" title="2.4.2、实现查询User"></a>2.4.2、实现查询User</h3><p>第一步，编写jdbc.properties</p><pre class="line-numbers language-none"><code class="language-none">jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL=falsejdbc.username=rootjdbc.password=root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步，编写applicationContext.xml</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"xmlns:context="http://www.springframework.org/schema/context"xsi:schemaLocation="http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd"&gt;&lt;context:property-placeholder location="classpath:*.properties"/&gt;&lt;!-- 定义数据源 --&gt;&lt;bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"destroy-method="close"&gt;&lt;property name="url" value="${jdbc.url}"/&gt;&lt;property name="username" value="${jdbc.username}"/&gt;&lt;property name="password" value="${jdbc.password}"/&gt;&lt;property name="driverClassName" value="${jdbc.driver}"/&gt;&lt;property name="maxActive" value="10"/&gt;&lt;property name="minIdle" value="5"/&gt;&lt;/bean&gt;&lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;&lt;bean id="sqlSessionFactory"class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"&gt;&lt;property name="dataSource" ref="dataSource"/&gt;&lt;/bean&gt;&lt;!--扫描mapper接口，使用的依然是Mybatis原生的扫描器--&gt;&lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt;&lt;property name="basePackage" value="cn.itcast.mp.simple.mapper"/&gt;&lt;/bean&gt;&lt;/beans&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步，编写User对象以及UserMapper接口：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp.simple.pojo;import com.baomidou.mybatisplus.annotation.TableName;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;@Data@NoArgsConstructor@AllArgsConstructor@TableName("tb_user")public class User {private Long id;private String userName;private String password;private String name;private Integer age;private String email;}package cn.itcast.mp.simple.mapper;import cn.itcast.mp.simple.pojo.User;import com.baomidou.mybatisplus.core.mapper.BaseMapper;public interface UserMapper extends BaseMapper&lt;User&gt; {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第四步，编写测试用例：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp.simple;import cn.itcast.mp.simple.mapper.UserMapper;import cn.itcast.mp.simple.pojo.User;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import java.util.List;@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(locations = "classpath:applicationContext.xml")public class TestSpringMP {@Autowiredprivate UserMapper userMapper;@Testpublic void testSelectList(){List&lt;User&gt; users = this.userMapper.selectList(null);for (User user : users) {System.out.println(user);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.simple.mapper.UserMapper.selectList]-[DEBUG] ==&gt; Preparing:SELECT id,user_name,password,name,age,email FROM tb_user[main] [cn.itcast.mp.simple.mapper.UserMapper.selectList]-[DEBUG] ==&gt; Parameters:[main] [cn.itcast.mp.simple.mapper.UserMapper.selectList]-[DEBUG] &lt;== Total: 5[main] [org.mybatis.spring.SqlSessionUtils]-[DEBUG] Closing non transactionalSqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@74287ea3]User(id=1, userName=zhangsan, password=123456, name=张三, age=18,email=test1@itcast.cn)User(id=2, userName=lisi, password=123456, name=李四, age=20, email=test2@itcast.cn)User(id=3, userName=wangwu, password=123456, name=王五, age=28, email=test3@itcast.cn)User(id=4, userName=zhaoliu, password=123456, name=赵六, age=21, email=test4@itcast.cn)User(id=5, userName=sunqi, password=123456, name=孙七, age=24, email=test5@itcast.cn)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5、SpringBoot-Mybatis-MP"><a href="#2-5、SpringBoot-Mybatis-MP" class="headerlink" title="2.5、SpringBoot + Mybatis + MP"></a>2.5、SpringBoot + Mybatis + MP</h2><p>使用SpringBoot将进一步的简化MP的整合，需要注意的是，由于使用SpringBoot需要继承parent，所以需要重新创<br>建工程，并不是创建子Module。</p><h3 id="2-5-1、创建工程"><a href="#2-5-1、创建工程" class="headerlink" title="2.5.1、创建工程"></a>2.5.1、创建工程</h3><h3 id="2-5-2、导入依赖"><a href="#2-5-2、导入依赖" class="headerlink" title="2.5.2、导入依赖"></a>2.5.2、导入依赖</h3><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0"xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"xsi:schemaLocation="http://maven.apache.org/POM/4.0.0http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;parent&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&lt;version&gt;2.1.4.RELEASE&lt;/version&gt;&lt;/parent&gt;&lt;groupId&gt;cn.itcast.mp&lt;/groupId&gt;&lt;artifactId&gt;itcast-mp-springboot&lt;/artifactId&gt;&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;dependencies&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;&lt;exclusions&gt;&lt;exclusion&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;&lt;/exclusion&gt;&lt;/exclusions&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;!--简化代码的工具包--&gt;&lt;dependency&gt;&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&lt;artifactId&gt;lombok&lt;/artifactId&gt;&lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;&lt;!--mybatis-plus的springboot支持--&gt;&lt;dependency&gt;&lt;groupId&gt;com.baomidou&lt;/groupId&gt;&lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;&lt;version&gt;3.1.1&lt;/version&gt;&lt;/dependency&gt;&lt;!--mysql驱动--&gt;&lt;dependency&gt;&lt;groupId&gt;mysql&lt;/groupId&gt;&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;version&gt;5.1.47&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.slf4j&lt;/groupId&gt;&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;&lt;/dependency&gt;&lt;/dependencies&gt;&lt;build&gt;&lt;plugins&gt;&lt;plugin&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&lt;/plugin&gt;&lt;/plugins&gt;&lt;/build&gt;&lt;/project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>log4j.properties：</p><pre class="line-numbers language-none"><code class="language-none">log4j.rootLogger=DEBUG,A1log4j.appender.A1=org.apache.log4j.ConsoleAppenderlog4j.appender.A1.layout=org.apache.log4j.PatternLayoutlog4j.appender.A1.layout.ConversionPattern=[%t] [%c]-[%p] %m%n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-3、编写application-properties"><a href="#2-5-3、编写application-properties" class="headerlink" title="2.5.3、编写application.properties"></a>2.5.3、编写application.properties</h3><pre class="line-numbers language-none"><code class="language-none">spring.application.name = itcast-mp-springbootspring.datasource.driver-class-name=com.mysql.jdbc.Driverspring.datasource.url=jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL=falsespring.datasource.username=rootspring.datasource.password=root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-4、编写pojo"><a href="#2-5-4、编写pojo" class="headerlink" title="2.5.4、编写pojo"></a>2.5.4、编写pojo</h3><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp.pojo;import com.baomidou.mybatisplus.annotation.TableName;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;@Data@NoArgsConstructor@AllArgsConstructor@TableName("tb_user")public class User {private Long id;private String userName;private String password;private String name;private Integer age;private String email;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-5、编写mapper"><a href="#2-5-5、编写mapper" class="headerlink" title="2.5.5、编写mapper"></a>2.5.5、编写mapper</h3><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp.mapper;import cn.itcast.mp.pojo.User;import com.baomidou.mybatisplus.core.mapper.BaseMapper;public interface UserMapper extends BaseMapper&lt;User&gt; {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-6、编写启动类"><a href="#2-5-6、编写启动类" class="headerlink" title="2.5.6、编写启动类"></a>2.5.6、编写启动类</h3><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.WebApplicationType;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.builder.SpringApplicationBuilder;@MapperScan("cn.itcast.mp.mapper") //设置mapper接口的扫描包@SpringBootApplicationpublic class MyApplication {public static void main(String[] args) {SpringApplication.run(MyApplication.class, args);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-7、编写测试用例"><a href="#2-5-7、编写测试用例" class="headerlink" title="2.5.7、编写测试用例"></a>2.5.7、编写测试用例</h3><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import cn.itcast.mp.mapper.UserMapper;import cn.itcast.mp.pojo.User;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.List;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testSelect() {List&lt;User&gt; userList = userMapper.selectList(null);for (User user : userList) {System.out.println(user);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.selectList]-[DEBUG] ==&gt; Preparing: SELECTid,user_name,password,name,age,email FROM tb_user[main] [cn.itcast.mp.mapper.UserMapper.selectList]-[DEBUG] ==&gt; Parameters:[main] [cn.itcast.mp.mapper.UserMapper.selectList]-[DEBUG] &lt;== Total: 5[main] [org.mybatis.spring.SqlSessionUtils]-[DEBUG] Closing non transactionalSqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@14faa38c]User(id=1, userName=zhangsan, password=123456, name=张三, age=18, email=test1@itcast.cn)User(id=2, userName=lisi, password=123456, name=李四, age=20, email=test2@itcast.cn)User(id=3, userName=wangwu, password=123456, name=王五, age=28, email=test3@itcast.cn)User(id=4, userName=zhaoliu, password=123456, name=赵六, age=21, email=test4@itcast.cn)User(id=5, userName=sunqi, password=123456, name=孙七, age=24, email=test5@itcast.cn)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3、通用CRUD"><a href="#3、通用CRUD" class="headerlink" title="3、通用CRUD"></a>3、通用CRUD</h1><p>通过前面，我们了解到通过继承BaseMapper就可以获取到各种各样的单表操作，接下来我们将详细讲解这些<br>操作。<br><img src="/../MybatisPlus/7.png" alt="BaseMapper"></p><h2 id="3-1、插入操作"><a href="#3-1、插入操作" class="headerlink" title="3.1、插入操作"></a>3.1、插入操作</h2><h3 id="3-1-1、方法定义"><a href="#3-1-1、方法定义" class="headerlink" title="3.1.1、方法定义"></a>3.1.1、方法定义</h3><pre class="line-numbers language-none"><code class="language-none">/*** 插入一条记录** @param entity 实体对象*/int insert(T entity);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-2、测试用例"><a href="#3-1-2、测试用例" class="headerlink" title="3.1.2、测试用例"></a>3.1.2、测试用例</h3><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import cn.itcast.mp.mapper.UserMapper;import cn.itcast.mp.pojo.User;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.List;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testInsert(){User user = new User();user.setAge(20);user.setEmail("test@itcast.cn");user.setName("曹操");user.setUserName("caocao");user.setPassword("123456");int result = this.userMapper.insert(user); //返回的result是受影响的行数，并不是自增后的idSystem.out.println("result = " + result);System.out.println(user.getId()); //自增后的id会回填到对象中    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-3、测试"><a href="#3-1-3、测试" class="headerlink" title="3.1.3、测试"></a>3.1.3、测试</h3><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.insert]-[DEBUG] ==&gt; Preparing: INSERT INTOtb_user ( id, user_name, password, name, age, email ) VALUES ( ?, ?, ?, ?, ?, ? )[main] [cn.itcast.mp.mapper.UserMapper.insert]-[DEBUG] ==&gt; Parameters:1122045867793072130(Long), caocao(String), 123456(String), 曹操(String), 20(Integer),test@itcast.cn(String)[main] [cn.itcast.mp.mapper.UserMapper.insert]-[DEBUG] &lt;== Updates: 1[main] [org.mybatis.spring.SqlSessionUtils]-[DEBUG] Closing non transactionalSqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@411291e5]result = 11122045867793072130<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../MybatisPlus/8.png" alt="修正数据库ID，自增排序生成"><br>可以看到，数据已经写入到了数据库，但是，id的值不正确，我们期望的是数据库自增长，实际是MP生成了id的值<br>写入到了数据库。</p><p>如何设置id的生成策略呢？<br>MP支持的id策略：</p><pre class="line-numbers language-none"><code class="language-none">package com.baomidou.mybatisplus.annotation;import lombok.Getter;/*** 生成ID类型枚举类** @author hubin* @since 2015-11-10*/@Getterpublic enum IdType {/*** 数据库ID自增*/AUTO(0),/*** 该类型为未设置主键类型*/NONE(1),/*** 用户输入ID* &lt;p&gt;该类型可以通过自己注册自动填充插件进行填充&lt;/p&gt;*/INPUT(2),/* 以下3种类型、只有当插入对象ID 为空，才自动填充。 *//*** 全局唯一ID (idWorker)*/ID_WORKER(3),/*** 全局唯一ID (UUID)*/UUID(4),/*** 字符串全局唯一ID (idWorker 的字符串表示)*/ID_WORKER_STR(5);private final int key;IdType(int key) {this.key = key;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改User对象：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp.pojo;import com.baomidou.mybatisplus.annotation.IdType;import com.baomidou.mybatisplus.annotation.TableId;import com.baomidou.mybatisplus.annotation.TableName;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;@Data@NoArgsConstructor@AllArgsConstructor@TableName("tb_user")public class User {@TableId(type = IdType.AUTO) //指定id类型为自增长private Long id;private String userName;private String password;private String name;private Integer age;private String email;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-4、-TableField"><a href="#3-1-4、-TableField" class="headerlink" title="3.1.4、@TableField"></a>3.1.4、@TableField</h3><p>在MP中通过@TableField注解可以指定字段的一些属性，常常解决的问题有2个：<br>1、对象中的属性名和字段名不一致的问题（非驼峰）<br>2、对象中的属性字段在表中不存在的问题<br>使用<br><img src="/../MybatisPlus/9.png" alt="修正POJO和数据库名称不一致问题"></p><p>其他用法，如大字段不加入查询字段：<br><img src="/../MybatisPlus/10.png" alt="POJO查询时不显示数据库列的数据"></p><p>效果：<br><img src="/../MybatisPlus/11.png" alt="不显示数据库列的数据"></p><h2 id="3-2、更新操作"><a href="#3-2、更新操作" class="headerlink" title="3.2、更新操作"></a>3.2、更新操作</h2><p>在MP中，更新操作有2种，一种是根据id更新，另一种是根据条件更新。</p><h3 id="3-2-1、根据id更新"><a href="#3-2-1、根据id更新" class="headerlink" title="3.2.1、根据id更新"></a>3.2.1、根据id更新</h3><p>方法定义：</p><pre class="line-numbers language-none"><code class="language-none">/*** 根据 ID 修改** @param entity 实体对象*/int updateById(@Param(Constants.ENTITY) T entity);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-none"><code class="language-none">@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testUpdateById() {User user = new User();user.setId(6L); //主键user.setAge(21); //更新的字段//根据id更新，更新不为null的字段this.userMapper.updateById(user);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.updateById]-[DEBUG] ==&gt; Preparing: UPDATEtb_user SET age=? WHERE id=?[main] [cn.itcast.mp.mapper.UserMapper.updateById]-[DEBUG] ==&gt; Parameters: 21(Integer),6(Long)[main] [cn.itcast.mp.mapper.UserMapper.updateById]-[DEBUG] &lt;== Updates: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-2、根据条件更新"><a href="#3-2-2、根据条件更新" class="headerlink" title="3.2.2、根据条件更新"></a>3.2.2、根据条件更新</h3><p>方法定义：</p><pre class="line-numbers language-none"><code class="language-none">/*** 根据 whereEntity 条件，更新记录** @param entity 实体对象 (set 条件值,可以为 null)* @param updateWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）*/int update(@Param(Constants.ENTITY) T entity, @Param(Constants.WRAPPER) Wrapper&lt;T&gt;updateWrapper);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试用例：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import cn.itcast.mp.mapper.UserMapper;import cn.itcast.mp.pojo.User;import com.baomidou.mybatisplus.core.conditions.Wrapper;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;import net.minidev.json.writer.UpdaterMapper;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.List;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testUpdate() {User user = new User();user.setAge(22); //更新的字段//更新的条件QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();wrapper.eq("id", 6);//执行更新操作int result = this.userMapper.update(user, wrapper);System.out.println("result = " + result);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者，通过UpdateWrapper进行更新：</p><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testUpdate() {//更新的条件以及字段UpdateWrapper&lt;User&gt; wrapper = new UpdateWrapper&lt;&gt;();wrapper.eq("id", 6).set("age", 23);//执行更新操作int result = this.userMapper.update(null, wrapper);System.out.println("result = " + result);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.update]-[DEBUG] ==&gt; Preparing: UPDATE tb_userSET age=? WHERE id = ?[main] [cn.itcast.mp.mapper.UserMapper.update]-[DEBUG] ==&gt; Parameters: 23(Integer),6(Integer)[main] [cn.itcast.mp.mapper.UserMapper.update]-[DEBUG] &lt;== Updates: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>均可达到更新的效果。<br>关于wrapper更多的用法后面会详细讲解。</p><h2 id="3-3、删除操作"><a href="#3-3、删除操作" class="headerlink" title="3.3、删除操作"></a>3.3、删除操作</h2><h3 id="3-3-1、deleteById"><a href="#3-3-1、deleteById" class="headerlink" title="3.3.1、deleteById"></a>3.3.1、deleteById</h3><p>方法定义：</p><pre class="line-numbers language-none"><code class="language-none">/*** 根据 ID 删除** @param id 主键ID*/int deleteById(Serializable id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试用例：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import cn.itcast.mp.mapper.UserMapper;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testDeleteById() {//执行删除操作int result = this.userMapper.deleteById(6L);System.out.println("result = " + result);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.deleteById]-[DEBUG] ==&gt; Preparing: DELETE FROMtb_user WHERE id=?[main] [cn.itcast.mp.mapper.UserMapper.deleteById]-[DEBUG] ==&gt; Parameters: 6(Long)[main] [cn.itcast.mp.mapper.UserMapper.deleteById]-[DEBUG] &lt;== Updates: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.3.2、deleteByMap<br>方法定义：</p><pre class="line-numbers language-none"><code class="language-none">/*** 根据 columnMap 条件，删除记录** @param columnMap 表字段 map 对象*/int deleteByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试用例：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import cn.itcast.mp.mapper.UserMapper;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.HashMap;import java.util.Map;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testDeleteByMap() {Map&lt;String, Object&gt; columnMap = new HashMap&lt;&gt;();columnMap.put("age",20);columnMap.put("name","张三");//将columnMap中的元素设置为删除的条件，多个之间为and关系int result = this.userMapper.deleteByMap(columnMap);System.out.println("result = " + result);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.deleteByMap]-[DEBUG] ==&gt; Preparing: DELETE FROMtb_user WHERE name = ? AND age = ?[main] [cn.itcast.mp.mapper.UserMapper.deleteByMap]-[DEBUG] ==&gt; Parameters: 张三(String), 20(Integer)[main] [cn.itcast.mp.mapper.UserMapper.deleteByMap]-[DEBUG] &lt;== Updates: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-3、delete"><a href="#3-3-3、delete" class="headerlink" title="3.3.3、delete"></a>3.3.3、delete</h3><p>方法定义：</p><pre class="line-numbers language-none"><code class="language-none">/*** 根据 entity 条件，删除记录** @param wrapper 实体对象封装操作类（可以为 null）*/int delete(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; wrapper);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试用例：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import cn.itcast.mp.mapper.UserMapper;import cn.itcast.mp.pojo.User;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.HashMap;import java.util.Map;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testDeleteByMap() {User user = new User();user.setAge(20);user.setName("张三");//将实体对象进行包装，包装为操作条件QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;(user);int result = this.userMapper.delete(wrapper);System.out.println("result = " + result);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.delete]-[DEBUG] ==&gt; Preparing: DELETE FROMtb_user WHERE name=? AND age=?[main] [cn.itcast.mp.mapper.UserMapper.delete]-[DEBUG] ==&gt; Parameters: 张三(String),20(Integer)[main] [cn.itcast.mp.mapper.UserMapper.delete]-[DEBUG] &lt;== Updates: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-4、deleteBatchIds"><a href="#3-3-4、deleteBatchIds" class="headerlink" title="3.3.4、deleteBatchIds"></a>3.3.4、deleteBatchIds</h3><p>方法定义：</p><pre class="line-numbers language-none"><code class="language-none">/*** 删除（根据ID 批量删除）** @param idList 主键ID列表(不能为 null 以及 empty)*/int deleteBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt;idList);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试用例：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import cn.itcast.mp.mapper.UserMapper;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.Arrays;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testDeleteByMap() {//根据id集合批量删除int result = this.userMapper.deleteBatchIds(Arrays.asList(1L,10L,20L));System.out.println("result = " + result);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.deleteBatchIds]-[DEBUG] ==&gt; Preparing: DELETEFROM tb_user WHERE id IN ( ? , ? , ? )[main] [cn.itcast.mp.mapper.UserMapper.deleteBatchIds]-[DEBUG] ==&gt; Parameters: 1(Long),10(Long), 20(Long)[main] [cn.itcast.mp.mapper.UserMapper.deleteBatchIds]-[DEBUG] &lt;== Updates: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-4、查询操作"><a href="#3-4、查询操作" class="headerlink" title="3.4、查询操作"></a>3.4、查询操作</h2><p>MP提供了多种查询操作，包括根据id查询、批量查询、查询单条数据、查询列表、分页查询等操作。</p><h3 id="3-4-1、selectById"><a href="#3-4-1、selectById" class="headerlink" title="3.4.1、selectById"></a>3.4.1、selectById</h3><p>方法定义：</p><pre class="line-numbers language-none"><code class="language-none">/*** 根据 ID 查询** @param id 主键ID*/T selectById(Serializable id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试用例：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import cn.itcast.mp.mapper.UserMapper;import cn.itcast.mp.pojo.User;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testSelectById() {//根据id查询数据User user = this.userMapper.selectById(2L);System.out.println("result = " + user);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.selectById]-[DEBUG] ==&gt; Preparing: SELECTid,user_name,password,name,age,email FROM tb_user WHERE id=?[main] [cn.itcast.mp.mapper.UserMapper.selectById]-[DEBUG] ==&gt; Parameters: 2(Long)[main] [cn.itcast.mp.mapper.UserMapper.selectById]-[DEBUG] &lt;== Total: 1result = User(id=2, userName=lisi, password=123456, name=李四, age=20,email=test2@itcast.cn, address=null)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-2、selectBatchIds"><a href="#3-4-2、selectBatchIds" class="headerlink" title="3.4.2、selectBatchIds"></a>3.4.2、selectBatchIds</h3><p>方法定义：</p><pre class="line-numbers language-none"><code class="language-none">/*** 查询（根据ID 批量查询）** @param idList 主键ID列表(不能为 null 以及 empty)*/List&lt;T&gt; selectBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt;idList);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试用例：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import cn.itcast.mp.mapper.UserMapper;import cn.itcast.mp.pojo.User;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.Arrays;import java.util.List;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testSelectBatchIds() {//根据id集合批量查询List&lt;User&gt; users = this.userMapper.selectBatchIds(Arrays.asList(2L, 3L, 10L));for (User user : users) {System.out.println(user);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.selectBatchIds]-[DEBUG] ==&gt; Preparing: SELECTid,user_name,password,name,age,email FROM tb_user WHERE id IN ( ? , ? , ? )[main] [cn.itcast.mp.mapper.UserMapper.selectBatchIds]-[DEBUG] ==&gt; Parameters: 2(Long),3(Long), 10(Long)[main] [cn.itcast.mp.mapper.UserMapper.selectBatchIds]-[DEBUG] &lt;== Total: 2User(id=2, userName=lisi, password=123456, name=李四, age=20, email=test2@itcast.cn,address=null)User(id=3, userName=wangwu, password=123456, name=王五, age=28, email=test3@itcast.cn,address=null)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-3、selectOne"><a href="#3-4-3、selectOne" class="headerlink" title="3.4.3、selectOne"></a>3.4.3、selectOne</h3><p>方法定义：</p><pre class="line-numbers language-none"><code class="language-none">/*** 根据 entity 条件，查询一条记录** @param queryWrapper 实体对象封装操作类（可以为 null）*/T selectOne(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试用例：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import cn.itcast.mp.mapper.UserMapper;import cn.itcast.mp.pojo.User;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testSelectOne() {QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;User&gt;();wrapper.eq("name", "李四");//根据条件查询一条数据，如果结果超过一条会报错User user = this.userMapper.selectOne(wrapper);System.out.println(user);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.selectOne]-[DEBUG] ==&gt; Preparing: SELECTid,user_name,password,name,age,email FROM tb_user WHERE name = ?[main] [cn.itcast.mp.mapper.UserMapper.selectOne]-[DEBUG] ==&gt; Parameters: 李四(String)[main] [cn.itcast.mp.mapper.UserMapper.selectOne]-[DEBUG] &lt;== Total: 1User(id=2, userName=lisi, password=123456, name=李四, age=20, email=test2@itcast.cn,address=null)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-4、selectCount"><a href="#3-4-4、selectCount" class="headerlink" title="3.4.4、selectCount"></a>3.4.4、selectCount</h3><p>方法定义：</p><pre class="line-numbers language-none"><code class="language-none">/*** 根据 Wrapper 条件，查询总记录数** @param queryWrapper 实体对象封装操作类（可以为 null）*/Integer selectCount(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试用例：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import cn.itcast.mp.mapper.UserMapper;import cn.itcast.mp.pojo.User;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testSelectCount() {QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;User&gt;();wrapper.gt("age", 23); //年龄大于23岁//根据条件查询数据条数Integer count = this.userMapper.selectCount(wrapper);System.out.println("count = " + count);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.selectCount]-[DEBUG] ==&gt; Preparing: SELECTCOUNT( 1 ) FROM tb_user WHERE age &gt; ?[main] [cn.itcast.mp.mapper.UserMapper.selectCount]-[DEBUG] ==&gt; Parameters: 23(Integer)[main] [cn.itcast.mp.mapper.UserMapper.selectCount]-[DEBUG] &lt;== Total: 1count = 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-5、selectList"><a href="#3-4-5、selectList" class="headerlink" title="3.4.5、selectList"></a>3.4.5、selectList</h3><p>方法定义：</p><pre class="line-numbers language-none"><code class="language-none">/*** 根据 entity 条件，查询全部记录** @param queryWrapper 实体对象封装操作类（可以为 null）*/List&lt;T&gt; selectList(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试用例：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import cn.itcast.mp.mapper.UserMapper;import cn.itcast.mp.pojo.User;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.List;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testSelectList() {QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;User&gt;();wrapper.gt("age", 23); //年龄大于23岁//根据条件查询数据List&lt;User&gt; users = this.userMapper.selectList(wrapper);for (User user : users) {System.out.println("user = " + user);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.selectList]-[DEBUG] ==&gt; Preparing: SELECTid,user_name,password,name,age,email FROM tb_user WHERE age &gt; ?[main] [cn.itcast.mp.mapper.UserMapper.selectList]-[DEBUG] ==&gt; Parameters: 23(Integer)[main] [cn.itcast.mp.mapper.UserMapper.selectList]-[DEBUG] &lt;== Total: 2user = User(id=3, userName=wangwu, password=123456, name=王五, age=28,email=test3@itcast.cn, address=null)user = User(id=5, userName=sunqi, password=123456, name=孙七, age=24,email=test5@itcast.cn, address=null)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-6、selectPage"><a href="#3-4-6、selectPage" class="headerlink" title="3.4.6、selectPage"></a>3.4.6、selectPage</h3><p>方法定义：</p><pre class="line-numbers language-none"><code class="language-none">/*** 根据 entity 条件，查询全部记录（并翻页）** @param page 分页查询条件（可以为 RowBounds.DEFAULT）* @param queryWrapper 实体对象封装操作类（可以为 null）*/IPage&lt;T&gt; selectPage(IPage&lt;T&gt; page, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置分页插件：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;import org.mybatis.spring.annotation.MapperScan;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configuration@MapperScan("cn.itcast.mp.mapper") //设置mapper接口的扫描包public class MybatisPlusConfig {/*** 分页插件*/@Beanpublic PaginationInterceptor paginationInterceptor() {    return new PaginationInterceptor();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试用例：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import cn.itcast.mp.mapper.UserMapper;import cn.itcast.mp.pojo.User;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.List;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testSelectPage() {QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;User&gt;();wrapper.gt("age", 20); //年龄大于20岁Page&lt;User&gt; page = new Page&lt;&gt;(1,1);//根据条件查询数据IPage&lt;User&gt; iPage = this.userMapper.selectPage(page, wrapper);System.out.println("数据总条数：" + iPage.getTotal());System.out.println("总页数：" + iPage.getPages());List&lt;User&gt; users = iPage.getRecords();for (User user : users) {System.out.println("user = " + user);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.selectPage]-[DEBUG] ==&gt; Preparing: SELECTCOUNT(1) FROM tb_user WHERE age &gt; ?[main] [cn.itcast.mp.mapper.UserMapper.selectPage]-[DEBUG] ==&gt; Parameters: 20(Integer)[main] [cn.itcast.mp.mapper.UserMapper.selectPage]-[DEBUG] ==&gt; Preparing: SELECTid,user_name,password,name,age,email FROM tb_user WHERE age &gt; ? LIMIT ?,?[main] [cn.itcast.mp.mapper.UserMapper.selectPage]-[DEBUG] ==&gt; Parameters: 20(Integer),0(Long), 1(Long)[main] [cn.itcast.mp.mapper.UserMapper.selectPage]-[DEBUG] &lt;== Total: 1[main] [org.mybatis.spring.SqlSessionUtils]-[DEBUG] Closing non transactionalSqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@6ecd665]数据总条数：3总页数：3user = User(id=3, userName=wangwu, password=123456, name=王五, age=28,email=test3@itcast.cn, address=null)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-5、SQL注入的原理"><a href="#3-5、SQL注入的原理" class="headerlink" title="3.5、SQL注入的原理"></a>3.5、SQL注入的原理</h2><p>前面我们已经知道，MP在启动后会将BaseMapper中的一系列的方法注册到meppedStatements中，那么究竟是如<br>何注入的呢？流程又是怎么样的？下面我们将一起来分析下。<br>在MP中，ISqlInjector负责SQL的注入工作，它是一个接口，AbstractSqlInjector是它的实现类，实现关系如下：<br><img src="/../MybatisPlus/12.png" alt="SQL注入原理"></p><p>在AbstractSqlInjector中，主要是由inspectInject()方法进行注入的，如下：</p><pre class="line-numbers language-none"><code class="language-none">@Overridepublic void inspectInject(MapperBuilderAssistant builderAssistant, Class&lt;?&gt;mapperClass) {    Class&lt;?&gt; modelClass = extractModelClass(mapperClass);    if (modelClass != null) {        String className = mapperClass.toString();        Set&lt;String&gt; mapperRegistryCache =GlobalConfigUtils.getMapperRegistryCache(builderAssistant.getConfiguration());    if (!mapperRegistryCache.contains(className)) {        List&lt;AbstractMethod&gt; methodList = this.getMethodList();        if (CollectionUtils.isNotEmpty(methodList)) {            TableInfo tableInfo = TableInfoHelper.initTableInfo(builderAssistant,modelClass);            // 循环注入自定义方法            methodList.forEach(m -&gt; m.inject(builderAssistant, mapperClass,modelClass, tableInfo));        } else {            logger.debug(mapperClass.toString() + ", No effective injection methodwas found.");            }            mapperRegistryCache.add(className);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在实现方法中， methodList.forEach(m -&gt; m.inject(builderAssistant, mapperClass, modelClass,<br>tableInfo)); 是关键，循环遍历方法，进行注入。<br>最终调用抽象方法injectMappedStatement进行真正的注入：</p><pre class="line-numbers language-none"><code class="language-none">/*** 注入自定义 MappedStatement** @param mapperClass mapper 接口* @param modelClass mapper 泛型* @param tableInfo 数据库表反射信息* @return MappedStatement*/public abstract MappedStatement injectMappedStatement(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看该方法的实现：<br><img src="/../MybatisPlus/13.png" alt="Mapper的可以实现类"></p><p>以SelectById为例查看：</p><pre class="line-numbers language-none"><code class="language-none">public class SelectById extends AbstractMethod {@Overridepublic MappedStatement injectMappedStatement(Class&lt;?&gt; mapperClass, Class&lt;?&gt;modelClass, TableInfo tableInfo) {SqlMethod sqlMethod = SqlMethod.LOGIC_SELECT_BY_ID;SqlSource sqlSource = new RawSqlSource(configuration,String.format(sqlMethod.getSql(),sqlSelectColumns(tableInfo, false),tableInfo.getTableName(), tableInfo.getKeyColumn(),tableInfo.getKeyProperty(),tableInfo.getLogicDeleteSql(true, false)), Object.class);return this.addSelectMappedStatement(mapperClass, sqlMethod.getMethod(),sqlSource, modelClass, tableInfo);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，生成了SqlSource对象，再将SQL通过addSelectMappedStatement方法添加到meppedStatements中。</p><h1 id="4、配置"><a href="#4、配置" class="headerlink" title="4、配置"></a>4、配置</h1><p>在MP中有大量的配置，其中有一部分是Mybatis原生的配置，另一部分是MP的配置，详情：<a href="https://mybatis.plus/c">https://mybatis.plus/c</a><br>onfig/<br>下面我们对常用的配置做讲解。</p><h2 id="4-1、基本配置"><a href="#4-1、基本配置" class="headerlink" title="4.1、基本配置"></a>4.1、基本配置</h2><h3 id="4-1-1、configLocation"><a href="#4-1-1、configLocation" class="headerlink" title="4.1.1、configLocation"></a>4.1.1、configLocation</h3><p>MyBatis 配置文件位置，如果您有单独的 MyBatis 配置，请将其路径配置到 configLocation 中。 MyBatis<br>Configuration 的具体内容请参考MyBatis 官方文档<br>Spring Boot：</p><pre class="line-numbers language-none"><code class="language-none">mybatis-plus.config-location = classpath:mybatis-config.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Spring MVC：</p><pre class="line-numbers language-none"><code class="language-none">&lt;bean id="sqlSessionFactory"class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"&gt;&lt;property name="configLocation" value="classpath:mybatis-config.xml"/&gt;&lt;/bean&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-2、mapperLocations"><a href="#4-1-2、mapperLocations" class="headerlink" title="4.1.2、mapperLocations"></a>4.1.2、mapperLocations</h3><p>MyBatis Mapper 所对应的 XML 文件位置，如果您在 Mapper 中有自定义方法（XML 中有自定义实现），需要进行<br>该配置，告诉 Mapper 所对应的 XML 文件位置。<br>Spring Boot：</p><pre class="line-numbers language-none"><code class="language-none">mybatis-plus.mapper-locations = classpath*:mybatis/*.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Spring MVC:</p><pre class="line-numbers language-none"><code class="language-none">&lt;bean id="sqlSessionFactory"class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"&gt;&lt;property name="mapperLocations" value="classpath*:mybatis/*.xml"/&gt;&lt;/bean&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Maven 多模块项目的扫描路径需以 classpath*: 开头 （即加载多个 jar 包下的 XML 文件）<br>测试：<br>UserMapper.xml：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapperPUBLIC "-//mybatis.org//DTD Mapper 3.0//EN""http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="cn.itcast.mp.mapper.UserMapper"&gt;&lt;select id="findById" resultType="cn.itcast.mp.pojo.User"&gt;select * from tb_user where id = #{id}&lt;/select&gt;&lt;/mapper&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>itheima.mp.mapper:</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp.mapper;import cn.itcast.mp.pojo.User;import com.baomidou.mybatisplus.core.mapper.BaseMapper;public interface UserMapper extends BaseMapper&lt;User&gt; {User findById(Long id);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试用例：</p><pre class="line-numbers language-package" data-language="package"><div class="caption"><span>cn.itcast.mp;</span></div><code class="language-package">import cn.itcast.mp.mapper.UserMapper;import cn.itcast.mp.pojo.User;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testSelectPage() {User user = this.userMapper.findById(2L);System.out.println(user);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.1.3、typeAliasesPackage<br>MyBaits 别名包扫描路径，通过该属性可以给包中的类注册别名，注册后在 Mapper 对应的 XML 文件中可以直接使<br>用类名，而不用使用全限定的类名（即 XML 中调用的时候不用包含包名）。<br>Spring Boot：</p><pre class="line-numbers language-none"><code class="language-none">mybatis-plus.type-aliases-package = cn.itcast.mp.pojo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Spring MVC:</p><pre class="line-numbers language-none"><code class="language-none">&lt;bean id="sqlSessionFactory"class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"&gt;&lt;property name="typeAliasesPackage"value="com.baomidou.mybatisplus.samples.quickstart.entity"/&gt;&lt;/bean&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2、进阶配置"><a href="#4-2、进阶配置" class="headerlink" title="4.2、进阶配置"></a>4.2、进阶配置</h2><p>本部分（Configuration）的配置大都为 MyBatis 原生支持的配置，这意味着您可以通过 MyBatis XML 配置文件的形<br>式进行配置。</p><h3 id="4-2-1、mapUnderscoreToCamelCase"><a href="#4-2-1、mapUnderscoreToCamelCase" class="headerlink" title="4.2.1、mapUnderscoreToCamelCase"></a>4.2.1、mapUnderscoreToCamelCase</h3><ul><li>类型： boolean</li><li>默认值： true</li></ul><p>是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN（下划线命名） 到经典 Java 属<br>性名 aColumn（驼峰命名） 的类似映射。</p><pre><code>注意：此属性在 MyBatis 中原默认值为 false，在 MyBatis-Plus 中，此属性也将用于生成最终的 SQL 的 select body如果您的数据库命名符合规则无需使用 @TableField 注解指定数据库字段名</code></pre><p>示例（SpringBoot）：</p><pre class="line-numbers language-none"><code class="language-none">#关闭自动驼峰映射，该参数不能和mybatis-plus.config-location同时存在mybatis-plus.configuration.map-underscore-to-camel-case=false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-2-2、cacheEnabled"><a href="#4-2-2、cacheEnabled" class="headerlink" title="4.2.2、cacheEnabled"></a>4.2.2、cacheEnabled</h3><ul><li>类型： boolean</li><li>默认值： true<br>全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存，默认为 true。</li></ul><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">mybatis-plus.configuration.cache-enabled=false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-3、DB-策略配置"><a href="#4-3、DB-策略配置" class="headerlink" title="4.3、DB 策略配置"></a>4.3、DB 策略配置</h2><h3 id="4-3-1、idType"><a href="#4-3-1、idType" class="headerlink" title="4.3.1、idType"></a>4.3.1、idType</h3><ul><li>类型： com.baomidou.mybatisplus.annotation.IdType</li><li>默认值： ID_WORKER<br>全局默认主键类型，设置后，即可省略实体对象中的@TableId(type = IdType.AUTO)配置。<br>示例：</li></ul><p>SpringBoot：</p><pre class="line-numbers language-none"><code class="language-none">mybatis-plus.global-config.db-config.id-type=auto<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Spring MVC:</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;&lt;bean id="sqlSessionFactory"class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"&gt;    &lt;property name="dataSource" ref="dataSource"/&gt;    &lt;property name="globalConfig"&gt;        &lt;bean class="com.baomidou.mybatisplus.core.config.GlobalConfig"&gt;            &lt;property name="dbConfig"&gt;                &lt;bean                     class="com.baomidou.mybatisplus.core.config.GlobalConfig$DbConfig"&gt;                        &lt;property name="idType" value="AUTO"/&gt;                &lt;/bean&gt;            &lt;/property&gt;        &lt;/bean&gt;    &lt;/property&gt;&lt;/bean&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-2、tablePrefix"><a href="#4-3-2、tablePrefix" class="headerlink" title="4.3.2、tablePrefix"></a>4.3.2、tablePrefix</h3><ul><li>类型： String</li><li>默认值： null<br>SpringBoot：<pre class="line-numbers language-none"><code class="language-none">mybatis-plus.global-config.db-config.table-prefix=tb_<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>SpringMVC：</p><pre class="line-numbers language-none"><code class="language-none">&lt;bean id="sqlSessionFactory"    class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"&gt;        &lt;property name="dataSource" ref="dataSource"/&gt;        &lt;property name="globalConfig"&gt;            &lt;bean class="com.baomidou.mybatisplus.core.config.GlobalConfig"&gt;                &lt;property name="dbConfig"&gt;                    &lt;bean                        class="com.baomidou.mybatisplus.core.config.GlobalConfig$DbConfig"&gt;                            &lt;property name="idType" value="AUTO"/&gt;                            &lt;property name="tablePrefix" value="tb_"/&gt;                    &lt;/bean&gt;                &lt;/property&gt;            &lt;/bean&gt;        &lt;/property&gt;    &lt;/bean&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5、条件构造器"><a href="#5、条件构造器" class="headerlink" title="5、条件构造器"></a>5、条件构造器</h1><p>在MP中，Wrapper接口的实现类关系如下：<br><img src="/..%5CMybatisPlus%5C14.png" alt="Arapper接口实现类关系"><br>可以看到，AbstractWrapper和AbstractChainWrapper是重点实现，接下来我们重点学习AbstractWrapper以及其<br>子类。</p><pre class="line-numbers language-none"><code class="language-none">说明:QueryWrapper(LambdaQueryWrapper) 和 UpdateWrapper(LambdaUpdateWrapper) 的父类 用于生成 sql的 where 条件, entity 属性也用于生成 sql 的 where 条件 注意: entity 生成的 where 条件与 使用各个 api 生成的 where 条件没有任何关联行为<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>官网文档地址：<a href="https://mybatis.plus/guide/wrapper.html">https://mybatis.plus/guide/wrapper.html</a></p><h2 id="5-1、allEq"><a href="#5-1、allEq" class="headerlink" title="5.1、allEq"></a>5.1、allEq</h2><h3 id="5-1-1、说明"><a href="#5-1-1、说明" class="headerlink" title="5.1.1、说明"></a>5.1.1、说明</h3><pre class="line-numbers language-none"><code class="language-none">allEq(Map&lt;R, V&gt; params)allEq(Map&lt;R, V&gt; params, boolean null2IsNull)allEq(boolean condition, Map&lt;R, V&gt; params, boolean null2IsNull)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>全部eq(或个别isNull)</li></ul><pre class="line-numbers language-none"><code class="language-none">个别参数说明: params : key 为数据库字段名, value 为字段值 null2IsNull : 为 true 则在 map 的 value 为null 时调用 isNull 方法,为 false 时则忽略 value 为 null 的    + 例1: allEq({id:1,name:"老王",age:null}) ---&gt; id = 1 and name = '老王' and age is null    + 例2: allEq({id:1,name:"老王",age:null}, false) ---&gt; id = 1 and name = '老王    allEq(BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params)    allEq(BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params, boolean null2IsNull)    allEq(boolean condition, BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params, boolean null2IsNull)    个别参数说明: filter : 过滤函数,是否允许字段传入比对条件中 params 与 null2IsNull : 同上        + 例1: allEq((k,v) -&gt; k.indexOf("a") &gt; 0, {id:1,name:"老王",age:null}) ---&gt; name = '老王' and age is null        + 例2: allEq((k,v) -&gt; k.indexOf("a") &gt; 0, {id:1,name:"老王",age:null}, false) ---&gt; name = '老王'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-2、测试用例"><a href="#5-1-2、测试用例" class="headerlink" title="5.1.2、测试用例"></a>5.1.2、测试用例</h3><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import cn.itcast.mp.mapper.UserMapper;import cn.itcast.mp.pojo.User;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.HashMap;import java.util.List;import java.util.Map;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testWrapper() {QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();//设置条件Map&lt;String,Object&gt; params = new HashMap&lt;&gt;();params.put("name", "曹操");params.put("age", "20");params.put("password", null);// wrapper.allEq(params);//SELECT * FROM tb_user WHERE password IS NULL ANDname = ? AND age = ?// wrapper.allEq(params,false); //SELECT * FROM tb_user WHERE name = ? AND age= ?// wrapper.allEq((k, v) -&gt; (k.equals("name") || k.equals("age")),params);//SELECT * FROM tb_user WHERE name = ? AND age = ?List&lt;User&gt; users = this.userMapper.selectList(wrapper);for (User user : users) {        System.out.println(user);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2、基本比较操作"><a href="#5-2、基本比较操作" class="headerlink" title="5.2、基本比较操作"></a>5.2、基本比较操作</h2><ul><li><p>eq</p><ul><li>等于 =</li></ul></li><li><p>ne</p><ul><li>不等于 &lt;&gt;</li></ul></li><li><p>gt</p><ul><li>大于 &gt;</li></ul></li><li><p>ge</p><ul><li>大于等于 &gt;=</li></ul></li><li><p>lt</p><ul><li>小于 &lt;</li></ul></li><li><p>le</p><ul><li>小于等于 &lt;=</li></ul></li><li><p>between</p><ul><li>BETWEEN 值1 AND 值2</li></ul></li><li><p>notBetween</p><ul><li>NOT BETWEEN 值1 AND 值2</li></ul></li><li><p>in</p><ul><li>字段 IN (value.get(0), value.get(1), …)</li></ul></li><li><p>notIn</p><ul><li>字段 NOT IN (v0, v1, …)</li></ul></li></ul><p>测试用例：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import cn.itcast.mp.mapper.UserMapper;import cn.itcast.mp.pojo.User;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.List;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testEq() {QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();//SELECT id,user_name,password,name,age,email FROM tb_user WHERE password = ?AND age &gt;= ? AND name IN (?,?,?)wrapper.eq("password", "123456")    .ge("age", 20)    .in("name", "李四", "王五", "赵六");List&lt;User&gt; users = this.userMapper.selectList(wrapper);for (User user : users) {System.out.println(user);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-3、模糊查询"><a href="#5-3、模糊查询" class="headerlink" title="5.3、模糊查询"></a>5.3、模糊查询</h2><ul><li><p>like</p><ul><li>LIKE ‘%值%’<br>  例: like(“name”, “王”) —&gt; name like ‘%王%’</li></ul></li><li><p>notLike</p><ul><li>NOT LIKE ‘%值%’<br>  例: notLike(“name”, “王”) —&gt; name not like ‘%王%’</li></ul></li><li><p>likeLeft</p><ul><li>LIKE ‘%值’<br>  例: likeLeft(“name”, “王”) —&gt; name like ‘%王’</li></ul></li><li><p>likeRight</p><ul><li>LIKE ‘值%’<br>  例: likeRight(“name”, “王”) —&gt; name like ‘王%’</li></ul></li></ul><p>测试用例：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import cn.itcast.mp.mapper.UserMapper;import cn.itcast.mp.pojo.User;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.List;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testWrapper() {QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();//SELECT id,user_name,password,name,age,email FROM tb_user WHERE name LIKE ?//Parameters: %曹%(String)wrapper.like("name", "曹");List&lt;User&gt; users = this.userMapper.selectList(wrapper);for (User user : users) {System.out.println(user);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-4、排序"><a href="#5-4、排序" class="headerlink" title="5.4、排序"></a>5.4、排序</h2><ul><li><p>orderBy</p><ul><li>排序：ORDER BY 字段,…<br>  例: orderBy(true, true, “id”, “name”) —&gt; order by id ASC,name ASC</li></ul></li><li><p>orderByAsc</p><ul><li>排序：ORDER BY 字段, … ASC<br>  例: orderByAsc(“id”, “name”) —&gt; order by id ASC,name ASC</li></ul></li><li><p>orderByDesc</p><ul><li>排序：ORDER BY 字段, … DESC<br>  例: orderByDesc(“id”, “name”) —&gt; order by id DESC,name DESC</li></ul></li></ul><p>测试用例：       </p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import cn.itcast.mp.mapper.UserMapper;import cn.itcast.mp.pojo.User;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.List;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testWrapper() {QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();//SELECT id,user_name,password,name,age,email FROM tb_user ORDER BY age DESCwrapper.orderByDesc("age");List&lt;User&gt; users = this.userMapper.selectList(wrapper);for (User user : users) {System.out.println(user);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-5、逻辑查询"><a href="#5-5、逻辑查询" class="headerlink" title="5.5、逻辑查询"></a>5.5、逻辑查询</h2><ul><li><p>or</p><ul><li>拼接 OR<br>  主动调用 or 表示紧接着下一个方法不是用 and 连接!(不调用 or 则默认为使用 and 连接)</li></ul></li><li><p>and</p><ul><li>AND 嵌套<br>  例: and(i -&gt; i.eq(“name”, “李白”).ne(“status”, “活着”)) —&gt; and (name = ‘李白’ and status &lt;&gt; ‘活着’)</li></ul></li></ul><p>测试用例：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import cn.itcast.mp.mapper.UserMapper;import cn.itcast.mp.pojo.User;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.List;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testWrapper() {QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();//SELECT id,user_name,password,name,age,email FROM tb_user WHERE name = ? OR age = ?wrapper.eq("name","李四").or().eq("age", 24);List&lt;User&gt; users = this.userMapper.selectList(wrapper);for (User user : users) {System.out.println(user);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-6、select"><a href="#5-6、select" class="headerlink" title="5.6、select"></a>5.6、select</h2><p>在MP查询中，默认查询所有的字段，如果有需要也可以通过select方法进行指定字段。</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import cn.itcast.mp.mapper.UserMapper;import cn.itcast.mp.pojo.User;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.List;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testWrapper() {QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();//SELECT id,name,age FROM tb_user WHERE name = ? OR age = ?wrapper.eq("name", "李四").or().eq("age", 24).select("id", "name", "age");List&lt;User&gt; users = this.userMapper.selectList(wrapper);for (User user : users) {System.out.println(user);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6、ActiveRecord"><a href="#6、ActiveRecord" class="headerlink" title="6、ActiveRecord"></a>6、ActiveRecord</h1><p>ActiveRecord（简称AR）一直广受动态语言（ PHP 、 Ruby 等）的喜爱，而 Java 作为准静态语言，对于ActiveRecord 往往只能感叹其优雅，所以我们也在 AR 道路上进行了一定的探索，喜欢大家能够喜欢。</p><pre class="line-numbers language-none"><code class="language-none">什么是ActiveRecord？ActiveRecord也属于ORM（对象关系映射）层，由Rails最早提出，遵循标准的ORM模型：表映射到记录，记录映射到对象，字段映射到对象属性。配合遵循的命名和配置惯例，能够很大程度的快速实现模型的操作，而且简洁易懂。ActiveRecord的主要思想是：    + 每一个数据库表对应创建一个类，类的每一个对象实例对应于数据库中表的一行记录；通常表的每个字段在类中都有相应的Field；    + ActiveRecord同时负责把自己持久化，在ActiveRecord中封装了对数据库的访问，即CURD;；    + ActiveRecord是一种领域模型(Domain Model)，封装了部分业务逻辑；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-1、开启AR之旅"><a href="#6-1、开启AR之旅" class="headerlink" title="6.1、开启AR之旅"></a>6.1、开启AR之旅</h2><p>在MP中，开启AR非常简单，只需要将实体对象继承Model即可。</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp.pojo;import com.baomidou.mybatisplus.annotation.IdType;import com.baomidou.mybatisplus.annotation.TableField;import com.baomidou.mybatisplus.annotation.TableId;import com.baomidou.mybatisplus.annotation.TableName;import com.baomidou.mybatisplus.extension.activerecord.Model;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;@Data@NoArgsConstructor@AllArgsConstructorpublic class User extends Model&lt;User&gt; {private Long id;private String userName;private String password;private String name;private Integer age;private String email;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6-2、根据主键查询"><a href="#6-2、根据主键查询" class="headerlink" title="6.2、根据主键查询"></a>6.2、根据主键查询</h1><pre class="line-numbers language-none"><code class="language-none">@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testAR() {User user = new User();user.setId(2L);User user2 = user.selectById();System.out.println(user2);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-3、新增数据"><a href="#6-3、新增数据" class="headerlink" title="6.3、新增数据"></a>6.3、新增数据</h2><pre class="line-numbers language-none"><code class="language-none">@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testAR() {User user = new User();user.setName("刘备");user.setAge(30);user.setPassword("123456");user.setUserName("liubei");user.setEmail("liubei@itcast.cn");boolean insert = user.insert();System.out.println(insert);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.insert]-[DEBUG] ==&gt; Preparing: INSERT INTOtb_user ( user_name, password, name, age, email ) VALUES ( ?, ?, ?, ?, ? )[main] [cn.itcast.mp.mapper.UserMapper.insert]-[DEBUG] ==&gt; Parameters: liubei(String),123456(String), 刘备(String), 30(Integer), liubei@itcast.cn(String)[main] [cn.itcast.mp.mapper.UserMapper.insert]-[DEBUG] &lt;== Updates: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../MybatisPlus/15.png" alt="ActiveRecord对POJO处理实现"></p><h2 id="6-2、根据主键查询-1"><a href="#6-2、根据主键查询-1" class="headerlink" title="6.2、根据主键查询"></a>6.2、根据主键查询</h2><pre class="line-numbers language-none"><code class="language-none">@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testAR() {User user = new User();user.setId(2L);User user2 = user.selectById();System.out.println(user2);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-3、新增数据-1"><a href="#6-3、新增数据-1" class="headerlink" title="6.3、新增数据"></a>6.3、新增数据</h2><pre class="line-numbers language-none"><code class="language-none">@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testAR() {User user = new User();user.setName("刘备");user.setAge(30);user.setPassword("123456");user.setUserName("liubei");user.setEmail("liubei@itcast.cn");boolean insert = user.insert();System.out.println(insert);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.insert]-[DEBUG] ==&gt; Preparing: INSERT INTOtb_user ( user_name, password, name, age, email ) VALUES ( ?, ?, ?, ?, ? )[main] [cn.itcast.mp.mapper.UserMapper.insert]-[DEBUG] ==&gt; Parameters: liubei(String),123456(String), 刘备(String), 30(Integer), liubei@itcast.cn(String)[main] [cn.itcast.mp.mapper.UserMapper.insert]-[DEBUG] &lt;== Updates: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../MybatisPlus/16.png" alt="ActiveRecord对POJO新增处理实现"></p><h2 id="6-5、更新操作"><a href="#6-5、更新操作" class="headerlink" title="6.5、更新操作"></a>6.5、更新操作</h2><pre class="line-numbers language-none"><code class="language-none">@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testAR() {User user = new User();user.setId(8L);user.setAge(35);boolean update = user.updateById();System.out.println(update);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.updateById]-[DEBUG] ==&gt; Preparing: UPDATEtb_user SET age=? WHERE id=?[main] [cn.itcast.mp.mapper.UserMapper.updateById]-[DEBUG] ==&gt; Parameters: 35(Integer),8(Long)[main] [cn.itcast.mp.mapper.UserMapper.updateById]-[DEBUG] &lt;== Updates: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![ActiveRecord对POJO更新处理实现](../MybatisPlus/16.png</p><h2 id="6-6、删除操作"><a href="#6-6、删除操作" class="headerlink" title="6.6、删除操作"></a>6.6、删除操作</h2><pre class="line-numbers language-none"><code class="language-none">@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testAR() {User user = new User();user.setId(7L);boolean delete = user.deleteById();System.out.println(delete);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.deleteById]-[DEBUG] ==&gt; Preparing: DELETE FROMtb_user WHERE id=?[main] [cn.itcast.mp.mapper.UserMapper.deleteById]-[DEBUG] ==&gt; Parameters: 7(Long)[main] [cn.itcast.mp.mapper.UserMapper.deleteById]-[DEBUG] &lt;== Updates: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-7、根据条件查询"><a href="#6-7、根据条件查询" class="headerlink" title="6.7、根据条件查询"></a>6.7、根据条件查询</h2><pre class="line-numbers language-none"><code class="language-none">@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testAR() {User user = new User();QueryWrapper&lt;User&gt; userQueryWrapper = new QueryWrapper&lt;&gt;();userQueryWrapper.le("age","20");List&lt;User&gt; users = user.selectList(userQueryWrapper);for (User user1 : users) {    System.out.println(user1);        }    }} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.selectList]-[DEBUG] ==&gt; Preparing: SELECTid,user_name,password,name,age,email FROM tb_user WHERE age &lt;= ?[main] [cn.itcast.mp.mapper.UserMapper.selectList]-[DEBUG] ==&gt; Parameters: 20(String)[main] [cn.itcast.mp.mapper.UserMapper.selectList]-[DEBUG] &lt;== Total: 2User(id=2, userName=lisi, password=123456, name=李四, age=20, email=test2@itcast.cn,address=null)User(id=6, userName=caocao, password=123456, name=曹操, age=20, email=test@itcast.cn,address=null)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7、Oracle-主键Sequence"><a href="#7、Oracle-主键Sequence" class="headerlink" title="7、Oracle 主键Sequence"></a>7、Oracle 主键Sequence</h1><p>在mysql中，主键往往是自增长的，这样使用起来是比较方便的，如果使用的是Oracle数据库，那么就不能使用自增长了，就得使用Sequence 序列生成id值了。</p><h2 id="7-1、部署Oracle环境"><a href="#7-1、部署Oracle环境" class="headerlink" title="7.1、部署Oracle环境"></a>7.1、部署Oracle环境</h2><p>为了简化环境部署，这里使用Docker环境进行部署安装Oracle</p><pre class="line-numbers language-none"><code class="language-none">#拉取镜像docker pull sath89/oracle-12c#创建容器docker create --name oracle -p 1521:1521 sath89/oracle-12c#启动docker start oracle &amp;&amp; docker logs -f oracle#下面是启动过程Database not initialized. Initializing database.Starting tnslsnrCopying database files1% complete3% complete11% complete18% complete26% complete37% completeCreating and starting Oracle instance40% complete45% complete50% complete55% complete56% complete60% complete62% completeCompleting Database Creation66% complete70% complete73% complete85% complete96% complete100% completeLook at the log file "/u01/app/oracle/cfgtoollogs/dbca/xe/xe.log" for further details.Configuring Apex consoleDatabase initialized. Please visit http://#containeer:8080/emhttp://#containeer:8080/apex for extra configuration if neededStarting web management consolePL/SQL procedure successfully completed.Starting import from '/docker-entrypoint-initdb.d':ls: cannot access /docker-entrypoint-initdb.d/*: No such file or directoryImport finishedDatabase ready to use. Enjoy! ;)#通过用户名密码即可登录用户名和密码为： system/oracle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面使用navicat12进行连接并操作oracle，使用资料中提供的安装包，可以试用14天。<br>需要注意的是：由于安装的Oracle是64位版本，所以navicat也是需要使用64为版本，否则连接不成功。<br><img src="/../MybatisPlus/18.png" alt="数据库连接信息"></p><p><img src="/../MybatisPlus/19.png" alt="数据库本地库存储位置信息"></p><h2 id="7-2、创建表以及序列"><a href="#7-2、创建表以及序列" class="headerlink" title="7.2、创建表以及序列"></a>7.2、创建表以及序列</h2><pre class="line-numbers language-none"><code class="language-none">--创建表，表名以及字段名都要大写CREATE TABLE "TB_USER" ("ID" NUMBER(20) VISIBLE NOT NULL ,"USER_NAME" VARCHAR2(255 BYTE) VISIBLE ,"PASSWORD" VARCHAR2(255 BYTE) VISIBLE ,"NAME" VARCHAR2(255 BYTE) VISIBLE ,"AGE" NUMBER(10) VISIBLE ,"EMAIL" VARCHAR2(255 BYTE) VISIBLE)--创建序列CREATE SEQUENCE SEQ_USER START WITH 1 INCREMENT BY 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-3、jdbc驱动包"><a href="#7-3、jdbc驱动包" class="headerlink" title="7.3、jdbc驱动包"></a>7.3、jdbc驱动包</h2><p>由于版权原因，我们不能直接通过maven的中央仓库下载oracle数据库的jdbc驱动包，所以我们需要将驱动包安装到<br>本地仓库。</p><pre class="line-numbers language-none"><code class="language-none">#ojdbc8.jar文件在资料中可以找到mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc8 -Dversion=12.1.0.1 -Dpackaging=jar -Dfile=ojdbc8.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>安装完成后的坐标：</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;&lt;groupId&gt;com.oracle&lt;/groupId&gt;&lt;artifactId&gt;ojdbc8&lt;/artifactId&gt;&lt;version&gt;12.1.0.1&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-4、修改application-properties"><a href="#7-4、修改application-properties" class="headerlink" title="7.4、修改application.properties"></a>7.4、修改application.properties</h2><p>对于application.properties的修改，需要修改2个位置，分别是：</p><pre class="line-numbers language-none"><code class="language-none">#数据库连接配置spring.datasource.driver-class-name=oracle.jdbc.OracleDriverspring.datasource.url=jdbc:oracle:thin:@192.168.31.81:1521:xespring.datasource.username=systemspring.datasource.password=oracle#id生成策略mybatis-plus.global-config.db-config.id-type=input<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-5、配置序列"><a href="#7-5、配置序列" class="headerlink" title="7.5、配置序列"></a>7.5、配置序列</h2><p>使用Oracle的序列需要做2件事情：<br>第一，需要配置MP的序列生成器到Spring容器：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import com.baomidou.mybatisplus.extension.incrementer.OracleKeyGenerator;import com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;import org.mybatis.spring.annotation.MapperScan;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configuration@MapperScan("cn.itcast.mp.mapper") //设置mapper接口的扫描包public class MybatisPlusConfig {/*** 分页插件*/@Beanpublic PaginationInterceptor paginationInterceptor() {return new PaginationInterceptor();}/*** 序列生成器*/@Beanpublic OracleKeyGenerator oracleKeyGenerator(){return new OracleKeyGenerator();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二，在实体对象中指定序列的名称：</p><pre class="line-numbers language-none"><code class="language-none">@KeySequence(value = "SEQ_USER", clazz = Long.class)public class User{......}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-6、测试"><a href="#7-6、测试" class="headerlink" title="7.6、测试"></a>7.6、测试</h2><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp;import cn.itcast.mp.mapper.UserMapper;import cn.itcast.mp.pojo.User;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.List;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserMapperTest {@Autowiredprivate UserMapper userMapper;@Testpublic void testInsert(){User user = new User();user.setAge(20);user.setEmail("test@itcast.cn");user.setName("曹操");user.setUserName("caocao");user.setPassword("123456");int result = this.userMapper.insert(user); //返回的result是受影响的行数，并不是自增后的idSystem.out.println("result = " + result);System.out.println(user.getId()); //自增后的id会回填到对象中}@Testpublic void testSelectById(){User user = this.userMapper.selectById(8L);System.out.println(user);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../MybatisPlus/20.png" alt="数据库本地库 id 查询"></p><h1 id="8、插件"><a href="#8、插件" class="headerlink" title="8、插件"></a>8、插件</h1><h2 id="8-1、mybatis的插件机制"><a href="#8-1、mybatis的插件机制" class="headerlink" title="8.1、mybatis的插件机制"></a>8.1、mybatis的插件机制</h2><p>MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法</p><p>调用包括：</p><ol><li>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</li><li>ParameterHandler (getParameterObject, setParameters)</li><li>ResultSetHandler (handleResultSets, handleOutputParameters)</li><li>StatementHandler (prepare, parameterize, batch, update, query)</li></ol><p>我们看到了可以拦截Executor接口的部分方法，比如update，query，commit，rollback等方法，还有其他接口的<br>一些方法等。<br>总体概括为：</p><ol><li>拦截执行器的方法</li><li>拦截参数的处理</li><li>拦截结果集的处理</li><li>拦截Sql语法构建的处理</li></ol><p>拦截器示例：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp.plugins;import org.apache.ibatis.executor.Executor;import org.apache.ibatis.mapping.MappedStatement;import org.apache.ibatis.plugin.*;import java.util.Properties;@Intercepts({@Signature(type= Executor.class,method = "update",args = {MappedStatement.class,Object.class})})public class MyInterceptor implements Interceptor {@Overridepublic Object intercept(Invocation invocation) throws Throwable {//拦截方法，具体业务逻辑编写的位置return invocation.proceed();}@Overridepublic Object plugin(Object target) {//创建target对象的代理对象,目的是将当前拦截器加入到该对象中return Plugin.wrap(target, this);}@Overridepublic void setProperties(Properties properties) {//属性设置    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注入到Spring容器：</p><pre class="line-numbers language-none"><code class="language-none">/*** 自定义拦截器*/@Beanpublic MyInterceptor myInterceptor(){return new MyInterceptor();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者通过xml配置，mybatis-config.xml：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE configurationPUBLIC "-//mybatis.org//DTD Config 3.0//EN""http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;configuration&gt;&lt;plugins&gt;&lt;plugin interceptor="cn.itcast.mp.plugins.MyInterceptor"&gt;&lt;/plugin&gt;&lt;/plugins&gt;&lt;/configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-2、执行分析插件"><a href="#8-2、执行分析插件" class="headerlink" title="8.2、执行分析插件"></a>8.2、执行分析插件</h2><p>在MP中提供了对SQL执行的分析的插件，可用作阻断全表更新、删除的操作，注意：该插件仅适用于开发环境，不<br>适用于生产环境。<br>SpringBoot配置：</p><pre class="line-numbers language-none"><code class="language-none">@Beanpublic SqlExplainInterceptor sqlExplainInterceptor(){SqlExplainInterceptor sqlExplainInterceptor = new SqlExplainInterceptor();List&lt;ISqlParser&gt; sqlParserList = new ArrayList&lt;&gt;();// 攻击 SQL 阻断解析器、加入解析链sqlParserList.add(new BlockAttackSqlParser());sqlExplainInterceptor.setSqlParserList(sqlParserList);return sqlExplainInterceptor;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testUpdate(){User user = new User();user.setAge(20);int result = this.userMapper.update(user, null);System.out.println("result = " + result);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">Caused by: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Prohibitionof table update operationatcom.baomidou.mybatisplus.core.toolkit.ExceptionUtils.mpe(ExceptionUtils.java:49)at com.baomidou.mybatisplus.core.toolkit.Assert.isTrue(Assert.java:38)at com.baomidou.mybatisplus.core.toolkit.Assert.notNull(Assert.java:72)atcom.baomidou.mybatisplus.extension.parsers.BlockAttackSqlParser.processUpdate(BlockAttackSqlParser.java:45)atcom.baomidou.mybatisplus.core.parser.AbstractJsqlParser.processParser(AbstractJsqlParser.java:92)atcom.baomidou.mybatisplus.core.parser.AbstractJsqlParser.parser(AbstractJsqlParser.java:67)atcom.baomidou.mybatisplus.extension.handlers.AbstractSqlParserHandler.sqlParser(AbstractSqlParserHandler.java:76)atcom.baomidou.mybatisplus.extension.plugins.SqlExplainInterceptor.intercept(SqlExplainInterceptor.java:63)at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)at com.sun.proxy.$Proxy70.update(Unknown Source)atorg.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)... 41 more<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，当执行全表更新时，会抛出异常，这样有效防止了一些误操作。</p><h2 id="8-3、性能分析插件"><a href="#8-3、性能分析插件" class="headerlink" title="8.3、性能分析插件"></a>8.3、性能分析插件</h2><p>性能分析拦截器，用于输出每条 SQL 语句及其执行时间，可以设置最大执行时间，超过时间会抛出异常。<br>该插件只用于开发环境，不建议生产环境使用。</p><p>配置:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE configurationPUBLIC "-//mybatis.org//DTD Config 3.0//EN""http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;configuration&gt;&lt;plugins&gt;&lt;!-- SQL 执行性能分析，开发环境使用，线上不推荐。 maxTime 指的是 sql 最大执行时长 --&gt;&lt;plugininterceptor="com.baomidou.mybatisplus.extension.plugins.PerformanceInterceptor"&gt;    &lt;property name="maxTime" value="100" /&gt;    &lt;!--SQL是否格式化 默认false--&gt;    &lt;property name="format" value="true" /&gt;&lt;/plugin&gt;&lt;/plugins&gt;&lt;/configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-none"><code class="language-none">Time：11 ms - ID：cn.itcast.mp.mapper.UserMapper.selectByIdExecute SQL：SELECTid,user_name,password,name,age,emailFROMtb_userWHEREid=7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，执行时间为11ms。如果将maxTime设置为1，那么，该操作会抛出异常。</p><pre class="line-numbers language-none"><code class="language-none">Caused by: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: The SQLexecution time is too large, please optimize !at com.baomidou.mybatisplus.core.toolkit.ExceptionUtils.mpe(ExceptionUtils.java:49)at com.baomidou.mybatisplus.core.toolkit.Assert.isTrue(Assert.java:38)................<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-4、乐观锁插件"><a href="#8-4、乐观锁插件" class="headerlink" title="8.4、乐观锁插件"></a>8.4、乐观锁插件</h2><h3 id="8-4-1、主要适用场景"><a href="#8-4-1、主要适用场景" class="headerlink" title="8.4.1、主要适用场景"></a>8.4.1、主要适用场景</h3><p>意图：</p><p>当要更新一条记录的时候，希望这条记录没有被别人更新乐观锁实现方式：</p><ul><li>取出记录时，获取当前version</li><li>更新时，带上这个version</li><li>执行更新时， set version = newVersion where version = oldVersion</li><li>如果version不对，就更新失败</li></ul><h3 id="8-4-2、插件配置"><a href="#8-4-2、插件配置" class="headerlink" title="8.4.2、插件配置"></a>8.4.2、插件配置</h3><p>spring xml:</p><pre class="line-numbers language-none"><code class="language-none">&lt;bean class="com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor"/&gt; 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>spring boot:</p><pre class="line-numbers language-none"><code class="language-none">@Beanpublic OptimisticLockerInterceptor optimisticLockerInterceptor() {    return new OptimisticLockerInterceptor();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-3、注解实体字段"><a href="#8-4-3、注解实体字段" class="headerlink" title="8.4.3、注解实体字段"></a>8.4.3、注解实体字段</h3><p>需要为实体字段添加@Version注解。</p><p>第一步，为表添加version字段，并且设置初始值为1：</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE `tb_user`ADD COLUMN `version` int(10) NULL AFTER `email`;UPDATE `tb_user` SET `version`='1';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二步，为User实体对象添加version字段，并且添加@Version注解：</p><pre class="line-numbers language-none"><code class="language-none">@Versionprivate Integer version;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="8-4-4、测试"><a href="#8-4-4、测试" class="headerlink" title="8.4.4、测试"></a>8.4.4、测试</h3><p>测试用例：</p><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testUpdate(){User user = new User();user.setAge(30);user.setId(2L);user.setVersion(1); //获取到version为1int result = this.userMapper.updateById(user);System.out.println("result = " + result);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行日志：</p><pre class="line-numbers language-none"><code class="language-none">[main] [com.baomidou.mybatisplus.extension.parsers.BlockAttackSqlParser]-[DEBUG]Original SQL: UPDATE tb_user SET age=?,version=? WHERE id=? AND version=?[main] [com.baomidou.mybatisplus.extension.parsers.BlockAttackSqlParser]-[DEBUG]parser sql: UPDATE tb_user SET age = ?, version = ? WHERE id = ? AND version = ?[main] [org.springframework.jdbc.datasource.DataSourceUtils]-[DEBUG] Fetching JDBCConnection from DataSource[main] [org.mybatis.spring.transaction.SpringManagedTransaction]-[DEBUG] JDBCConnection [HikariProxyConnection@540206885 wrappingcom.mysql.jdbc.JDBC4Connection@27e0f2f5] will not be managed by Spring[main] [cn.itcast.mp.mapper.UserMapper.updateById]-[DEBUG] ==&gt; Preparing: UPDATEtb_user SET age=?, version=? WHERE id=? AND version=?[main] [cn.itcast.mp.mapper.UserMapper.updateById]-[DEBUG] ==&gt; Parameters:30(Integer), 2(Integer), 2(Long), 1(Integer)[main] [cn.itcast.mp.mapper.UserMapper.updateById]-[DEBUG] &lt;== Updates: 1[main] [org.mybatis.spring.SqlSessionUtils]-[DEBUG] Closing non transactionalSqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@30135202]result = 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，更新的条件中有version条件，并且更新的version为2。<br>如果再次执行，更新则不成功。这样就避免了多人同时更新时导致数据的不一致。</p><h3 id="8-4-5、特别说明"><a href="#8-4-5、特别说明" class="headerlink" title="8.4.5、特别说明"></a>8.4.5、特别说明</h3><ul><li>支持的数据类型只有:int,Integer,long,Long,Date,Timestamp,LocalDateTime</li><li>整数类型下 newVersion = oldVersion + 1</li><li>newVersion 会回写到 entity 中</li><li>仅支持 updateById(id) 与 update(entity, wrapper) 方法</li><li>在 update(entity, wrapper) 方法下, wrapper 不能复用!!!</li></ul><h1 id="9、Sql-注入器"><a href="#9、Sql-注入器" class="headerlink" title="9、Sql 注入器"></a>9、Sql 注入器</h1><p>我们已经知道，在MP中，通过AbstractSqlInjector将BaseMapper中的方法注入到了Mybatis容器，这样这些方法才<br>可以正常执行。<br>那么，如果我们需要扩充BaseMapper中的方法，又该如何实现呢？<br>下面我们以扩展findAll方法为例进行学习。</p><h2 id="9-1、编写MyBaseMapper"><a href="#9-1、编写MyBaseMapper" class="headerlink" title="9.1、编写MyBaseMapper"></a>9.1、编写MyBaseMapper</h2><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp.mapper;import com.baomidou.mybatisplus.core.mapper.BaseMapper;import java.util.List;public interface MyBaseMapper&lt;T&gt; extends BaseMapper&lt;T&gt; {    List&lt;T&gt; findAll();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他的Mapper都可以继承该Mapper，这样实现了统一的扩展。<br>如：</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp.mapper;import cn.itcast.mp.pojo.User;public interface UserMapper extends MyBaseMapper&lt;User&gt; {User findById(Long id);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-2、编写MySqlInjector"><a href="#9-2、编写MySqlInjector" class="headerlink" title="9.2、编写MySqlInjector"></a>9.2、编写MySqlInjector</h2><p>如果直接继承AbstractSqlInjector的话，原有的BaseMapper中的方法将失效，所以我们选择继承DefaultSqlInjector<br>进行扩展。</p><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp.sqlInjector;import com.baomidou.mybatisplus.core.injector.AbstractMethod;import com.baomidou.mybatisplus.core.injector.DefaultSqlInjector;import java.util.List;public class MySqlInjector extends DefaultSqlInjector {@Overridepublic List&lt;AbstractMethod&gt; getMethodList() {List&lt;AbstractMethod&gt; methodList = super.getMethodList();methodList.add(new FindAll());// 再扩充自定义的方法list.add(new FindAll());return methodList;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-3、编写FindAll"><a href="#9-3、编写FindAll" class="headerlink" title="9.3、编写FindAll"></a>9.3、编写FindAll</h2><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp.sqlInjector;import com.baomidou.mybatisplus.core.enums.SqlMethod;import com.baomidou.mybatisplus.core.injector.AbstractMethod;import com.baomidou.mybatisplus.core.metadata.TableInfo;import org.apache.ibatis.mapping.MappedStatement;import org.apache.ibatis.mapping.SqlSource;public class FindAll extends AbstractMethod {@Overridepublic MappedStatement injectMappedStatement(Class&lt;?&gt; mapperClass, Class&lt;?&gt;modelClass, TableInfo tableInfo) {String sqlMethod = "findAll";String sql = "select * from " + tableInfo.getTableName();SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql,modelClass);return this.addSelectMappedStatement(mapperClass, sqlMethod, sqlSource,modelClass, tableInfo);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-4、注册到Spring容器"><a href="#9-4、注册到Spring容器" class="headerlink" title="9.4、注册到Spring容器"></a>9.4、注册到Spring容器</h2><pre class="line-numbers language-none"><code class="language-none">/*** 自定义SQL注入器*/@Beanpublic MySqlInjector mySqlInjector(){    return new MySqlInjector();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-5、测试"><a href="#9-5、测试" class="headerlink" title="9.5、测试"></a>9.5、测试</h2><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testFindAll(){    List&lt;User&gt; users = this.userMapper.findAll();        for (User user : users) {               System.out.println(user);        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出的SQL：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.findAll]-[DEBUG] ==&gt; Preparing: select * fromtb_user[main] [cn.itcast.mp.mapper.UserMapper.findAll]-[DEBUG] ==&gt; Parameters:[main] [cn.itcast.mp.mapper.UserMapper.findAll]-[DEBUG] &lt;== Total: 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>至此，我们实现了全局扩展SQL注入器。</p><h1 id="10、自动填充功能"><a href="#10、自动填充功能" class="headerlink" title="10、自动填充功能"></a>10、自动填充功能</h1><p>有些时候我们可能会有这样的需求，插入或者更新数据时，希望有些字段可以自动填充数据，比如密码、version<br>等。在MP中提供了这样的功能，可以实现自动填充。</p><h2 id="10-1、添加-TableField注解"><a href="#10-1、添加-TableField注解" class="headerlink" title="10.1、添加@TableField注解"></a>10.1、添加@TableField注解</h2><pre class="line-numbers language-none"><code class="language-none">@TableField(fill = FieldFill.INSERT) //插入数据时进行填充private String password;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为password添加自动填充功能，在新增数据时有效。<br>FieldFill提供了多种模式选择：</p><pre class="line-numbers language-none"><code class="language-none">public enum FieldFill {/*** 默认不处理*/DEFAULT,/*** 插入时填充字段*/INSERT,/*** 更新时填充字段*/UPDATE,/*** 插入和更新时填充字段*/INSERT_UPDATE}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-2、编写MyMetaObjectHandler"><a href="#10-2、编写MyMetaObjectHandler" class="headerlink" title="10.2、编写MyMetaObjectHandler"></a>10.2、编写MyMetaObjectHandler</h2><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp.handler;import com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;import org.apache.ibatis.reflection.MetaObject;import org.springframework.stereotype.Component;@Componentpublic class MyMetaObjectHandler implements MetaObjectHandler {@Overridepublic void insertFill(MetaObject metaObject) {Object password = getFieldValByName("password", metaObject);if(null == password){//字段为空，可以进行填充setFieldValByName("password", "123456", metaObject);    }}@Overridepublic void updateFill(MetaObject metaObject) {    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-3、测试"><a href="#10-3、测试" class="headerlink" title="10.3、测试"></a>10.3、测试</h2><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testInsert(){User user = new User();user.setName("关羽");user.setUserName("guanyu");user.setAge(30);user.setEmail("guanyu@itast.cn");user.setVersion(1);int result = this.userMapper.insert(user);System.out.println("result = " + result);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：<br><img src="/../MybatisPlus/21.png" alt="自动填充，生成密码"></p><h1 id="11、-逻辑删除"><a href="#11、-逻辑删除" class="headerlink" title="11、 逻辑删除"></a>11、 逻辑删除</h1><p>开发系统时，有时候在实现功能时，删除操作需要实现逻辑删除，所谓逻辑删除就是将数据标记为删除，而并非真正<br>的物理删除（非DELETE操作），查询时需要携带状态条件，确保被标记的数据不被查询到。这样做的目的就是避免<br>数据被真正的删除。<br>MP就提供了这样的功能，方便我们使用，接下来我们一起学习下。</p><h2 id="11-1、修改表结构"><a href="#11-1、修改表结构" class="headerlink" title="11.1、修改表结构"></a>11.1、修改表结构</h2><p>为tb_user表增加deleted字段，用于表示数据是否被删除，1代表删除，0代表未删除。</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE `tb_user`ADD COLUMN `deleted` int(1) NULL DEFAULT 0 COMMENT '1代表删除，0代表未删除' AFTER`version`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同时，也修改User实体，增加deleted属性并且添加@TableLogic注解：</p><pre class="line-numbers language-none"><code class="language-none">@TableLogicprivate Integer deleted;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="11-2、-配置"><a href="#11-2、-配置" class="headerlink" title="11.2、  配置"></a>11.2、  配置</h2><p>application.properties：</p><pre class="line-numbers language-none"><code class="language-none"># 逻辑已删除值(默认为 1)mybatis-plus.global-config.db-config.logic-delete-value=1# 逻辑未删除值(默认为 0)mybatis-plus.global-config.db-config.logic-not-delete-value=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-3、测试"><a href="#11-3、测试" class="headerlink" title="11.3、测试"></a>11.3、测试</h2><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testDeleteById(){    this.userMapper.deleteById(2L);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行的SQL：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.deleteById]-[DEBUG] ==&gt; Preparing: UPDATEtb_user SET deleted=1 WHERE id=? AND deleted=0[main] [cn.itcast.mp.mapper.UserMapper.deleteById]-[DEBUG] ==&gt; Parameters: 2(Long)[main] [cn.itcast.mp.mapper.UserMapper.deleteById]-[DEBUG] &lt;== Updates: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../MybatisPlus/22.png" alt="标记删除，防止数据被删除"></p><p>测试查询：</p><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testSelectById(){User user = this.userMapper.selectById(2L);System.out.println(user);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行的SQL：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.selectById]-[DEBUG] ==&gt; Preparing: SELECTid,user_name,password,name,age,email,version,deleted FROM tb_user WHERE id=? ANDdeleted=0[main] [cn.itcast.mp.mapper.UserMapper.selectById]-[DEBUG] ==&gt; Parameters: 2(Long)[main] [cn.itcast.mp.mapper.UserMapper.selectById]-[DEBUG] &lt;== Total: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见，已经实现了逻辑删除。</p><h1 id="12、-通用枚举"><a href="#12、-通用枚举" class="headerlink" title="12、 通用枚举"></a>12、 通用枚举</h1><h2 id="12-1、修改表结构"><a href="#12-1、修改表结构" class="headerlink" title="12.1、修改表结构"></a>12.1、修改表结构</h2><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE `tb_user`ADD COLUMN `sex` int(1) NULL DEFAULT 1 COMMENT '1-男，2-女' AFTER `deleted`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="12-2、定义枚举"><a href="#12-2、定义枚举" class="headerlink" title="12.2、定义枚举"></a>12.2、定义枚举</h2><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp.enums;import com.baomidou.mybatisplus.core.enums.IEnum;import com.fasterxml.jackson.annotation.JsonValue;public enum SexEnum implements IEnum&lt;Integer&gt; {MAN(1,"男"),WOMAN(2,"女");private int value;private String desc;SexEnum(int value, String desc) {this.value = value;this.desc = desc;}@Overridepublic Integer getValue() {return this.value;}@Overridepublic String toString() {return this.desc;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-3、配置"><a href="#12-3、配置" class="headerlink" title="12.3、配置"></a>12.3、配置</h2><pre class="line-numbers language-none"><code class="language-none"># 枚举包扫描mybatis-plus.type-enums-package=cn.itcast.mp.enums<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="12-4、修改实体"><a href="#12-4、修改实体" class="headerlink" title="12.4、修改实体"></a>12.4、修改实体</h2><pre class="line-numbers language-none"><code class="language-none">private SexEnum sex;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="12-5、测试"><a href="#12-5、测试" class="headerlink" title="12.5、测试"></a>12.5、测试</h2><p>测试插入数据:</p><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testInsert(){User user = new User();user.setName("貂蝉");user.setUserName("diaochan");user.setAge(20);user.setEmail("diaochan@itast.cn");user.setVersion(1);user.setSex(SexEnum.WOMAN);int result = this.userMapper.insert(user);System.out.println("result = " + result);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SQL：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.insert]-[DEBUG] ==&gt; Preparing: INSERT INTOtb_user ( user_name, password, name, age, email, version, sex ) VALUES ( ?, ?, ?, ?, ?,?, ? )[main] [cn.itcast.mp.mapper.UserMapper.insert]-[DEBUG] ==&gt; Parameters:diaochan(String), 123456(String), 貂蝉(String), 20(Integer), diaochan@itast.cn(String),1(Integer), 2(Integer)[main] [cn.itcast.mp.mapper.UserMapper.insert]-[DEBUG] &lt;== Updates: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../MybatisPlus/23.png" alt="通过枚举属性设置性别"></p><p>查询：</p><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testSelectById(){User user = this.userMapper.selectById(2L);System.out.println(user);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.selectById]-[DEBUG] ==&gt; Preparing: SELECTid,user_name,password,name,age,email,version,deleted,sex FROM tb_user WHERE id=? ANDdeleted=0[main] [cn.itcast.mp.mapper.UserMapper.selectById]-[DEBUG] ==&gt; Parameters: 2(Long)[main] [cn.itcast.mp.mapper.UserMapper.selectById]-[DEBUG] &lt;== Total: 1User(id=2, userName=lisi, password=123456, name=李四, age=30, email=test2@itcast.cn,address=null, version=2, deleted=0, sex=女)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从测试可以看出，可以很方便的使用枚举了。<br>查询条件时也是有效的：</p><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testSelectBySex() {QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();wrapper.eq("sex", SexEnum.WOMAN);List&lt;User&gt; users = this.userMapper.selectList(wrapper);for (User user : users) {System.out.println(user);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SQL:</p><pre class="line-numbers language-none"><code class="language-none">[main] [cn.itcast.mp.mapper.UserMapper.selectList]-[DEBUG] ==&gt; Preparing: SELECTid,user_name,password,name,age,email,version,deleted,sex FROM tb_user WHERE deleted=0AND sex = ?[main] [cn.itcast.mp.mapper.UserMapper.selectList]-[DEBUG] ==&gt; Parameters: 2(Integer)[main] [cn.itcast.mp.mapper.UserMapper.selectList]-[DEBUG] &lt;== Total: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="13、代码生成器"><a href="#13、代码生成器" class="headerlink" title="13、代码生成器"></a>13、代码生成器</h1><p>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper<br>XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。<br>效果：<br><img src="/../MybatisPlus/24.png" alt="通过Mybatis插件生成项目文件的子集和必要分类文件内容"></p><h2 id="13-1、创建工程"><a href="#13-1、创建工程" class="headerlink" title="13.1、创建工程"></a>13.1、创建工程</h2><p>pom.xml：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0"xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"xsi:schemaLocation="http://maven.apache.org/POM/4.0.0http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;parent&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&lt;version&gt;2.1.4.RELEASE&lt;/version&gt;&lt;/parent&gt;&lt;groupId&gt;cn.itcast.mp&lt;/groupId&gt;&lt;artifactId&gt;itcast-mp-generator&lt;/artifactId&gt;&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;dependencies&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;!--mybatis-plus的springboot支持--&gt;&lt;dependency&gt;&lt;groupId&gt;com.baomidou&lt;/groupId&gt;&lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;&lt;version&gt;3.1.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;com.baomidou&lt;/groupId&gt;&lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;&lt;version&gt;3.1.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--mysql驱动--&gt;&lt;dependency&gt;&lt;groupId&gt;mysql&lt;/groupId&gt;&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;version&gt;5.1.47&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.slf4j&lt;/groupId&gt;&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;&lt;/dependency&gt;&lt;/dependencies&gt;&lt;build&gt;&lt;plugins&gt;&lt;plugin&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&lt;/plugin&gt;&lt;/plugins&gt;&lt;/build&gt;&lt;/project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-2、代码"><a href="#13-2、代码" class="headerlink" title="13.2、代码"></a>13.2、代码</h2><pre class="line-numbers language-none"><code class="language-none">package cn.itcast.mp.generator;import java.util.ArrayList;import java.util.List;import java.util.Scanner;import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;import com.baomidou.mybatisplus.core.toolkit.StringPool;import com.baomidou.mybatisplus.core.toolkit.StringUtils;import com.baomidou.mybatisplus.generator.AutoGenerator;import com.baomidou.mybatisplus.generator.InjectionConfig;import com.baomidou.mybatisplus.generator.config.DataSourceConfig;import com.baomidou.mybatisplus.generator.config.FileOutConfig;import com.baomidou.mybatisplus.generator.config.GlobalConfig;import com.baomidou.mybatisplus.generator.config.PackageConfig;import com.baomidou.mybatisplus.generator.config.StrategyConfig;import com.baomidou.mybatisplus.generator.config.TemplateConfig;import com.baomidou.mybatisplus.generator.config.po.TableInfo;import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;import com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;/*** &lt;p&gt;* mysql 代码生成器演示例子* &lt;/p&gt;*/public class MysqlGenerator {/*** &lt;p&gt;* 读取控制台内容* &lt;/p&gt;*/public static String scanner(String tip) {Scanner scanner = new Scanner(System.in);StringBuilder help = new StringBuilder();help.append("请输入" + tip + "：");System.out.println(help.toString());if (scanner.hasNext()) {String ipt = scanner.next();if (StringUtils.isNotEmpty(ipt)) {return ipt;}}throw new MybatisPlusException("请输入正确的" + tip + "！");}/*** RUN THIS*/public static void main(String[] args) {// 代码生成器AutoGenerator mpg = new AutoGenerator();// 全局配置GlobalConfig gc = new GlobalConfig();String projectPath = System.getProperty("user.dir");gc.setOutputDir(projectPath + "/src/main/java");gc.setAuthor("itcast");gc.setOpen(false);mpg.setGlobalConfig(gc);// 数据源配置DataSourceConfig dsc = new DataSourceConfig();dsc.setUrl("jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8");// dsc.setSchemaName("public");dsc.setDriverName("com.mysql.jdbc.Driver");dsc.setUsername("root");dsc.setPassword("root");mpg.setDataSource(dsc);// 包配置PackageConfig pc = new PackageConfig();pc.setModuleName(scanner("模块名"));pc.setParent("cn.itcast.mp.generator");mpg.setPackageInfo(pc);// 自定义配置InjectionConfig cfg = new InjectionConfig() {@Overridepublic void initMap() {// to do nothing}};List&lt;FileOutConfig&gt; focList = new ArrayList&lt;&gt;();focList.add(new FileOutConfig("/templates/mapper.xml.ftl") {@Overridepublic String outputFile(TableInfo tableInfo) {// 自定义输入文件名称return projectPath + "/itcast-mpgenerator/src/main/resources/mapper/" + pc.getModuleName()+ "/" + tableInfo.getEntityName() + "Mapper" +StringPool.DOT_XML;}});cfg.setFileOutConfigList(focList);mpg.setCfg(cfg);mpg.setTemplate(new TemplateConfig().setXml(null));// 策略配置StrategyConfig strategy = new StrategyConfig();strategy.setNaming(NamingStrategy.underline_to_camel);strategy.setColumnNaming(NamingStrategy.underline_to_camel);//strategy.setSuperEntityClass("com.baomidou.mybatisplus.samples.generator.common.BaseEntity");strategy.setEntityLombokModel(true);//strategy.setSuperControllerClass("com.baomidou.mybatisplus.samples.generator.common.BaseController");strategy.setInclude(scanner("表名"));strategy.setSuperEntityColumns("id");strategy.setControllerMappingHyphenStyle(true);strategy.setTablePrefix(pc.getModuleName() + "_");mpg.setStrategy(strategy);// 选择 freemarker 引擎需要指定如下加，注意 pom 依赖必须有！mpg.setTemplateEngine(new FreemarkerTemplateEngine());mpg.execute();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-3、测试"><a href="#13-3、测试" class="headerlink" title="13.3、测试"></a>13.3、测试</h2><p><img src="/../MybatisPlus/25.png" alt="文件生成设置"></p><p>代码已生成：<br><img src="/../MybatisPlus/26.png" alt="文件夹内容"></p><p>实体对象：<br><img src="/../MybatisPlus/27.png" alt="Mybatis生成的POJO信息"></p><h1 id="14、MybatisX-快速开发插件"><a href="#14、MybatisX-快速开发插件" class="headerlink" title="14、MybatisX 快速开发插件"></a>14、MybatisX 快速开发插件</h1><p>MybatisX 是一款基于 IDEA 的快速开发插件，为效率而生。<br>安装方法：打开 IDEA，进入 File -&gt; Settings -&gt; Plugins -&gt; Browse Repositories，输入 mybatisx 搜索并安装。</p><p>功能：</p><ul><li>Java 与 XML 调回跳转</li><li>Mapper 方法自动生成 XML</li></ul><p><img src="/../MybatisPlus/28.png" alt="MybatisX插件功能"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> MybatisPlus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MybatisPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven基础</title>
      <link href="/2023/08/19/Maven/"/>
      <url>/2023/08/19/Maven/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、Maven项目结构"><a href="#一、Maven项目结构" class="headerlink" title="一、Maven项目结构"></a>一、Maven项目结构</h1><p>pom.xml</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project     xmlns="http://maven.apache.org/POM/4.0.0"    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  &lt;groupId&gt;com&lt;/groupId&gt;  &lt;artifactId&gt;projext-java&lt;/artifactId&gt;  &lt;version&gt;1.0&lt;/version&gt;  &lt;packaging&gt;jar&lt;/packaging&gt;  &lt;dependencies&gt;    &lt;dependency&gt;      &lt;groupId&gt;junit&lt;/groupId&gt;      &lt;artifactId&gt;junit&lt;/artifactId&gt;      &lt;version&gt;4.12&lt;/version&gt;      &lt;optional&gt;true&lt;/optional&gt;    &lt;/dependency&gt;  &lt;/dependencies&gt;&lt;/project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、Maven项目构建"><a href="#二、Maven项目构建" class="headerlink" title="二、Maven项目构建"></a>二、Maven项目构建</h1><pre class="line-numbers language-none"><code class="language-none">mvn compile  #下载插件到本地Maven创库，编译代码（第一次编译会多一个文件夹   clean#清理  test#测试，日志报告 ./target/surefire-reports/  package#打包源文件为 .jar。执行以上命令。  install#安装到本地的Maven仓库，<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、Maven插件创建工程"><a href="#三、Maven插件创建工程" class="headerlink" title="三、Maven插件创建工程"></a>三、Maven插件创建工程</h1><pre class="line-numbers language-none"><code class="language-none">●创建工程（在空目录创建工程）mvn archetype: generate-DgroupId={project-packaging}-Dartifact Id=(project-name}-DarchetypeArtifactId=maven-archetype-quickstart-DinteractiveMode=false●创建java工程（缺少resources文件夹）mvn archetype:generate -DgroupId=com.itheima -DartifactId=java-project -DarchetypeArtifactId=maven-archetype-quickstart -Dversion=0.0.1-snapshot -DinteractiveMode=false●创建web工程（缺少java文件夹）mvn archetype:generate -DgroupId=com.itheima -DartifactId=web-project -DarchetypeArtifactId=maven-archetype-webapp -Dversion=0.0.1-snapshot -DinteractiveMode=false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、依赖管理"><a href="#四、依赖管理" class="headerlink" title="四、依赖管理"></a>四、依赖管理</h1><ol><li><p>依赖传递</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--  依赖传递    1.路径优先，就近原则    2.声明优先，在相同层级被依赖时，先配置的生效    3.特殊优先，同级配置相同资源的版本，后置覆盖优先（依赖重复但是版本不同时     对子类不显示，不继承--&gt;  &lt;dependencies&gt;    &lt;dependency&gt;      &lt;groupId&gt;junit&lt;/groupId&gt;      &lt;artifactId&gt;junit&lt;/artifactId&gt;      &lt;version&gt;3.8.1&lt;/version&gt;           &lt;!-- 对子类不显示，不继承--&gt;      &lt;optional&gt;true&lt;/optional&gt;      &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;  &lt;/dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>排除依赖</p><pre class="line-numbers language-none"><code class="language-none">  &lt;dependencies&gt;    &lt;dependency&gt;      &lt;groupId&gt;junit&lt;/groupId&gt;      &lt;artifactId&gt;junit&lt;/artifactId&gt;      &lt;version&gt;3.8.1&lt;/version&gt;&lt;!--      对子类不显示，不继承--&gt;      &lt;optional&gt;true&lt;/optional&gt;      &lt;scope&gt;test&lt;/scope&gt;&lt;!--      主动排除依赖的资源--&gt;      &lt;exclusions&gt;        &lt;exclusion&gt;          &lt;groupId&gt;org.hamcrest&lt;/groupId&gt;          &lt;artifactId&gt;hamcrest-core&lt;/artifactId&gt;        &lt;/exclusion&gt;      &lt;/exclusions&gt;          &lt;/dependency&gt;  &lt;/dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>依赖范围</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--      依赖范围        1.main文件夹范围        2，test测试程序范围        3.package指令范围         依赖范围模式        1.compile （ 1,2,3    例如：log4j        2.test    （ 2        例如：junit        3.provided（ 1,2      例如：servlet-api 服务器内置，打包会冲突        4.runtime （ 3        例如：jdbc        --&gt;      &lt;scope&gt;test&lt;/scope&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>依赖范围传递性</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--      依赖范围的传递性        1.compile，runtime可传递        2.test，provided不可传递--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="五、生命周期与插件"><a href="#五、生命周期与插件" class="headerlink" title="五、生命周期与插件"></a>五、生命周期与插件</h1><p>1.clean<br><img src="https://i0.hdslb.com/bfs/note/2c50693e7574092f9a598d4df1132eedd4554091.png@690w_!web-note.webp"><br>2.default<br><img src="https://i0.hdslb.com/bfs/note/8fbedc3a84f61ba2a433f659830e00f9579921ef.png@690w_!web-note.webp"><br>3.site<br><img src="https://i0.hdslb.com/bfs/note/53fa6baa7a440f73f1b770a998da01946c7efe42.png@690w_!web-note.webp"><br>4.生命周期在插件中的应用</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--  构建--&gt;  &lt;build&gt;    &lt;finalName&gt;WabiSabifag_Web&lt;/finalName&gt;&lt;!--    插件--&gt;    &lt;plugins&gt;      &lt;plugin&gt;          &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;          &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;          &lt;version&gt;2.1&lt;/version&gt;&lt;!--      生命周期和插件--&gt;        &lt;executions&gt;          &lt;execution&gt;            &lt;goals&gt;&lt;!--       打包为 jar --&gt;              &lt;goal&gt;jar&lt;/goal&gt;            &lt;/goals&gt;&lt;!--        在该过程时将执行--&gt;            &lt;phase&gt;generate-test-resources&lt;/phase&gt;          &lt;/execution&gt;        &lt;/executions&gt;&lt;!--        配置--&gt;        &lt;configuration&gt;&lt;!--          端口--&gt;          &lt;port&gt;8080&lt;/port&gt;&lt;!--          路径--&gt;          &lt;path&gt;/&lt;/path&gt;        &lt;/configuration&gt;      &lt;/plugin&gt;    &lt;/plugins&gt;  &lt;/build&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="六、聚合-和-继承"><a href="#六、聚合-和-继承" class="headerlink" title="六、聚合 和 继承"></a>六、聚合 和 继承</h1><p>单独创建mss模块，仅pom.xml一个子文件。</p><pre class="line-numbers language-none"><code class="language-none">聚合：在文件中使用：&lt;packaging&gt;pom&lt;/packaging&gt; . 声明为结构管理。使用：&lt;modules&gt;        &lt;module&gt;    &lt;/module&gt;    &lt;/modules&gt;管理文件（顺序会自编译，不用担心）继承：通过 依赖管理 和 插件管理 的方式 统一控制版本&lt;!--依赖管理--&gt;&lt;dependencyManagement&gt;    &lt;dependencies&gt;        &lt;!--自定义依赖--&gt;           &lt;dependency&gt;               &lt;groupId&gt;top.wabisabifag&lt;/groupId&gt;               &lt;artifactId&gt;ssm_pojo&lt;/artifactId&gt;               &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;           &lt;/dependency&gt;           &lt;dependency&gt;               &lt;groupId&gt;top.wabisabifag&lt;/groupId&gt;               &lt;artifactId&gt;ssm_dao&lt;/artifactId&gt;               &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;           &lt;/dependency&gt;           &lt;dependency&gt;               &lt;groupId&gt;top.wabisabifag&lt;/groupId&gt;               &lt;artifactId&gt;ssm_service&lt;/artifactId&gt;               &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;           &lt;/dependency&gt;        &lt;!-- Maven包资源的版本--&gt;           &lt;dependency&gt;               &lt;groupId&gt;org.springframework&lt;/groupId&gt;               &lt;artifactId&gt;spring-context&lt;/artifactId&gt;               &lt;version&gt;5.1.9.RELEASE&lt;/version&gt;           &lt;/dependency&gt;&lt;/dependencyManagement&gt;  &lt;!--插件管理--&gt;  &lt;build&gt;      &lt;pluginManagement&gt;          &lt;plugins&gt;              &lt;plugin&gt;                  &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;                  &lt;artifactId&gt;common-tomcat-maven-plugin&lt;/artifactId&gt;                  &lt;version&gt;2.1&lt;/version&gt;                  &lt;configuration&gt;                      &lt;path&gt;/&lt;/path&gt;                  &lt;/configuration&gt;              &lt;/plugin&gt;          &lt;/plugins&gt;      &lt;/pluginManagement&gt;  &lt;/build&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="八、属性"><a href="#八、属性" class="headerlink" title="八、属性"></a>八、属性</h1><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0"         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;groupId&gt;top.wabisabifag&lt;/groupId&gt;    &lt;artifactId&gt;ssm&lt;/artifactId&gt;'    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;!-- 进行构建管理--&gt;    &lt;packaging&gt;pom&lt;/packaging&gt;    &lt;modules&gt;        &lt;module&gt;../ssm_controller&lt;/module&gt;        &lt;module&gt;../ssm_service&lt;/module&gt;        &lt;module&gt;../ssm_dao&lt;/module&gt;        &lt;module&gt;../ssm_pojo&lt;/module&gt;    &lt;/modules&gt;    &lt;!--定义自定义属性 --&gt;    &lt;properties&gt;        &lt;spring.version&gt;5.1.9.RELEASE&lt;/spring.version&gt;    &lt;/properties&gt;    &lt;!--依赖管理--&gt;   &lt;dependencyManagement&gt;       &lt;dependencies&gt;        &lt;!-- 自定义依赖--&gt;           原型：           &lt;dependency&gt;               &lt;groupId&gt;top.wabisabifag&lt;/groupId&gt;               &lt;artifactId&gt;ssm_pojo&lt;/artifactId&gt;               &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;           &lt;/dependency&gt;           设置自定义版本号（内置属性）：           &lt;dependency&gt;               &lt;groupId&gt;top.wabisabifag&lt;/groupId&gt;               &lt;artifactId&gt;ssm_dao&lt;/artifactId&gt;               &lt;version&gt;${version}&lt;/version&gt;           &lt;/dependency&gt;           &lt;dependency&gt;               &lt;groupId&gt;top.wabisabifag&lt;/groupId&gt;               &lt;artifactId&gt;ssm_service&lt;/artifactId&gt;            &lt;!-- 直接调用 ssm 自身的属性值（版本号，内置的属性值--&gt;               &lt;version&gt;${version}&lt;/version&gt;           &lt;/dependency&gt;                      &lt;dependency&gt;               &lt;groupId&gt;org.springframework&lt;/groupId&gt;               &lt;artifactId&gt;spring-context&lt;/artifactId&gt;               &lt;version&gt;${spring.version}&lt;/version&gt;           &lt;/dependency&gt;                  &lt;!-- Setting 属性--&gt;               &lt;!-- 使用Maven配置文件setting.xml中标签属性，用于动态配置--&gt;           调用格式：           ${settings.localRepository}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>自定义属性（<properties>）：中可设置标签（如：Spring.version在标签内赋值版本号，通过:${ } 在具体依赖文件内传自定义的值 ）</properties></p></li><li><p>内置属性：ssm文件自身 属性（版本号）通过 ￥{version}直接调用  1.0-SHAPSHOT</p></li><li><p>Setting属性：</p><p> 查询方式：</p><pre><code> CMD命令行： mvn help:system</code></pre></li></ol><h1 id="九、多环境-和-测试跳过"><a href="#九、多环境-和-测试跳过" class="headerlink" title="九、多环境 和 测试跳过"></a>九、多环境 和 测试跳过</h1><p>···</p><!--创建多环境  --><p>&lt;\profiles&gt;   <!-- 和dependencyManagement 同级别 --></p><pre><code>&lt;!-- 生产环境--&gt;&lt;profile&gt;    &lt;!--测试跳过: 声明唯一名称--&gt;    &lt;id&gt;pro_env&lt;/id&gt;    &lt;properties&gt;        &lt;!--引用 ../resource/jdbc.properties 文件 --&gt;        &lt;jdbc.url&gt;jdbc:mysql://127.0.0.1:3306/ssm_db&lt;/jdbc.url&gt;        &lt;jdbc.username&gt;root&lt;/jdbc.username&gt;        &lt;jdbc.password&gt;123456&lt;/jdbc.password&gt;    &lt;/properties&gt;    &lt;!-- 测试跳过: 设置默认启动 --&gt;    &lt;activation&gt;        &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;    &lt;/activation&gt;&lt;/profile&gt;&lt;!--开发环境--&gt;&lt;profile&gt;    &lt;!--测试跳过: 声明唯一名称--&gt;    &lt;id&gt;dep_env&lt;/id&gt;    &lt;properties&gt;        &lt;jdbc.url&gt;jdbc:mysql://127.0.0.1:3306/ssm_db&lt;/jdbc.url&gt;        &lt;jdbc.username&gt;root&lt;/jdbc.username&gt;        &lt;jdbc.password&gt;123456&lt;/jdbc.password&gt;    &lt;/properties&gt;&lt;/profile&gt;</code></pre><p>&lt;/profiles&gt;<br>···</p><pre class="line-numbers language-none"><code class="language-none"># ../resource/jdbc.properties 文件jdbc.driver = com.mysql.jdbc.Driverjdbc.url = ${jdbc.url}jdbc.username = ${jdbc.username}jdbc.password = ${jdbc.password}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;build&gt;&lt;!--   配置资源文件对应的信息--&gt;        &lt;resources&gt;            &lt;resource&gt;                &lt;directory&gt;${project.basedir}/src/main/resources&lt;/directory&gt;                &lt;filtering&gt;true&lt;/filtering&gt;            &lt;/resource&gt;        &lt;/resources&gt;&lt;!--   配置测试资源文件对应的信息--&gt;        &lt;testResources&gt;            &lt;testResource&gt;            &lt;!--  支持使用属性动态设定路径--&gt;                &lt;directory&gt;${project.basedir}/src/test/resources&lt;/directory&gt;            &lt;!--  开启对配置文件的资源加载过滤--&gt;                &lt;filtering&gt;true&lt;/filtering&gt;            &lt;/testResource&gt;        &lt;/testResources&gt;&lt;/build&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上文使用的跳过测试的一种，跳过测试用于对需求功能的跳过运行，不建议使用。</p><p>下面还有两种跳过测试的方式：</p><pre class="line-numbers language-none"><code class="language-none">   &lt;build&gt;        &lt;pluginManagement&gt;            &lt;plugins&gt;&lt;!--                 跳过测试插件--&gt;&lt;!--                   命令行:  mvn [install] -D skipTests--&gt;               &lt;plugin&gt;                    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;                    &lt;version&gt;2.*&lt;/version&gt;                    &lt;configuration&gt;            &lt;!-- 1.全部跳过--&gt;                        &lt;skipTests&gt;true&lt;/skipTests&gt;            &lt;!-- 2.指定跳过--&gt;                     &lt;!-- 1.包含一定文件跳过--&gt;                        &lt;includes&gt;                            &lt;include&gt;**/UserServiceTest.java&lt;/include&gt;                        &lt;/includes&gt;                     &lt;!-- 2.排除一定文件跳过跳过--&gt;                        &lt;excludes&gt;                            &lt;exclude&gt;&lt;/exclude&gt;                        &lt;/excludes&gt;                    &lt;/configuration&gt;                                    &lt;/plugin&gt;             &lt;/plugins&gt;        &lt;/pluginManagement&gt;&lt;/build&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="十、Nexus"><a href="#十、Nexus" class="headerlink" title="十、Nexus"></a>十、Nexus</h1><ol><li><p>部署Nexus</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--发布配置管理--&gt;      &lt;!-- 点击  nexus.exe 无反应，在当前文件夹的命令行窗口执行       命令行: nexus /run nexus         经提示获取 admin 的 文件中 长随机密码              创建 Maven 2 host 的库       进入Maven 的 ../conf/setting.xml  - 124行           对&lt;services&gt;  和 &lt;mirrors&gt; 进行设置        例）--&gt;          &lt;server&gt;         &lt;id&gt;wabisabifag-release&lt;/id&gt;         &lt;username&gt;admin&lt;/username&gt;         &lt;password&gt;love1314&lt;/password&gt;       &lt;/server&gt;        &lt;server&gt;         &lt;id&gt;wabisabifag-snapshot&lt;/id&gt;         &lt;username&gt;admin&lt;/username&gt;         &lt;password&gt;love1314&lt;/password&gt;       &lt;/server&gt;             &lt;mirror&gt;       &lt;id&gt;nexus-wabisabifag&lt;/id&gt;       &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;       &lt;name&gt;wabisabifag maven&lt;/name&gt;       &lt;url&gt;http://localhost:8081/repository/maven-public/&lt;/url&gt;     &lt;/mirror&gt;          将setting文件保存，拷贝覆盖 Maven本地仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>pom.xml</p><pre class="line-numbers language-none"><code class="language-none">&lt;distributionManagement&gt;  &lt;!-- Setting 文件夹的链接地址和信息--&gt;    &lt;repository&gt;        &lt;id&gt;wabisabifag-release&lt;/id&gt;        &lt;url&gt;http://localhost:8081/repository/wabisabifag-relwase/&lt;/url&gt;    &lt;/repository&gt;        &lt;snapshotRepository&gt;        &lt;id&gt;wabisabifag-snapshots&lt;/id&gt;        &lt;url&gt;http://localhost:8081/repository/wabisabifag-snapshot/&lt;/url&gt;    &lt;/snapshotRepository&gt;    &lt;/distributionManagement&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="十一、-Maven-理论进阶"><a href="#十一、-Maven-理论进阶" class="headerlink" title="十一、 Maven 理论进阶"></a>十一、 Maven 理论进阶</h1><h2 id="1-Maven-功能"><a href="#1-Maven-功能" class="headerlink" title="1. Maven 功能"></a>1. Maven 功能</h2><ul><li>构建</li><li>文档生成</li><li>报告</li><li>依赖</li><li>SCMs</li><li>发布</li><li>分发</li><li>邮件列表</li></ul><h2 id="1-约定配置"><a href="#1-约定配置" class="headerlink" title="1. 约定配置"></a>1. 约定配置</h2><p>Maven 提倡使用一个共同的标准目录结构，Maven 使用约定优于配置的原则（尽可能的遵守这样的目录结构）。如下所示：</p><p>目录目的<br>/${basedir}                          存放pom.xml和所有的子目录<br>/${basedir}/src/main/java            项目的java源代码<br>/${basedir}/src/main/resources        项目的资源，比如说property文件，springmvc.xml<br>/${basedir}/src/test/java            项目的测试类，比如说Junit代码<br>/${basedir}/src/test/resources        测试用的资源<br>/${basedir}/src/main/webapp/WEB-INF  web应用文件目录，web项目的信息，比如存放web.xml、本地图片、jsp视图页面<br>/${basedir}/target                    打包输出目录<br>/${basedir}/target/classes            编译输出目录<br>/${basedir}/target/test-classes      测试编译输出目录<br>Test.java                            Maven只会自动运行符合该命名规则的测试类<br>~/.m2/repository                    Maven默认的本地仓库目录位置</p><h2 id="2-Maven-特点"><a href="#2-Maven-特点" class="headerlink" title="2. Maven 特点"></a>2. Maven 特点</h2><ul><li><p>项目设置遵循统一的规则。</p></li><li><p>任意工程中共享。</p></li><li><p>依赖管理包括自动更新。</p></li><li><p>一个庞大且不断增长的库。</p></li><li><p>可扩展，能够轻松编写 Java 或脚本语言的插件。</p></li><li><p>只需很少或不需要额外配置即可即时访问新功能。</p></li><li><p>基于模型的构建  -Maven能够将任意数量的项目构建到预定义的输出类型中，如 JAR，WAR 或基于项目元数据的分发，而不需要在大多数情况下执行任何脚本。</p></li><li><p>项目信息的一致性站点  -使用与构建过程相同的元数据，Maven 能够生成一个网站或PDF，包括您要添加的任何文档，并添加到关于项目开发状态的标准报告中。</p></li><li><p>发布管理和发布单独的输出  -Maven 将不需要额外的配置，就可以与源代码管理系统（如 Subversion 或 Git）集成，并可以基于某个标签管理项目的发布。它也可以将其发布到分发位置供其他项目使用。Maven 能够发布单独的输出，如 JAR，包含其他依赖和文档的归档，或者作为源代码发布。</p></li><li><p>向后兼容性  -您可以很轻松的从旧版本 Maven 的多个模块移植到 Maven 3 中。</p></li><li><p>子项目使用父项目依赖时，正常情况子项目应该继承父项目依赖，无需使用版本号，</p></li><li><p>并行构建 -编译的速度能普遍提高20 - 50 %。</p></li><li><p>更好的错误报告 -Maven 改进了错误报告，它为您提供了 Maven wiki 页面的链接，您可以点击链接查看错误的完整描述。</p></li></ul><h2 id="3-Maven-POM"><a href="#3-Maven-POM" class="headerlink" title="3. Maven POM"></a>3. Maven POM</h2><p>POM( Project Object Model，项目对象模型 ) 是 Maven 工程的基本工作单元，是一个XML文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。</p><p>执行任务或目标时，Maven 会在当前目录中查找 POM。它读取 POM，获取所需的配置信息，然后执行目标。POM 中可以指定以下配置：</p><ul><li>项目依赖</li><li>插件</li><li>执行目标</li><li>项目构建 profile</li><li>项目版本</li><li>项目开发者列表</li><li>相关邮件列表信息</li></ul><p>节点                            描述<br>project                  工程的根标签。<br>modelVersion          模型版本需要设置为 4.0。<br>groupId                  这是工程组的标识。它在一个组织或者项目中通常是唯<br>                          一  的。例如，一个银行组织 com.companyname.project-group 拥有所有的和银行相关的项目。</p><p>artifactId              这是工程的标识。它通常是工程的名称。例如，<br>                          消费者银行。groupId 和 artifactId 一起定义了 artifact 在仓库中的位置。</p><p>version                  这是工程的版本号。在 artifact 的仓库中，它用来区分不同的版本。例如：<br>                            com.company.bank:consumer-banking:1.0<br>                            com.company.bank:consumer-banking:1.1</p><h3 id="1-父（Super）POM"><a href="#1-父（Super）POM" class="headerlink" title="1. 父（Super）POM"></a>1. 父（Super）POM</h3><p>父（Super）POM是 Maven 默认的 POM。所有的 POM 都继承自一个父 POM（无论是否显式定义了这个父 POM）。父 POM 包含了一些可以被继承的默认设置。因此，当 Maven 发现需要下载 POM 中的 依赖时，它会到 Super POM 中配置的(默认仓库)[<a href="http://repo1.maven.org/maven2]">http://repo1.maven.org/maven2]</a>  去下载。</p><p>Maven 使用 effective pom（Super pom 加上工程自己的配置）来执行相关的目标，它帮助开发者在 pom.xml 中做尽可能少的配置，当然这些配置可以被重写。</p><p>使用以下命令来查看 Super POM 默认配置：                           </p><pre class="line-numbers language-none"><code class="language-none">mvn help:effective-pom<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">默认工程源码目录结构、输出目录、需要的插件、仓库和报表目录</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;project xmlns = "http://maven.apache.org/POM/4.0.0"    xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"    xsi:schemaLocation = "http://maven.apache.org/POM/4.0.0    http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;     &lt;!-- 模型版本 --&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --&gt;    &lt;groupId&gt;com.companyname.project-group&lt;/groupId&gt;     &lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;    &lt;artifactId&gt;project&lt;/artifactId&gt;     &lt;!-- 版本号 --&gt;    &lt;version&gt;1.0&lt;/version&gt;&lt;/project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!-- ================================================================= --&gt;&lt;!--                                                                   --&gt;&lt;!-- Generated by Maven Help Plugin on 2012-07-05T11:41:51             --&gt;&lt;!-- See: http://maven.apache.org/plugins/maven-help-plugin/           --&gt;&lt;!--                                                                   --&gt;&lt;!-- ================================================================= --&gt; &lt;!-- ================================================================= --&gt;&lt;!--                                                                   --&gt;&lt;!-- Effective POM for project                                         --&gt;&lt;!-- 'com.companyname.project-group:project-name:jar:1.0'              --&gt;&lt;!--                                                                   --&gt;&lt;!-- ================================================================= --&gt; &lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  &lt;groupId&gt;com.companyname.project-group&lt;/groupId&gt;  &lt;artifactId&gt;project&lt;/artifactId&gt;  &lt;version&gt;1.0&lt;/version&gt;  &lt;build&gt;    &lt;sourceDirectory&gt;C:\MVN\project\src\main\java&lt;/sourceDirectory&gt;    &lt;scriptSourceDirectory&gt;src/main/scripts&lt;/scriptSourceDirectory&gt;    &lt;testSourceDirectory&gt;C:\MVN\project\src\test\java&lt;/testSourceDirectory&gt;    &lt;outputDirectory&gt;C:\MVN\project\target\classes&lt;/outputDirectory&gt;    &lt;testOutputDirectory&gt;C:\MVN\project\target\test-classes&lt;/testOutputDirectory&gt;    &lt;resources&gt;      &lt;resource&gt;        &lt;mergeId&gt;resource-0&lt;/mergeId&gt;        &lt;directory&gt;C:\MVN\project\src\main\resources&lt;/directory&gt;      &lt;/resource&gt;    &lt;/resources&gt;    &lt;testResources&gt;      &lt;testResource&gt;        &lt;mergeId&gt;resource-1&lt;/mergeId&gt;        &lt;directory&gt;C:\MVN\project\src\test\resources&lt;/directory&gt;      &lt;/testResource&gt;    &lt;/testResources&gt;    &lt;directory&gt;C:\MVN\project\target&lt;/directory&gt;    &lt;finalName&gt;project-1.0&lt;/finalName&gt;    &lt;pluginManagement&gt;      &lt;plugins&gt;        &lt;plugin&gt;          &lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;          &lt;version&gt;1.3&lt;/version&gt;        &lt;/plugin&gt;        &lt;plugin&gt;          &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;          &lt;version&gt;2.2-beta-2&lt;/version&gt;        &lt;/plugin&gt;        &lt;plugin&gt;          &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;          &lt;version&gt;2.2&lt;/version&gt;        &lt;/plugin&gt;        &lt;plugin&gt;          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;          &lt;version&gt;2.0.2&lt;/version&gt;        &lt;/plugin&gt;        &lt;plugin&gt;          &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;          &lt;version&gt;2.0&lt;/version&gt;        &lt;/plugin&gt;        &lt;plugin&gt;          &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;          &lt;version&gt;2.4&lt;/version&gt;        &lt;/plugin&gt;        &lt;plugin&gt;          &lt;artifactId&gt;maven-ear-plugin&lt;/artifactId&gt;          &lt;version&gt;2.3.1&lt;/version&gt;        &lt;/plugin&gt;        &lt;plugin&gt;          &lt;artifactId&gt;maven-ejb-plugin&lt;/artifactId&gt;          &lt;version&gt;2.1&lt;/version&gt;        &lt;/plugin&gt;        &lt;plugin&gt;          &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;          &lt;version&gt;2.2&lt;/version&gt;        &lt;/plugin&gt;        &lt;plugin&gt;          &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;          &lt;version&gt;2.2&lt;/version&gt;        &lt;/plugin&gt;        &lt;plugin&gt;          &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt;          &lt;version&gt;2.5&lt;/version&gt;        &lt;/plugin&gt;        &lt;plugin&gt;          &lt;artifactId&gt;maven-plugin-plugin&lt;/artifactId&gt;          &lt;version&gt;2.4.3&lt;/version&gt;        &lt;/plugin&gt;        &lt;plugin&gt;          &lt;artifactId&gt;maven-rar-plugin&lt;/artifactId&gt;          &lt;version&gt;2.2&lt;/version&gt;        &lt;/plugin&gt;        &lt;plugin&gt;          &lt;artifactId&gt;maven-release-plugin&lt;/artifactId&gt;          &lt;version&gt;2.0-beta-8&lt;/version&gt;        &lt;/plugin&gt;        &lt;plugin&gt;          &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;          &lt;version&gt;2.3&lt;/version&gt;        &lt;/plugin&gt;        &lt;plugin&gt;          &lt;artifactId&gt;maven-site-plugin&lt;/artifactId&gt;          &lt;version&gt;2.0-beta-7&lt;/version&gt;        &lt;/plugin&gt;        &lt;plugin&gt;          &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;          &lt;version&gt;2.0.4&lt;/version&gt;        &lt;/plugin&gt;        &lt;plugin&gt;          &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;          &lt;version&gt;2.4.3&lt;/version&gt;        &lt;/plugin&gt;        &lt;plugin&gt;          &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;          &lt;version&gt;2.1-alpha-2&lt;/version&gt;        &lt;/plugin&gt;      &lt;/plugins&gt;    &lt;/pluginManagement&gt;    &lt;plugins&gt;      &lt;plugin&gt;        &lt;artifactId&gt;maven-help-plugin&lt;/artifactId&gt;        &lt;version&gt;2.1.1&lt;/version&gt;      &lt;/plugin&gt;    &lt;/plugins&gt;      &lt;/build&gt;  &lt;repositories&gt;    &lt;repository&gt;      &lt;snapshots&gt;        &lt;enabled&gt;false&lt;/enabled&gt;      &lt;/snapshots&gt;      &lt;id&gt;central&lt;/id&gt;      &lt;name&gt;Maven Repository Switchboard&lt;/name&gt;      &lt;url&gt;http://repo1.maven.org/maven2&lt;/url&gt;    &lt;/repository&gt;  &lt;/repositories&gt;  &lt;pluginRepositories&gt;    &lt;pluginRepository&gt;      &lt;releases&gt;        &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;      &lt;/releases&gt;      &lt;snapshots&gt;        &lt;enabled&gt;false&lt;/enabled&gt;      &lt;/snapshots&gt;      &lt;id&gt;central&lt;/id&gt;      &lt;name&gt;Maven Plugin Repository&lt;/name&gt;      &lt;url&gt;http://repo1.maven.org/maven2&lt;/url&gt;    &lt;/pluginRepository&gt;  &lt;/pluginRepositories&gt;  &lt;reporting&gt;    &lt;outputDirectory&gt;C:\MVN\project\target/site&lt;/outputDirectory&gt;  &lt;/reporting&gt;  &lt;/project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>在命令控制台，进入 MVN/project 目录，执行以下命令：</p><pre class="line-numbers language-none"><code class="language-none">C:\MVN\project&gt;mvn help:effective-pom<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Maven 将会开始处理并显示 effective-pom</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">[INFO] Scanning for projects...Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom...[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 01:36 min[INFO] Finished at: 2018-09-05T11:31:28+08:00[INFO] Final Memory: 15M/149M[INFO] ------------------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-POM-标签大全详解"><a href="#2-POM-标签大全详解" class="headerlink" title="2. POM 标签大全详解"></a>2. POM 标签大全详解</h3><pre class="line-numbers language-none"><code class="language-none">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0http://maven.apache.org/maven-v4_0_0.xsd"&gt;    &lt;!--父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和         version。 --&gt;    &lt;parent&gt;        &lt;!--被继承的父项目的构件标识符 --&gt;        &lt;artifactId /&gt;        &lt;!--被继承的父项目的全球唯一标识符 --&gt;        &lt;groupId /&gt;        &lt;!--被继承的父项目的版本 --&gt;        &lt;version /&gt;        &lt;!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项             目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。 --&gt;        &lt;relativePath /&gt;    &lt;/parent&gt;    &lt;!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 --&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app --&gt;    &lt;groupId&gt;asia.banseon&lt;/groupId&gt;    &lt;!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个         特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源 码，二进制发布和WARs等。 --&gt;    &lt;artifactId&gt;banseon-maven2&lt;/artifactId&gt;    &lt;!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 --&gt;    &lt;packaging&gt;jar&lt;/packaging&gt;    &lt;!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 --&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;!--项目的名称, Maven产生的文档用 --&gt;    &lt;name&gt;banseon-maven&lt;/name&gt;    &lt;!--项目主页的URL, Maven产生的文档用 --&gt;    &lt;url&gt;http://www.baidu.com/banseon&lt;/url&gt;    &lt;!-- 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标         签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。 --&gt;    &lt;description&gt;A maven project to study maven.&lt;/description&gt;    &lt;!--描述了这个项目构建环境中的前提条件。 --&gt;    &lt;prerequisites&gt;        &lt;!--构建该项目或使用该插件所需要的Maven的最低版本 --&gt;        &lt;maven /&gt;    &lt;/prerequisites&gt;    &lt;!--项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira --&gt;    &lt;issueManagement&gt;        &lt;!--问题管理系统（例如jira）的名字， --&gt;        &lt;system&gt;jira&lt;/system&gt;        &lt;!--该项目使用的问题管理系统的URL --&gt;        &lt;url&gt;http://jira.baidu.com/banseon&lt;/url&gt;    &lt;/issueManagement&gt;    &lt;!--项目持续集成信息 --&gt;    &lt;ciManagement&gt;        &lt;!--持续集成系统的名字，例如continuum --&gt;        &lt;system /&gt;        &lt;!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 --&gt;        &lt;url /&gt;        &lt;!--构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） --&gt;        &lt;notifiers&gt;            &lt;!--配置一种方式，当构建中断时，以该方式通知用户/开发者 --&gt;            &lt;notifier&gt;                &lt;!--传送通知的途径 --&gt;                &lt;type /&gt;                &lt;!--发生错误时是否通知 --&gt;                &lt;sendOnError /&gt;                &lt;!--构建失败时是否通知 --&gt;                &lt;sendOnFailure /&gt;                &lt;!--构建成功时是否通知 --&gt;                &lt;sendOnSuccess /&gt;                &lt;!--发生警告时是否通知 --&gt;                &lt;sendOnWarning /&gt;                &lt;!--不赞成使用。通知发送到哪里 --&gt;                &lt;address /&gt;                &lt;!--扩展配置项 --&gt;                &lt;configuration /&gt;            &lt;/notifier&gt;        &lt;/notifiers&gt;    &lt;/ciManagement&gt;    &lt;!--项目创建年份，4位数字。当产生版权信息时需要使用这个值。 --&gt;    &lt;inceptionYear /&gt;    &lt;!--项目相关邮件列表信息 --&gt;    &lt;mailingLists&gt;        &lt;!--该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。 --&gt;        &lt;mailingList&gt;            &lt;!--邮件的名称 --&gt;            &lt;name&gt;Demo&lt;/name&gt;            &lt;!--发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;            &lt;post&gt;banseon@126.com&lt;/post&gt;            &lt;!--订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;            &lt;subscribe&gt;banseon@126.com&lt;/subscribe&gt;            &lt;!--取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;            &lt;unsubscribe&gt;banseon@126.com&lt;/unsubscribe&gt;            &lt;!--你可以浏览邮件信息的URL --&gt;            &lt;archive&gt;http:/hi.baidu.com/banseon/demo/dev/&lt;/archive&gt;        &lt;/mailingList&gt;    &lt;/mailingLists&gt;    &lt;!--项目开发者列表 --&gt;    &lt;developers&gt;        &lt;!--某个项目开发者的信息 --&gt;        &lt;developer&gt;            &lt;!--SCM里项目开发者的唯一标识符 --&gt;            &lt;id&gt;HELLO WORLD&lt;/id&gt;            &lt;!--项目开发者的全名 --&gt;            &lt;name&gt;banseon&lt;/name&gt;            &lt;!--项目开发者的email --&gt;            &lt;email&gt;banseon@126.com&lt;/email&gt;            &lt;!--项目开发者的主页的URL --&gt;            &lt;url /&gt;            &lt;!--项目开发者在项目中扮演的角色，角色元素描述了各种角色 --&gt;            &lt;roles&gt;                &lt;role&gt;Project Manager&lt;/role&gt;                &lt;role&gt;Architect&lt;/role&gt;            &lt;/roles&gt;            &lt;!--项目开发者所属组织 --&gt;            &lt;organization&gt;demo&lt;/organization&gt;            &lt;!--项目开发者所属组织的URL --&gt;            &lt;organizationUrl&gt;http://hi.baidu.com/banseon&lt;/organizationUrl&gt;            &lt;!--项目开发者属性，如即时消息如何处理等 --&gt;            &lt;properties&gt;                &lt;dept&gt;No&lt;/dept&gt;            &lt;/properties&gt;            &lt;!--项目开发者所在时区， -11到12范围内的整数。 --&gt;            &lt;timezone&gt;-5&lt;/timezone&gt;        &lt;/developer&gt;    &lt;/developers&gt;    &lt;!--项目的其他贡献者列表 --&gt;    &lt;contributors&gt;        &lt;!--项目的其他贡献者。参见developers/developer元素 --&gt;        &lt;contributor&gt;            &lt;name /&gt;            &lt;email /&gt;            &lt;url /&gt;            &lt;organization /&gt;            &lt;organizationUrl /&gt;            &lt;roles /&gt;            &lt;timezone /&gt;            &lt;properties /&gt;        &lt;/contributor&gt;    &lt;/contributors&gt;    &lt;!--该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。 --&gt;    &lt;licenses&gt;        &lt;!--描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。 --&gt;        &lt;license&gt;            &lt;!--license用于法律上的名称 --&gt;            &lt;name&gt;Apache 2&lt;/name&gt;            &lt;!--官方的license正文页面的URL --&gt;            &lt;url&gt;http://www.baidu.com/banseon/LICENSE-2.0.txt&lt;/url&gt;            &lt;!--项目分发的主要方式： repo，可以从Maven库下载 manual， 用户必须手动下载和安装依赖 --&gt;            &lt;distribution&gt;repo&lt;/distribution&gt;            &lt;!--关于license的补充信息 --&gt;            &lt;comments&gt;A business-friendly OSS license&lt;/comments&gt;        &lt;/license&gt;    &lt;/licenses&gt;    &lt;!--SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。 --&gt;    &lt;scm&gt;        &lt;!--SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 --&gt;        &lt;connection&gt;            scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)        &lt;/connection&gt;        &lt;!--给开发者使用的，类似connection元素。即该连接不仅仅只读 --&gt;        &lt;developerConnection&gt;            scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk        &lt;/developerConnection&gt;        &lt;!--当前代码的标签，在开发阶段默认为HEAD --&gt;        &lt;tag /&gt;        &lt;!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 --&gt;        &lt;url&gt;http://svn.baidu.com/banseon&lt;/url&gt;    &lt;/scm&gt;    &lt;!--描述项目所属组织的各种属性。Maven产生的文档用 --&gt;    &lt;organization&gt;        &lt;!--组织的全名 --&gt;        &lt;name&gt;demo&lt;/name&gt;        &lt;!--组织主页的URL --&gt;        &lt;url&gt;http://www.baidu.com/banseon&lt;/url&gt;    &lt;/organization&gt;    &lt;!--构建项目需要的信息 --&gt;    &lt;build&gt;        &lt;!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;        &lt;sourceDirectory /&gt;        &lt;!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 --&gt;        &lt;scriptSourceDirectory /&gt;        &lt;!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;        &lt;testSourceDirectory /&gt;        &lt;!--被编译过的应用程序class文件存放的目录。 --&gt;        &lt;outputDirectory /&gt;        &lt;!--被编译过的测试class文件存放的目录。 --&gt;        &lt;testOutputDirectory /&gt;        &lt;!--使用来自该项目的一系列构建扩展 --&gt;        &lt;extensions&gt;            &lt;!--描述使用到的构建扩展。 --&gt;            &lt;extension&gt;                &lt;!--构建扩展的groupId --&gt;                &lt;groupId /&gt;                &lt;!--构建扩展的artifactId --&gt;                &lt;artifactId /&gt;                &lt;!--构建扩展的版本 --&gt;                &lt;version /&gt;            &lt;/extension&gt;        &lt;/extensions&gt;        &lt;!--当项目没有规定目标（Maven2 叫做阶段）时的默认值 --&gt;        &lt;defaultGoal /&gt;        &lt;!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。 --&gt;        &lt;resources&gt;            &lt;!--这个元素描述了项目相关或测试相关的所有资源路径 --&gt;            &lt;resource&gt;                &lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。举个例                     子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 --&gt;                &lt;targetPath /&gt;                &lt;!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。 --&gt;                &lt;filtering /&gt;                &lt;!--描述存放资源的目录，该路径相对POM路径 --&gt;                &lt;directory /&gt;                &lt;!--包含的模式列表，例如**/*.xml. --&gt;                &lt;includes /&gt;                &lt;!--排除的模式列表，例如**/*.xml --&gt;                &lt;excludes /&gt;            &lt;/resource&gt;        &lt;/resources&gt;        &lt;!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。 --&gt;        &lt;testResources&gt;            &lt;!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明 --&gt;            &lt;testResource&gt;                &lt;targetPath /&gt;                &lt;filtering /&gt;                &lt;directory /&gt;                &lt;includes /&gt;                &lt;excludes /&gt;            &lt;/testResource&gt;        &lt;/testResources&gt;        &lt;!--构建产生的所有文件存放的目录 --&gt;        &lt;directory /&gt;        &lt;!--产生的构件的文件名，默认值是${artifactId}-${version}。 --&gt;        &lt;finalName /&gt;        &lt;!--当filtering开关打开时，使用到的过滤器属性文件列表 --&gt;        &lt;filters /&gt;        &lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置 --&gt;        &lt;pluginManagement&gt;            &lt;!--使用的插件列表 。 --&gt;            &lt;plugins&gt;                &lt;!--plugin元素包含描述插件所需要的信息。 --&gt;                &lt;plugin&gt;                    &lt;!--插件在仓库里的group ID --&gt;                    &lt;groupId /&gt;                    &lt;!--插件在仓库里的artifact ID --&gt;                    &lt;artifactId /&gt;                    &lt;!--被使用的插件的版本（或版本范围） --&gt;                    &lt;version /&gt;                    &lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。 --&gt;                    &lt;extensions /&gt;                    &lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&gt;                    &lt;executions&gt;                        &lt;!--execution元素包含了插件执行需要的信息 --&gt;                        &lt;execution&gt;                            &lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&gt;                            &lt;id /&gt;                            &lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&gt;                            &lt;phase /&gt;                            &lt;!--配置的执行目标 --&gt;                            &lt;goals /&gt;                            &lt;!--配置是否被传播到子POM --&gt;                            &lt;inherited /&gt;                            &lt;!--作为DOM对象的配置 --&gt;                            &lt;configuration /&gt;                        &lt;/execution&gt;                    &lt;/executions&gt;                    &lt;!--项目引入插件所需要的额外依赖 --&gt;                    &lt;dependencies&gt;                        &lt;!--参见dependencies/dependency元素 --&gt;                        &lt;dependency&gt;                            ......                        &lt;/dependency&gt;                    &lt;/dependencies&gt;                    &lt;!--任何配置是否被传播到子项目 --&gt;                    &lt;inherited /&gt;                    &lt;!--作为DOM对象的配置 --&gt;                    &lt;configuration /&gt;                &lt;/plugin&gt;            &lt;/plugins&gt;        &lt;/pluginManagement&gt;        &lt;!--使用的插件列表 --&gt;        &lt;plugins&gt;            &lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt;            &lt;plugin&gt;                &lt;groupId /&gt;                &lt;artifactId /&gt;                &lt;version /&gt;                &lt;extensions /&gt;                &lt;executions&gt;                    &lt;execution&gt;                        &lt;id /&gt;                        &lt;phase /&gt;                        &lt;goals /&gt;                        &lt;inherited /&gt;                        &lt;configuration /&gt;                    &lt;/execution&gt;                &lt;/executions&gt;                &lt;dependencies&gt;                    &lt;!--参见dependencies/dependency元素 --&gt;                    &lt;dependency&gt;                        ......                    &lt;/dependency&gt;                &lt;/dependencies&gt;                &lt;goals /&gt;                &lt;inherited /&gt;                &lt;configuration /&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;    &lt;/build&gt;    &lt;!--在列的项目构建profile，如果被激活，会修改构建处理 --&gt;    &lt;profiles&gt;        &lt;!--根据环境参数或命令行参数激活某个构建处理 --&gt;        &lt;profile&gt;            &lt;!--构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。 --&gt;            &lt;id /&gt;            &lt;!--自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它 能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。 --&gt;            &lt;activation&gt;                &lt;!--profile默认是否激活的标志 --&gt;                &lt;activeByDefault /&gt;                &lt;!--当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。 --&gt;                &lt;jdk /&gt;                &lt;!--当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。 --&gt;                &lt;os&gt;                    &lt;!--激活profile的操作系统的名字 --&gt;                    &lt;name&gt;Windows XP&lt;/name&gt;                    &lt;!--激活profile的操作系统所属家族(如 'windows') --&gt;                    &lt;family&gt;Windows&lt;/family&gt;                    &lt;!--激活profile的操作系统体系结构 --&gt;                    &lt;arch&gt;x86&lt;/arch&gt;                    &lt;!--激活profile的操作系统版本 --&gt;                    &lt;version&gt;5.1.2600&lt;/version&gt;                &lt;/os&gt;                &lt;!--如果Maven检测到某一个属性（其值可以在POM中通过${名称}引用），其拥有对应的名称和值，Profile就会被激活。如果值 字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段 --&gt;                &lt;property&gt;                    &lt;!--激活profile的属性的名称 --&gt;                    &lt;name&gt;mavenVersion&lt;/name&gt;                    &lt;!--激活profile的属性的值 --&gt;                    &lt;value&gt;2.0.3&lt;/value&gt;                &lt;/property&gt;                &lt;!--提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活 profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 --&gt;                &lt;file&gt;                    &lt;!--如果指定的文件存在，则激活profile。 --&gt;                    &lt;exists&gt;/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/                    &lt;/exists&gt;                    &lt;!--如果指定的文件不存在，则激活profile。 --&gt;                    &lt;missing&gt;/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/                    &lt;/missing&gt;                &lt;/file&gt;            &lt;/activation&gt;            &lt;!--构建项目所需要的信息。参见build元素 --&gt;            &lt;build&gt;                &lt;defaultGoal /&gt;                &lt;resources&gt;                    &lt;resource&gt;                        &lt;targetPath /&gt;                        &lt;filtering /&gt;                        &lt;directory /&gt;                        &lt;includes /&gt;                        &lt;excludes /&gt;                    &lt;/resource&gt;                &lt;/resources&gt;                &lt;testResources&gt;                    &lt;testResource&gt;                        &lt;targetPath /&gt;                        &lt;filtering /&gt;                        &lt;directory /&gt;                        &lt;includes /&gt;                        &lt;excludes /&gt;                    &lt;/testResource&gt;                &lt;/testResources&gt;                &lt;directory /&gt;                &lt;finalName /&gt;                &lt;filters /&gt;                &lt;pluginManagement&gt;                    &lt;plugins&gt;                        &lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt;                        &lt;plugin&gt;                            &lt;groupId /&gt;                            &lt;artifactId /&gt;                            &lt;version /&gt;                            &lt;extensions /&gt;                            &lt;executions&gt;                                &lt;execution&gt;                                    &lt;id /&gt;                                    &lt;phase /&gt;                                    &lt;goals /&gt;                                    &lt;inherited /&gt;                                    &lt;configuration /&gt;                                &lt;/execution&gt;                            &lt;/executions&gt;                                                        &lt;dependencies&gt;                                &lt;!--参见dependencies/dependency元素 --&gt;                                &lt;dependency&gt;                                    ......                                &lt;/dependency&gt;                            &lt;/dependencies&gt;                            &lt;goals /&gt;                            &lt;inherited /&gt;                            &lt;configuration /&gt;                        &lt;/plugin&gt;                    &lt;/plugins&gt;                &lt;/pluginManagement&gt;                &lt;plugins&gt;                    &lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt;                    &lt;plugin&gt;                        &lt;groupId /&gt;                        &lt;artifactId /&gt;                        &lt;version /&gt;                        &lt;extensions /&gt;                        &lt;executions&gt;                            &lt;execution&gt;                                &lt;id /&gt;                                &lt;phase /&gt;                                &lt;goals /&gt;                                &lt;inherited /&gt;                                &lt;configuration /&gt;                            &lt;/execution&gt;                        &lt;/executions&gt;                        &lt;dependencies&gt;                            &lt;!--参见dependencies/dependency元素 --&gt;                            &lt;dependency&gt;                                ......                            &lt;/dependency&gt;                        &lt;/dependencies&gt;                        &lt;goals /&gt;                        &lt;inherited /&gt;                        &lt;configuration /&gt;                    &lt;/plugin&gt;                &lt;/plugins&gt;            &lt;/build&gt;            &lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;            &lt;modules /&gt;            &lt;!--发现依赖和扩展的远程仓库列表。 --&gt;            &lt;repositories&gt;                &lt;!--参见repositories/repository元素 --&gt;                &lt;repository&gt;                    &lt;releases&gt;                        &lt;enabled /&gt;                        &lt;updatePolicy /&gt;                        &lt;checksumPolicy /&gt;                    &lt;/releases&gt;                    &lt;snapshots&gt;                        &lt;enabled /&gt;                        &lt;updatePolicy /&gt;                        &lt;checksumPolicy /&gt;                    &lt;/snapshots&gt;                    &lt;id /&gt;                    &lt;name /&gt;                    &lt;url /&gt;                    &lt;layout /&gt;                &lt;/repository&gt;            &lt;/repositories&gt;            &lt;!--发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;            &lt;pluginRepositories&gt;                &lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;                &lt;pluginRepository&gt;                    &lt;releases&gt;                        &lt;enabled /&gt;                        &lt;updatePolicy /&gt;                        &lt;checksumPolicy /&gt;                    &lt;/releases&gt;                    &lt;snapshots&gt;                        &lt;enabled /&gt;                        &lt;updatePolicy /&gt;                        &lt;checksumPolicy /&gt;                    &lt;/snapshots&gt;                    &lt;id /&gt;                    &lt;name /&gt;                    &lt;url /&gt;                    &lt;layout /&gt;                &lt;/pluginRepository&gt;            &lt;/pluginRepositories&gt;                        &lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;            &lt;dependencies&gt;                &lt;!--参见dependencies/dependency元素 --&gt;                &lt;dependency&gt;                    ......                &lt;/dependency&gt;            &lt;/dependencies&gt;            &lt;!--不赞成使用. 现在Maven忽略该元素. --&gt;            &lt;reports /&gt;            &lt;!--该元素包括使用报表插件产生报表的规范。当用户执行"mvn site"，这些报表就会运行。 在页面导航栏能看到所有报表的链接。参见reporting元素 --&gt;            &lt;reporting&gt;                ......            &lt;/reporting&gt;            &lt;!--参见dependencyManagement元素 --&gt;            &lt;dependencyManagement&gt;                &lt;dependencies&gt;                    &lt;!--参见dependencies/dependency元素 --&gt;                    &lt;dependency&gt;                        ......                    &lt;/dependency&gt;                &lt;/dependencies&gt;            &lt;/dependencyManagement&gt;            &lt;!--参见distributionManagement元素 --&gt;            &lt;distributionManagement&gt;                ......            &lt;/distributionManagement&gt;            &lt;!--参见properties元素 --&gt;            &lt;properties /&gt;        &lt;/profile&gt;    &lt;/profiles&gt;    &lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;    &lt;modules /&gt;    &lt;!--发现依赖和扩展的远程仓库列表。 --&gt;    &lt;repositories&gt;        &lt;!--包含需要连接到远程仓库的信息 --&gt;        &lt;repository&gt;            &lt;!--如何处理远程仓库里发布版本的下载 --&gt;            &lt;releases&gt;                &lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;                &lt;enabled /&gt;                &lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt;                &lt;updatePolicy /&gt;                &lt;!--当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。 --&gt;                &lt;checksumPolicy /&gt;            &lt;/releases&gt;            &lt;!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的                 策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 --&gt;            &lt;snapshots&gt;                &lt;enabled /&gt;                &lt;updatePolicy /&gt;                &lt;checksumPolicy /&gt;            &lt;/snapshots&gt;            &lt;!--远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 --&gt;            &lt;id&gt;banseon-repository-proxy&lt;/id&gt;            &lt;!--远程仓库名称 --&gt;            &lt;name&gt;banseon-repository-proxy&lt;/name&gt;            &lt;!--远程仓库URL，按protocol://hostname/path形式 --&gt;            &lt;url&gt;http://192.168.1.169:9999/repository/&lt;/url&gt;            &lt;!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然                 而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt;            &lt;layout&gt;default&lt;/layout&gt;        &lt;/repository&gt;    &lt;/repositories&gt;    &lt;!--发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;    &lt;pluginRepositories&gt;        &lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;        &lt;pluginRepository&gt;            ......        &lt;/pluginRepository&gt;    &lt;/pluginRepositories&gt;      &lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;!--依赖的group ID --&gt;            &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;            &lt;!--依赖的artifact ID --&gt;            &lt;artifactId&gt;maven-artifact&lt;/artifactId&gt;            &lt;!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 --&gt;            &lt;version&gt;3.8.1&lt;/version&gt;            &lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应，                 尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，就可以在 plugin里定义新的类型。所以前面的类型的例子不完整。 --&gt;            &lt;type&gt;jar&lt;/type&gt;            &lt;!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成                 JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。 --&gt;            &lt;classifier&gt;&lt;/classifier&gt;            &lt;!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 - compile ：默认范围，用于编译 - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath                 - runtime: 在执行时需要使用 - test: 用于test任务时使用 - system: 需要外在提供相应的元素。通过systemPath来取得                 - systemPath: 仅用于范围为system。提供相应的路径 - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --&gt;            &lt;scope&gt;test&lt;/scope&gt;            &lt;!--仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如${java.home}。 --&gt;            &lt;systemPath&gt;&lt;/systemPath&gt;            &lt;!--当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题 --&gt;            &lt;exclusions&gt;                &lt;exclusion&gt;                    &lt;artifactId&gt;spring-core&lt;/artifactId&gt;                    &lt;groupId&gt;org.springframework&lt;/groupId&gt;                &lt;/exclusion&gt;            &lt;/exclusions&gt;            &lt;!--可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。 --&gt;            &lt;optional&gt;true&lt;/optional&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;    &lt;!--不赞成使用. 现在Maven忽略该元素. --&gt;    &lt;reports&gt;&lt;/reports&gt;    &lt;!--该元素描述使用报表插件产生报表的规范。当用户执行"mvn site"，这些报表就会运行。 在页面导航栏能看到所有报表的链接。 --&gt;    &lt;reporting&gt;        &lt;!--true，则，网站不包括默认的报表。这包括"项目信息"菜单中的报表。 --&gt;        &lt;excludeDefaults /&gt;        &lt;!--所有产生的报表存放到哪里。默认值是${project.build.directory}/site。 --&gt;        &lt;outputDirectory /&gt;        &lt;!--使用的报表插件和他们的配置。 --&gt;        &lt;plugins&gt;            &lt;!--plugin元素包含描述报表插件需要的信息 --&gt;            &lt;plugin&gt;                &lt;!--报表插件在仓库里的group ID --&gt;                &lt;groupId /&gt;                &lt;!--报表插件在仓库里的artifact ID --&gt;                &lt;artifactId /&gt;                &lt;!--被使用的报表插件的版本（或版本范围） --&gt;                &lt;version /&gt;                &lt;!--任何配置是否被传播到子项目 --&gt;                &lt;inherited /&gt;                &lt;!--报表插件的配置 --&gt;                &lt;configuration /&gt;                &lt;!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标 --&gt;                &lt;reportSets&gt;                    &lt;!--表示报表的一个集合，以及产生该集合的配置 --&gt;                    &lt;reportSet&gt;                        &lt;!--报表集合的唯一标识符，POM继承时用到 --&gt;                        &lt;id /&gt;                        &lt;!--产生报表集合时，被使用的报表的配置 --&gt;                        &lt;configuration /&gt;                        &lt;!--配置是否被继承到子POMs --&gt;                        &lt;inherited /&gt;                        &lt;!--这个集合里使用到哪些报表 --&gt;                        &lt;reports /&gt;                    &lt;/reportSet&gt;                &lt;/reportSets&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;    &lt;/reporting&gt;    &lt;!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和 artifact         ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息。 --&gt;    &lt;dependencyManagement&gt;        &lt;dependencies&gt;            &lt;!--参见dependencies/dependency元素 --&gt;            &lt;dependency&gt;                ......            &lt;/dependency&gt;        &lt;/dependencies&gt;    &lt;/dependencyManagement&gt;    &lt;!--项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。 --&gt;    &lt;distributionManagement&gt;        &lt;!--部署项目产生的构件到远程仓库需要的信息 --&gt;        &lt;repository&gt;            &lt;!--是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories/repository元素 --&gt;            &lt;uniqueVersion /&gt;            &lt;id&gt;banseon-maven2&lt;/id&gt;            &lt;name&gt;banseon maven2&lt;/name&gt;            &lt;url&gt;file://${basedir}/target/deploy&lt;/url&gt;            &lt;layout /&gt;        &lt;/repository&gt;        &lt;!--构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见distributionManagement/repository元素 --&gt;        &lt;snapshotRepository&gt;            &lt;uniqueVersion /&gt;            &lt;id&gt;banseon-maven2&lt;/id&gt;            &lt;name&gt;Banseon-maven2 Snapshot Repository&lt;/name&gt;            &lt;url&gt;scp://svn.baidu.com/banseon:/usr/local/maven-snapshot&lt;/url&gt;            &lt;layout /&gt;        &lt;/snapshotRepository&gt;        &lt;!--部署项目的网站需要的信息 --&gt;        &lt;site&gt;            &lt;!--部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 --&gt;            &lt;id&gt;banseon-site&lt;/id&gt;            &lt;!--部署位置的名称 --&gt;            &lt;name&gt;business api website&lt;/name&gt;            &lt;!--部署位置的URL，按protocol://hostname/path形式 --&gt;            &lt;url&gt;                scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web            &lt;/url&gt;        &lt;/site&gt;        &lt;!--项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。 --&gt;        &lt;downloadUrl /&gt;        &lt;!--如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。 --&gt;        &lt;relocation&gt;            &lt;!--构件新的group ID --&gt;            &lt;groupId /&gt;            &lt;!--构件新的artifact ID --&gt;            &lt;artifactId /&gt;            &lt;!--构件新的版本号 --&gt;            &lt;version /&gt;            &lt;!--显示给用户的，关于移动的额外信息，例如原因。 --&gt;            &lt;message /&gt;        &lt;/relocation&gt;        &lt;!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值有：none（默认），converted（仓库管理员从             Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部 署），verified（被核实时正确的和最终的）。 --&gt;        &lt;status /&gt;    &lt;/distributionManagement&gt;    &lt;!--以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是&lt;name&gt;value&lt;/name&gt;。 --&gt;    &lt;properties /&gt;&lt;/project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Maven-结构生命周期"><a href="#3-Maven-结构生命周期" class="headerlink" title="3. Maven 结构生命周期"></a>3. Maven 结构生命周期</h3><p><img src="/../Maven/MavenLife.png" alt="Maven结构生命周期图片"></p><p>阶段    处理        描述(为了完成 default 生命周期<br>                            这些阶段(包括其他未在上面罗列的生命周期阶段)将被按顺序地执行)<br>验证      validate    验证项目验证项目是否正确且所有必须信息是可用的<br>编译      compile      执行编译源代码编译在此阶段完成<br>测试      Test        测试使用适当的单元测试框架（例如JUnit）运行测试。<br>包装      package      打包将编译后的代码打包成可分发的格式，例如 JAR 或 WAR<br>检查      verify      检查对集成测试的结果进行检查，以保证质量达标<br>安装      install      安装安装打包的项目到本地仓库，以供其他项目使用<br>部署      deploy      部署拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程</p><h4 id="1-Maven-有以下三个标准的生命周期："><a href="#1-Maven-有以下三个标准的生命周期：" class="headerlink" title="1. Maven 有以下三个标准的生命周期："></a>1. Maven 有以下三个标准的生命周期：</h4><h5 id="1-Clean-生命周期："><a href="#1-Clean-生命周期：" class="headerlink" title="1. Clean 生命周期："></a>1. Clean 生命周期：</h5><p>clean：删除目标目录中的编译输出文件。这通常是在构建之前执行的，以确保项目从一个干净的状态开始。</p><p>当我们执行 mvn post-clean 命令时，Maven 调用 clean 生命周期，它包含以下阶段：</p><ul><li>pre-clean：执行一些需要在clean之前完成的工作</li><li><mark class="hl-label pink">clean</mark> ：移除所有上一次构建生成的文件</li><li>post-clean：执行一些需要在clean之后立刻完成的工作</li></ul><p>mvn clean 中的 clean 就是上面的 clean，在一个生命周期中，运行某个阶段的时候，它之前的所有阶段都会被运行，也就是说，如果执行 mvn clean 将运行以下两个生命周期阶段：</p><pre class="line-numbers language-none"><code class="language-none">pre-clean, clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果我们运行 mvn post-clean ，则运行以下三个生命周期阶段：</p><pre class="line-numbers language-none"><code class="language-none">pre-clean, clean, post-clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="1-clean-生命周期的各个阶段显示文本信息"><a href="#1-clean-生命周期的各个阶段显示文本信息" class="headerlink" title="1. clean 生命周期的各个阶段显示文本信息"></a>1. clean 生命周期的各个阶段显示文本信息</h6><p>我们可以通过在上面的 clean 生命周期的任何阶段定义目标来修改这部分的操作行为。</p><p>在下面的例子中，我们将 maven-antrun-plugin:run 目标添加到 pre-clean、clean 和 post-clean 阶段中。这样我们可以在 clean 生命周期的各个阶段显示文本信息。</p><p>我们已经在 C:\MVN\project 目录下创建了一个 pom.xml 文件。</p><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">显示 clean 生命周期的所有阶段</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;project xmlns="http://maven.apache.org/POM/4.0.0"   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0   http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;groupId&gt;com.companyname.projectgroup&lt;/groupId&gt;&lt;artifactId&gt;project&lt;/artifactId&gt;&lt;version&gt;1.0&lt;/version&gt;&lt;build&gt;&lt;plugins&gt;   &lt;plugin&gt;      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;      &lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;      &lt;version&gt;1.1&lt;/version&gt;      &lt;executions&gt;          &lt;execution&gt;            &lt;id&gt;id.pre-clean&lt;/id&gt;            &lt;phase&gt;pre-clean&lt;/phase&gt;            &lt;goals&gt;                &lt;goal&gt;run&lt;/goal&gt;            &lt;/goals&gt;            &lt;configuration&gt;                &lt;tasks&gt;                  &lt;echo&gt;pre-clean phase&lt;/echo&gt;                &lt;/tasks&gt;            &lt;/configuration&gt;          &lt;/execution&gt;          &lt;execution&gt;            &lt;id&gt;id.clean&lt;/id&gt;            &lt;phase&gt;clean&lt;/phase&gt;            &lt;goals&gt;              &lt;goal&gt;run&lt;/goal&gt;            &lt;/goals&gt;            &lt;configuration&gt;                &lt;tasks&gt;                  &lt;echo&gt;clean phase&lt;/echo&gt;                &lt;/tasks&gt;            &lt;/configuration&gt;          &lt;/execution&gt;          &lt;execution&gt;            &lt;id&gt;id.post-clean&lt;/id&gt;            &lt;phase&gt;post-clean&lt;/phase&gt;            &lt;goals&gt;                &lt;goal&gt;run&lt;/goal&gt;            &lt;/goals&gt;            &lt;configuration&gt;                &lt;tasks&gt;                  &lt;echo&gt;post-clean phase&lt;/echo&gt;                &lt;/tasks&gt;            &lt;/configuration&gt;          &lt;/execution&gt;      &lt;/executions&gt;   &lt;/plugin&gt;&lt;/plugins&gt;&lt;/build&gt;&lt;/project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">现在打开命令控制台，跳转到 pom.xml 所在目录（C:\MVN\project&gt;），并执行下面的  mvn post-clean 命令。Maven 将会开始处理并显示 clean 生命周期的所有阶段。[INFO] Scanning for projects...[INFO] ------------------------------------------------------------------[INFO] Building Unnamed - com.companyname.projectgroup:project:jar:1.0[INFO]    task-segment: [post-clean][INFO] ------------------------------------------------------------------[INFO] [antrun:run {execution: id.pre-clean}][INFO] Executing tasks     [echo] pre-clean phase[INFO] Executed tasks[INFO] [clean:clean {execution: default-clean}][INFO] [antrun:run {execution: id.clean}][INFO] Executing tasks     [echo] clean phase[INFO] Executed tasks[INFO] [antrun:run {execution: id.post-clean}][INFO] Executing tasks     [echo] post-clean phase[INFO] Executed tasks[INFO] ------------------------------------------------------------------[INFO] BUILD SUCCESSFUL[INFO] ------------------------------------------------------------------[INFO] Total time: &lt; 1 second[INFO] Finished at: Sat Jul 07 13:38:59 IST 2012[INFO] Final Memory: 4M/44M[INFO] ------------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h5 id="2-Default-生命周期（也称为-Build-生命周期）："><a href="#2-Default-生命周期（也称为-Build-生命周期）：" class="headerlink" title="2. Default 生命周期（也称为 Build 生命周期）："></a>2. Default 生命周期（也称为 Build 生命周期）：</h5><ul><li>validate：验证项目的正确性，例如检查项目的版本是否正确。</li><li><mark class="hl-label pink">compile</mark> ：编译项目的源代码。</li><li><mark class="hl-label pink">test</mark> ：运行项目的单元测试。</li><li><mark class="hl-label pink">package</mark> ：将编译后的代码打包成可分发的格式，例如 JAR 或 WAR。</li><li>verify：对项目进行额外的检查以确保质量。</li><li><mark class="hl-label pink">install</mark> ：将项目的构建结果安装到本地 Maven 仓库中，以供其他项目使用。</li><li><mark class="hl-label pink">deploy</mark> ：将项目的构建结果复制到远程仓库，以供其他开发人员或团队使用。</li></ul><p>生命周期阶段描述<br>validate（校验）                    校验项目是否正确并且所有必要的信息可以完成项目的构建过程。<br>initialize（初始化）                初始化构建状态，比如设置属性值。<br>generate-sources（生成源代码）      生成包含在编译阶段中的任何源代码。<br>process-sources（处理源代码）        处理源代码，比如说，过滤任意值。<br>generate-resources（生成资源文件）    生成将会包含在项目包中的资源文件。<br>process-resources （处理资源文件）  复制和处理资源到目标目录，为打包阶段最好准备。<br>compile（编译）                       编译项目的源代码。<br>process-classes（处理类文件）        处理编译生成的文件，比如说对Java class文件做字节码改善优化。<br>generate-test-sources（生成测试源代码）生成包含在编译阶段中的任何测试源代码。<br>process-test-sources（处理测试源代码）处理测试源代码，比如说，过滤任意值。<br>generate-test-resources（生成测试资源文件）为测试创建资源文件。<br>process-test-resources（处理测试资源文件）复制和处理测试资源到目标目录。<br>test-compile（编译测试源码）              编译测试源代码到测试目标目录.<br>process-test-classes（处理测试类文件）    处理测试源码编译生成的文件。<br>test（测试）                            使用合适的单元测试框架运行测试（Juint是其中之一）。<br>prepare-package（准备打包）          在实际打包之前，执行任何的必要的操作为打包做准备。<br>package（打包）                      将编译后的代码打包成可分发格式的文件，比如JAR、WAR或者EAR文件。<br>pre-integration-test（集成测试前）  在执行集成测试前进行必要的动作。比如说，搭建需要的环境。<br>integration-test（集成测试）        处理和部署项目到可以运行集成测试环境中。<br>post-integration-test（集成测试后）  在执行集成测试完成后进行必要的动作。比如说，清理集成测试环境。<br>verify （验证）                      运行任意的检查来验证项目包有效且达到质量标准。<br>install（安装）                      安装项目包到本地仓库，这样项目包可以用作其他本地项目的依赖。<br>deploy（部署）                      将最终的项目包复制到远程仓库中与其他开发者和项目共享。</p><p>有一些与 Maven 生命周期相关的重要概念需要说明：<br>当一个阶段通过 Maven 命令调用时，例如 mvn compile，只有该阶段之前以及包括该阶段在内的所有阶段会被执行。<br>不同的 maven 目标将根据打包的类型（JAR / WAR / EAR），被绑定到不同的 Maven 生命周期阶段。<br>在下面的例子中，我们将 maven-antrun-plugin:run 目标添加到 Build 生命周期的一部分阶段中。这样我们可以显示生命周期的文本信息。<br>我们已经更新了 C:\MVN\project 目录下的 pom.xml 文件。</p><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">编译阶段的构建生命周期的各个阶段</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;project xmlns="http://maven.apache.org/POM/4.0.0"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0  http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;groupId&gt;com.companyname.projectgroup&lt;/groupId&gt;&lt;artifactId&gt;project&lt;/artifactId&gt;&lt;version&gt;1.0&lt;/version&gt;&lt;build&gt;    &lt;plugins&gt;    &lt;plugin&gt;    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;    &lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;    &lt;version&gt;1.1&lt;/version&gt;          &lt;executions&gt;                &lt;execution&gt;                    &lt;id&gt;id.validate&lt;/id&gt;                    &lt;phase&gt;validate&lt;/phase&gt;                    &lt;goals&gt;                      &lt;goal&gt;run&lt;/goal&gt;                    &lt;/goals&gt;                    &lt;configuration&gt;                      &lt;tasks&gt;                          &lt;echo&gt;validate phase&lt;/echo&gt;                      &lt;/tasks&gt;                    &lt;/configuration&gt;                &lt;/execution&gt;                &lt;execution&gt;                    &lt;id&gt;id.compile&lt;/id&gt;                    &lt;phase&gt;compile&lt;/phase&gt;                    &lt;goals&gt;                      &lt;goal&gt;run&lt;/goal&gt;                    &lt;/goals&gt;                    &lt;configuration&gt;                      &lt;tasks&gt;                          &lt;echo&gt;compile phase&lt;/echo&gt;                      &lt;/tasks&gt;                    &lt;/configuration&gt;                &lt;/execution&gt;                &lt;execution&gt;                    &lt;id&gt;id.test&lt;/id&gt;                    &lt;phase&gt;test&lt;/phase&gt;                    &lt;goals&gt;                      &lt;goal&gt;run&lt;/goal&gt;                    &lt;/goals&gt;                    &lt;configuration&gt;                      &lt;tasks&gt;                          &lt;echo&gt;test phase&lt;/echo&gt;                      &lt;/tasks&gt;                    &lt;/configuration&gt;                &lt;/execution&gt;                &lt;execution&gt;                      &lt;id&gt;id.package&lt;/id&gt;                      &lt;phase&gt;package&lt;/phase&gt;                      &lt;goals&gt;                          &lt;goal&gt;run&lt;/goal&gt;                      &lt;/goals&gt;                      &lt;configuration&gt;                      &lt;tasks&gt;                          &lt;echo&gt;package phase&lt;/echo&gt;                      &lt;/tasks&gt;                    &lt;/configuration&gt;                &lt;/execution&gt;                &lt;execution&gt;                    &lt;id&gt;id.deploy&lt;/id&gt;                    &lt;phase&gt;deploy&lt;/phase&gt;                    &lt;goals&gt;                      &lt;goal&gt;run&lt;/goal&gt;                    &lt;/goals&gt;                    &lt;configuration&gt;                    &lt;tasks&gt;                      &lt;echo&gt;deploy phase&lt;/echo&gt;                    &lt;/tasks&gt;                    &lt;/configuration&gt;                &lt;/execution&gt;          &lt;/executions&gt;    &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;&lt;/project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">[INFO] Scanning for projects...[INFO] ------------------------------------------------------------------[INFO] Building Unnamed - com.companyname.projectgroup:project:jar:1.0[INFO]    task-segment: [compile][INFO] ------------------------------------------------------------------[INFO] [antrun:run {execution: id.validate}][INFO] Executing tasks     [echo] validate phase[INFO] Executed tasks[INFO] [resources:resources {execution: default-resources}][WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources,i.e. build is platform dependent![INFO] skip non existing resourceDirectory C:\MVN\project\src\main\resources[INFO] [compiler:compile {execution: default-compile}][INFO] Nothing to compile - all classes are up to date[INFO] [antrun:run {execution: id.compile}][INFO] Executing tasks     [echo] compile phase[INFO] Executed tasks[INFO] ------------------------------------------------------------------[INFO] BUILD SUCCESSFUL[INFO] ------------------------------------------------------------------[INFO] Total time: 2 seconds[INFO] Finished at: Sat Jul 07 20:18:25 IST 2012[INFO] Final Memory: 7M/64M[INFO] ------------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>打开命令控制台，跳转到 pom.xml 所在目录，并执行以下 mvn 命令。</p><pre class="line-numbers language-none"><code class="language-none">C:\MVN\project&gt;mvn compile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Maven 将会开始处理并显示直到编译阶段的构建生命周期的各个阶段。</p><ul><li>在开发环境中，使用下面的命令去构建、安装工程到本地仓库<pre class="line-numbers language-none"><code class="language-none">mvn install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>在构建环境中，使用下面的调用来纯净地构建和部署项目到共享仓库中<pre class="line-numbers language-none"><code class="language-none">mvn clean deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>这行命令也可以用于多模块的情况下，即包含多个子项目的项目，Maven 会在每一个子项目执行 clean 命令，然后再执行 deploy 命令。</li></ul><h5 id="3-Site-生命周期："><a href="#3-Site-生命周期：" class="headerlink" title="3. Site 生命周期："></a>3. Site 生命周期：</h5><ul><li>site：生成项目文档和站点信息。</li><li>deploy-site：将生成的站点信息发布到远程服务器，以便共享项目文档。</li></ul><p>Maven Site 插件一般用来创建新的报告文档、部署站点等。</p><ul><li>pre-site：执行一些需要在生成站点文档之前完成的工作</li><li>site：生成项目的站点文档</li><li>post-site： 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</li><li>site-deploy：将生成的站点文档部署到特定的服务器上</li></ul><p>这里经常用到的是site阶段和site-deploy阶段，用以生成和发布Maven站点，这可是Maven相当强大的功能，Manager比较喜欢，文档及统计数据自动生成，很好看。 在下面的例子中，我们将 maven-antrun-plugin:run 目标添加到 Site 生命周期的所有阶段中。这样我们可以显示生命周期的所有文本信息。</p><p>我们已经更新了 C:\MVN\project 目录下的 pom.xml 文件。</p><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">site生命周期的各个阶段</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;project xmlns="http://maven.apache.org/POM/4.0.0"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0  http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;groupId&gt;com.companyname.projectgroup&lt;/groupId&gt;&lt;artifactId&gt;project&lt;/artifactId&gt;&lt;version&gt;1.0&lt;/version&gt;&lt;build&gt;&lt;plugins&gt;&lt;plugin&gt;&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;&lt;version&gt;1.1&lt;/version&gt;   &lt;executions&gt;      &lt;execution&gt;         &lt;id&gt;id.pre-site&lt;/id&gt;         &lt;phase&gt;pre-site&lt;/phase&gt;         &lt;goals&gt;            &lt;goal&gt;run&lt;/goal&gt;         &lt;/goals&gt;         &lt;configuration&gt;            &lt;tasks&gt;               &lt;echo&gt;pre-site phase&lt;/echo&gt;            &lt;/tasks&gt;         &lt;/configuration&gt;      &lt;/execution&gt;      &lt;execution&gt;         &lt;id&gt;id.site&lt;/id&gt;         &lt;phase&gt;site&lt;/phase&gt;         &lt;goals&gt;         &lt;goal&gt;run&lt;/goal&gt;         &lt;/goals&gt;         &lt;configuration&gt;            &lt;tasks&gt;               &lt;echo&gt;site phase&lt;/echo&gt;            &lt;/tasks&gt;         &lt;/configuration&gt;      &lt;/execution&gt;      &lt;execution&gt;         &lt;id&gt;id.post-site&lt;/id&gt;         &lt;phase&gt;post-site&lt;/phase&gt;         &lt;goals&gt;            &lt;goal&gt;run&lt;/goal&gt;         &lt;/goals&gt;         &lt;configuration&gt;            &lt;tasks&gt;               &lt;echo&gt;post-site phase&lt;/echo&gt;            &lt;/tasks&gt;         &lt;/configuration&gt;      &lt;/execution&gt;      &lt;execution&gt;         &lt;id&gt;id.site-deploy&lt;/id&gt;         &lt;phase&gt;site-deploy&lt;/phase&gt;         &lt;goals&gt;            &lt;goal&gt;run&lt;/goal&gt;         &lt;/goals&gt;         &lt;configuration&gt;            &lt;tasks&gt;               &lt;echo&gt;site-deploy phase&lt;/echo&gt;            &lt;/tasks&gt;         &lt;/configuration&gt;      &lt;/execution&gt;   &lt;/executions&gt;&lt;/plugin&gt;&lt;/plugins&gt;&lt;/build&gt;&lt;/project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-[INFO]" data-language="[INFO]"><div class="caption"><span>Scanning for projects...</span></div><code class="language-[INFO]">[INFO] ------------------------------------------------------------------[INFO] Building Unnamed - com.companyname.projectgroup:project:jar:1.0[INFO]    task-segment: [site][INFO] ------------------------------------------------------------------[INFO] [antrun:run {execution: id.pre-site}][INFO] Executing tasks     [echo] pre-site phase[INFO] Executed tasks[INFO] [site:site {execution: default-site}][INFO] Generating "About" report.[INFO] Generating "Issue Tracking" report.[INFO] Generating "Project Team" report.[INFO] Generating "Dependencies" report.[INFO] Generating "Project Plugins" report.[INFO] Generating "Continuous Integration" report.[INFO] Generating "Source Repository" report.[INFO] Generating "Project License" report.[INFO] Generating "Mailing Lists" report.[INFO] Generating "Plugin Management" report.[INFO] Generating "Project Summary" report.[INFO] [antrun:run {execution: id.site}][INFO] Executing tasks     [echo] site phase[INFO] Executed tasks[INFO] ------------------------------------------------------------------[INFO] BUILD SUCCESSFUL[INFO] ------------------------------------------------------------------[INFO] Total time: 3 seconds[INFO] Finished at: Sat Jul 07 15:25:10 IST 2012[INFO] Final Memory: 24M/149M[INFO] -----------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>现在打开命令控制台，跳转到 pom.xml 所在目录，并执行以下 mvn 命令。</p><pre class="line-numbers language-none"><code class="language-none">C:\MVN\project&gt;mvn site<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="构建阶段由插件目标构成"><a href="#构建阶段由插件目标构成" class="headerlink" title="构建阶段由插件目标构成"></a>构建阶段由插件目标构成</h5><p>一个插件目标代表一个特定的任务（比构建阶段更为精细），这有助于项目的构建和管理。这些目标可能被绑定到多个阶段或者无绑定。不绑定到任何构建阶段的目标可以在构建生命周期之外通过直接调用执行。这些目标的执行顺序取决于调用目标和构建阶段的顺序。</p><p>例如，考虑下面的命令：<br>clean 和 pakage 是构建阶段，dependency:copy-dependencies 是目标</p><pre class="line-numbers language-none"><code class="language-none">mvn clean dependency:copy-dependencies package<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的 clean 阶段将会被首先执行，然后 dependency:copy-dependencies 目标会被执行，最终 package 阶段被执行。</p><h3 id="4-Maven-插件"><a href="#4-Maven-插件" class="headerlink" title="4. Maven 插件"></a>4. Maven 插件</h3><p>插件通常提供了一个目标的集合，并且可以使用下面的语法执行：</p><pre class="line-numbers language-none"><code class="language-none">&lt;code&gt;mvn [plugin-name]:[goal-name]&lt;/code&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，一个 Java 工程可以使用 maven-compiler-plugin 的 compile-goal 编译，使用以下命令：</p><pre class="line-numbers language-none"><code class="language-none">&lt;code&gt;mvn compiler:compile&lt;/code&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-Maven-构建-Java-项目"><a href="#5-Maven-构建-Java-项目" class="headerlink" title="5. Maven 构建 Java 项目"></a>5. Maven 构建 Java 项目</h3><p>Maven 使用原型 archetype 插件创建项目。要创建一个简单的 Java 应用，我们将使用 maven-archetype-quickstart 插件。</p><p>在下面的例子中，我们将在 C:\MVN 文件夹下创建一个基于 maven 的 java 应用项目。</p><p>命令格式如下：</p><pre class="line-numbers language-none"><code class="language-none">mvn archetype:generate "-DgroupId=top.wabisabifag.www" "-DartifactId=consumerBanking" "-DarchetypeArtifactId=maven-archetype-quickstart" "-DinteractiveMode=false"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明：</p><ul><li>DgroupId: 组织名，公司网址的反写 + 项目名称</li><li>DartifactId: 项目名-模块名</li><li>DarchetypeArtifactId: 指定 ArchetypeId，maven-archetype-quickstart，创建一个简单的 Java 应用</li><li>DinteractiveMode: 是否使用交互模式</li></ul><h4 id="1-设置-国内镜像源"><a href="#1-设置-国内镜像源" class="headerlink" title="1. 设置 国内镜像源"></a>1. 设置 国内镜像源</h4><ol><li><p>修改 setting.xml 文件，把 mirror 改成阿里的镜像。</p><pre class="line-numbers language-none"><code class="language-none">&lt;mirror&gt;&nbsp; &nbsp; &nbsp; &lt;id&gt;alimaven&lt;/id&gt;&nbsp; &nbsp; &nbsp; &lt;name&gt;aliyun maven&lt;/name&gt;&nbsp; &nbsp; &nbsp; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;&nbsp; &nbsp; &nbsp; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/mirror&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 IDEA 中：运行 MVN 命令的时候加上 -DarchetypeCatalog=local 这个参数。</p></li></ol><h3 id="6-Maven-构建-web-项目"><a href="#6-Maven-构建-web-项目" class="headerlink" title="6. Maven 构建 web 项目"></a>6. Maven 构建 web 项目</h3><h4 id="1-创建-Web-应用"><a href="#1-创建-Web-应用" class="headerlink" title="1. 创建 Web 应用"></a>1. 创建 Web 应用</h4><p>我们可以使用 maven-archetype-webapp 插件来创建一个简单的 Java web 应用。</p><p>打开命令控制台，进入到 C:\MVN 文件夹，然后执行以下的 mvn 命令：</p><pre class="line-numbers language-none"><code class="language-none">C:\MVN&gt;mvn archetype:generate -DgroupId=top.wabisabifag.www -DartifactId=trucks -DarchetypeArtifactId=maven-archetype-webapp  -DinteractiveMode=false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-构建-Web-应用"><a href="#2-构建-Web-应用" class="headerlink" title="2. 构建 Web 应用"></a>2. 构建 Web 应用</h4><p>打开命令控制台，进入 C:\MVN\trucks 目录，然后执行下面的以下 mvn 命令：</p><pre class="line-numbers language-none"><code class="language-none">C:\MVN\trucks&gt; mvn clean package<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-部署-Web-应用"><a href="#3-部署-Web-应用" class="headerlink" title="3. 部署 Web 应用"></a>3. 部署 Web 应用</h4><p>打开 C:\ &lt; MVN &lt; trucks &lt; target &lt; 文件夹，找到 trucks.war 文件，并复制到你的 web 服务器的 web 应用目录，然后重启 web 服务器。</p><p>测试 Web 应用<br>访问以下 URL 运行 web 应用：</p><pre class="line-numbers language-none"><code class="language-none">http://:/trucks/index.jsp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-Maven-Eclipse"><a href="#7-Maven-Eclipse" class="headerlink" title="7. Maven Eclipse"></a>7. <a href="https://www.runoob.com/maven/maven-eclipse.html">Maven Eclipse</a></h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SoftWareTest</title>
      <link href="/2023/03/01/SoftWareTest/"/>
      <url>/2023/03/01/SoftWareTest/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Selenium自动化测试"><a href="#Selenium自动化测试" class="headerlink" title="Selenium自动化测试"></a>Selenium自动化测试</h1><h2 id="1-实例"><a href="#1-实例" class="headerlink" title="1.实例"></a>1.实例</h2><h3 id="1-初步认识Selenium"><a href="#1-初步认识Selenium" class="headerlink" title="1. 初步认识Selenium"></a>1. 初步认识Selenium</h3><pre class="line-numbers language-none"><code class="language-none">#1 导入webdriverfrom selenium import webdriver          from selenium.webdriver.chrome.options import Optionsfrom selenium.webdriver.common.by import By#  鼠标事件对象from selenium.webdriver.common.action_chains import ActionChains#   键盘事件对象from selenium.webdriver.common.keys import Keysoptions = Options()options.add_experimental_option('detach',True)#2. 打开谷歌driver=webdriver.Chrome(options=options)      #3. 谷歌.中打开链接driver.get("https://www.baidu.com")     #4. 向搜索框输入 javadriver.find_element(By.ID,"kw").send_keys("java")   driver.implicitly_wait(1)#5. 点击搜索按钮driver.find_element(By.XPATH,'//input[@type="submit"]').click()     driver.implicitly_wait(2)  # 6. 将driver 对象绑定 鼠标执行事件test = ActionChains(driver)clearText = driver.find_element(By.XPATH,'//*[@id="form"]/span[1]/i[1]')refullText = driver.find_element(By.ID,"kw")#7.  perform()  执行代码test.click(clearText).perform()driver.implicitly_wait(2)test.click(refullText).click().send_keys("Bilibili").perform()driver.implicitly_wait(2) #8.  关闭。退出浏览器 driver.quit()  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-适用Selenium-基础功能"><a href="#2-适用Selenium-基础功能" class="headerlink" title="2. 适用Selenium 基础功能"></a>2. 适用Selenium 基础功能</h3><pre class="line-numbers language-none"><code class="language-none">from  time import sleepfrom selenium import  webdriverfrom selenium.webdriver.common.by import By'''TODO: Let`s driver stay work, didn`t auto colse'''from selenium.webdriver.chrome.options import Optionsoptions = Options()options.add_experimental_option('detach',True)driver=webdriver.Chrome(options=options)driver.get("https://www.baidu.com")driver.find_element(By.ID,"kw").send_keys("i.chaoxing.com")driver.implicitly_wait(1)driver.find_element(By.XPATH,'//input[@type="submit"]').click()driver.implicitly_wait(2)'''TODO: Useing JavaScript Language execute driver'''# let Webpage scroll down# js = "window.scrollTo(600,300)"# driver.execute_script(js)driver.find_element(By.XPATH,'//*[@id="1"]/div/div[1]/h3/a').click()driver.implicitly_wait(1)# jump to a new webPagehandles = driver.window_handlesdriver.switch_to.window(handles[-1])driver.implicitly_wait(1)# Now click in the Chaoxing Webdriver.find_element(By.ID,"phone").send_keys('123456')driver.implicitly_wait(1)driver.find_element(By.ID,"pwd").send_keys('123456')driver.implicitly_wait(1)driver.find_element(By.ID,'loginBtn').click()driver.implicitly_wait(1)driver.find_element(By.NAME,"笔记").click()driver.implicitly_wait(1)driver.back()driver.implicitly_wait(1)driver.forward()driver.implicitly_wait(1)driver.refresh()driver.implicitly_wait(1)'''TODO: Update webpage place'''handles = driver.window_handlesdriver.switch_to.window(handles[-1])driver.implicitly_wait(1)driver.maximize_window()driver.implicitly_wait(1)driver.find_element(By.NAME,"课程").click()driver.implicitly_wait(1)'''TODO: iframe  框架       switch_to.frame("IDName")  to differ'''driver.switch_to.frame("frame_content")driver.find_element(By.XPATH,"//*[@id='addCourse']").click()sleep(2)# Form js factory scrollTop and scrollDownjs = "var js = document.documentElement.scrollTotop=1000"driver.execute_script(js)sleep(2)js = "var js = document.documentElement.scrollTotop=0"driver.execute_script(js)sleep(2)driver.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-进阶Selenium-本地文件导入"><a href="#3-进阶Selenium-本地文件导入" class="headerlink" title="3. 进阶Selenium 本地文件导入"></a>3. 进阶Selenium 本地文件导入</h3><pre class="line-numbers language-none"><code class="language-none">import timefrom selenium.webdriver.chrome.options import Optionsfrom selenium import  webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.common.action_chains import ActionChainsfrom selenium.webdriver.common.keys import Keysimport unittestclass sendQQMail(unittest.TestCase):    def setUp(self):        options = Options()        options.add_experimental_option('detach', True)        driver = webdriver.Chrome(options=options)                driver.get("https://mail.qq.com")        test = ActionChains(driver)        driver.implicitly_wait(25)    def Test_sendQQMail(self):        # 点击写信        self.driver.find_element(By.ID, "composebtn").click()        self.driver.implicitly_wait(2)        # TODO:iframe  框架        self.driver.switch_to.frame("mainFrame")        self.driver.implicitly_wait(2)        # input 按钮        '''输入信息'''        t = self.driver.find_element(By.XPATH, '//*[@id="toAreaCtrl"]/div[2]/input')        self.driver.implicitly_wait(2)        t.send_keys("1109388794@qq.com")        self.driver.implicitly_wait(2)        print("写入收信信息完成")        # 导入本地文件        tt = self.driver.find_element(By.XPATH, '//*[@id="AttachFrame"]/span/input')        self.driver.implicitly_wait(2)                '''         通过Driver驱动的鼠标事件绑定,        send_keys方法,        r'': 导入本地文件路径，注意格式        '''        self.test.send_keys(r'D:\爱德华·艾力克.txt')        print("写入本地文件完成")        self.driver.implicitly_wait(2)        self.driver.find_element(By.XPATH, '//*[@id="toolbar"]/div/a[1]').click()        print("发生完成")        time.sleep(10)    def tearDown(self):        self.driver.quit()        print('========== End ==========')# 该文件名称下，直接调用unittest下的testif __name__ == '__test__':    unittest.test()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-进阶Selenium-数据驱动-动态填入数据"><a href="#4-进阶Selenium-数据驱动-动态填入数据" class="headerlink" title="4. 进阶Selenium 数据驱动:动态填入数据"></a>4. 进阶Selenium 数据驱动:动态填入数据</h3><pre class="line-numbers language-none"><code class="language-none">import csvimport timefrom selenium import webdriverimport unittestfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.chrome.options import Options#  数据驱动from ddt import ddt,data,unpack#  方法: 获取文件 UserData.csvdef get_Data(file_Name):   # open the CSV    rows = []    data_file = open(file_Name,"r",encoding="utf-8")    reader = csv.reader(data_file)    next(reader,None)    for row in reader:        rows.append(row)    return rows#  方法: 实现页面自动化登录def ActualResult(driver,username,password):    # Now click in the Chaoxing Web    driver.find_element(By.ID, "phone").send_keys(username)    driver.implicitly_wait(1)    driver.find_element(By.ID, "pwd").send_keys(password)    driver.implicitly_wait(1)    driver.find_element(By.ID, 'loginBtn').click()    time.sleep(3)    return driver.title@ddt  class testAdd(unittest.TestCase):    def setUp(self):        options = Options()        options.add_experimental_option('detach', True)        driver = webdriver.Chrome(options=options)        driver.get("https://i.chaoxing.com")        self.driver = driver    def tearDown(self) -&gt; None: self.driver.quit()    @data(*get_Data("UserData.csv"))    # @unittest.skip(u"无条件跳过")    @unpack    def test_add(self,username,password,expectedValue):  # TODO：searchValue,expectedValue值得方向        # 获取 页面的 title        title=ActualResult(self.driver,username,password)        # 断言： 比较结果 True / False        self.assertEqual(expectedValue,title,"断言结果：")if __name__=="__main__":    unittest.main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-进阶Selenium-PageObject-组件调用"><a href="#5-进阶Selenium-PageObject-组件调用" class="headerlink" title="5. 进阶Selenium PageObject:组件调用"></a>5. 进阶Selenium PageObject:组件调用</h3><pre class="line-numbers language-none"><code class="language-none"># base.pyclass Base:    # 一、定义一个基类    # 1.  # 定义一个初始化函数，初始化浏览器驱动    def __init__(self,driver):        self.driver=driver    # 2.  # 定义一个open方法    def open(self):        self.driver.get("https://i.chaoxing.com/")    # 3.  # 定义一个定位元素    def elementfind(self,*value):        return self.driver.find_element(*value)    # 4.  # 定义一个关闭浏览器的方法    def close(self):        self.driver.quit()# login.pyfrom time import sleepfrom Base import Basefrom selenium.webdriver.common.by import Byclass login(Base):    #  变量    userName=(By.ID, "phone")    userPasswd=(By.ID, "pwd")    btn=(By.ID, "loginBtn")    def input(self,value1,value2):        self.elementfind(*value1).send_keys(value2)    def btnClick(self,btn):        self.elementfind(*btn).click()    def Login(driver,username,userpwd):        page=login(driver)        page.open()        sleep(1)        page.input(page.userName,username)        sleep(1)        page.input(page.userPasswd,userpwd)        sleep(3)        page.btnClick(page.btn)#getDataimport csvdef getData(file_name):    rows=[]    file_data=open(file_name,'r',encoding='utf8')    reader=csv.reader(file_data)    next(reader)    for row in reader:        rows.append(row)    return rows#testfrom selenium import webdriverfrom selenium.webdriver.chrome.options import Optionsfrom ddt import ddt,data,unpackimport unittestfrom getData import getDatafrom login import login@ddtclass LoginTest(unittest.TestCase):    def setUp(self) -&gt; None:        print("-----setUp-----")        options = Options()        options.add_experimental_option("detach", True)        driver = webdriver.Chrome(options=options)        self.driver=driver    def tearDown(self) -&gt; None:        print("-----tearDown-----")        self.driver.quit()    @data(*getData("data.csv"))    @unpack    def testlogin(self,username,userpwd,title):        driver=self.driver        login.Login(driver,username,userpwd)        actualtitle=driver.title        #  断言测试结果        self.assertEqual(actualtitle,title)if __name__=="__main__":    unittest.main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-理论"><a href="#2-理论" class="headerlink" title="2. 理论"></a>2. 理论</h2><h3 id="1-Unittest-单元测试"><a href="#1-Unittest-单元测试" class="headerlink" title="1. Unittest(单元测试)"></a>1. Unittest(单元测试)</h3><h4 id="1-断言"><a href="#1-断言" class="headerlink" title="1.断言"></a>1.断言</h4><pre class="line-numbers language-none"><code class="language-none">方法                            校验条件                            应用实例assertEqual(a,b[,msg])              a===b                           msg对象用于说明失败原因assertNotEqual(a,b[,msg])           a!=b                            assertTrue(x[,msg])                 bool(x) is True                 检验给出的表达式:assertFalse(x[,msg])                bool(x) is False                    检验一个元素是否出现在页面assertNot(a,b[,msg])                a is not b                          assertTrue(element.is_displayed())assertRaises(exc,fun,*args,**kwds)  fun(*args,**kwds)raises exc     检验特定异常是否被具体测试步骤抛出assertRaisesRegrexp(exc,fun,*args,**kwds)assertAlmostEqual(a,b)              round(a-b,7)===0                将给定的数值四舍五入assertNotAlmostEqual(a,b)           round(a-b,7)!=0                 有助于统计由于四舍五入产生的错误assertGreater(a,b)                  a&gt;b                              逻辑判定条件assertGreaterEqual(a,b)             a&gt;=bassertLess(a,b)                     a&lt;bassertLessEqual                     a&lt;=bassertRegexpMatches(s,r)            r.search(s)                    检查文本是否符合正则匹配 assertNotRegexpMatches(s,r)         not.search(s)assertMultiLineEquak(a,b)           strings                         assertEqual的特殊形式，为多行字符串设计。assertListEqual(a,b)                lists                           对于下拉列表选项字段的检验非常有用fail()                                                              无条件失败。当上面的方法不适用时,                                                                    通过此方法可以创建定制的条件模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-ElementFind-元素定位"><a href="#2-ElementFind-元素定位" class="headerlink" title="2. ElementFind(元素定位)"></a>2. ElementFind(元素定位)</h4><ol><li>获取单个元素<pre class="line-numbers language-none"><code class="language-none">1. elementfind(By.ID,"")                2. elementfind(By.NAME,"")3. elementfind(By.CLASS_NAME,"")        4. elementfind(By.TAGNAME,"")           #获取元素标签名5. elementfind(By.XPATH,"")             #获取元素XPATH6. elementfind(By.CSS_SELECTOR,"")      #获取元素CSS7. elementfind(By.LINK_TEXT,"")         #获取文本信息8. elementfind(By.PARTIAL_LINK_TEXT,"") #获取部分文本信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>获取多个元素<pre class="line-numbers language-none"><code class="language-none">1. elementfinds(By.ID,"")                2. elementfinds(By.NAME,"")3. elementfinds(By.CLASS_NAME,"")        4. elementfinds(By.TAGNAME,"")           #获取元素标签名5. elementfinds(By.XPATH,"")             #获取元素XPATH6. elementfinds(By.CSS_SELECTOR,"")      #获取元素CSS7. elementfinds(By.LINK_TEXT,"")         #获取文本信息8. elementfinds(By.PARTIAL_LINK_TEXT,"") #获取部分文本信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="3-WebDriver-驱动"><a href="#3-WebDriver-驱动" class="headerlink" title="3. WebDriver(驱动)"></a>3. WebDriver(驱动)</h4><ol><li>WebDriver功能<pre class="line-numbers language-none"><code class="language-none">属性/功能page_source             name                    获取当前浏览器的名称titleorientation             获取当前设设备的方位current_window_handle   获取当前窗口的句柄current_url             获取当前页面的URL地址window_handles          获取当前session里的所有窗口的句柄<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>WebDriver方法<pre class="line-numbers language-none"><code class="language-none">方法back()close()                             关闭当前网页forward()  get(url)maximize_window()quit()                              退出当前Driver，关闭所有窗口refresh()switch_to_active_element()          返回当前页面唯一焦点所在的网页或者元素switch_to_alert()                   把焦点切换至当前页面弹出的警告switch_to_default_content()         切换焦点至默认框架内switch_to-frame("")                 switch_to_window(window_name)       切换焦点到指定的窗口名称或者句柄implicity_wait(time)                等待目标元素被找到，或目标指令完成set_page_load_timeout(time)         页面完全加载完成  set_script_timeout(time)            设置脚本执行的超时时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="4-WebElememt-接口"><a href="#4-WebElememt-接口" class="headerlink" title="4. WebElememt(接口)"></a>4. WebElememt(接口)</h4><ol><li>WebElememt功能<pre class="line-numbers language-none"><code class="language-none">属性/功能sizetag_nametext<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>WebElememt方法<pre class="line-numbers language-none"><code class="language-none">clear()click()get_attribute("name")               获取元素的属性值is_displayed()                      检查元素对于用户是否可见is_enable()                         检查元素是否可用is_selected()                       检查元素是否可选中send_keys(*Value)                   模拟输入文本value_of_css_property("")               获取CSS属性的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="5-Select-操作下拉菜单"><a href="#5-Select-操作下拉菜单" class="headerlink" title="5. Select(操作下拉菜单)"></a>5. Select(操作下拉菜单)</h4><p>select = Select(driver,elemnetfind(By.ID,”id”))</p><ol><li>Select功能<pre class="line-numbers language-none"><code class="language-none">all_selected_options                获取下拉菜单和列表中选择的所有选项内容first_selectedP_option              获取下拉菜单和列表的第一个选项、当前选择项options                             获取下拉菜单和列表的所有选项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>Select方法<pre class="line-numbers language-none"><code class="language-none">deselect_all()                      清除多选清除下拉菜单和列表的所有选项deselect(By.INDEX,"index")          根据索引清除下拉菜单和列表的所有选项deselect(By.VALUE,"value")          清除所有选项值和给定参数匹配的下拉菜单和列表的所有选项deselect(By.VISIBLE_TEXT,"text")    清除所有展示文本和给定参数匹配的下拉菜单和列表的所有选项select(By.INDEX,"index")select(By.VALUE,"value")select(By.VISIBLE_TEXT,"text")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="6-Alert-警告"><a href="#6-Alert-警告" class="headerlink" title="6. Alert(警告)"></a>6. Alert(警告)</h4><p>alert = driver.switch_to_alert()</p><ol><li>Alert功能<pre class="line-numbers language-none"><code class="language-none">text                    获取警告窗文本<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>Alert方法<pre class="line-numbers language-none"><code class="language-none">accept()                接受JavaScript警告信息，单机OK按钮         dismiss()               驳回JavaScript警告信息send_keys(*value)       模拟元素输入信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="7-键盘和鼠标事件"><a href="#7-键盘和鼠标事件" class="headerlink" title="7. 键盘和鼠标事件"></a>7. 键盘和鼠标事件</h4><pre class="line-numbers language-none"><code class="language-none">click(on_element=None)              单击元素click_and_hold(on_elemnet)          对元素按住左键double_click(on_element=None)       双击元素操作drag_and_drop(source,target)        源元素拖动到释放元素key_down(value,element=None)        仅按下(Keys.SHIFT) -&gt;  send_keys('n')key_up(value,element=None)          仅释放(Keys.SHIFT)move_to_element(to_element)         将鼠标移动至元素的中央perform()                           提交已保存的动作release(on_element=None)            释放鼠标send_keys(keys_to_send)             对当前焦点元素的键盘操作send_keys_to_element(element,keys_to_send)      对指定元素的键盘操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-JavaScript"><a href="#8-JavaScript" class="headerlink" title="8. JavaScript"></a>8. JavaScript</h4><p>driver.execute_script(“return)</p><pre class="line-numbers language-none"><code class="language-none">1. execute_async_script(script,*args)       异步代码2. execute_acript(script,*args)             同步代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js</title>
      <link href="/2023/02/23/Vue.js/"/>
      <url>/2023/02/23/Vue.js/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h1><h2 id="1-Vue实列"><a href="#1-Vue实列" class="headerlink" title="1.Vue实列"></a>1.Vue实列</h2><h3 id="1-挂载元素"><a href="#1-挂载元素" class="headerlink" title="1.挂载元素"></a>1.挂载元素</h3><h3 id="2-数据"><a href="#2-数据" class="headerlink" title="2.数据"></a>2.数据</h3><h3 id="3-初始值"><a href="#3-初始值" class="headerlink" title="3.初始值"></a>3.初始值</h3><pre class="line-numbers language-none"><code class="language-none">name:'',count:0,price:[],flag:true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-创建Vue实列"><a href="#1-创建Vue实列" class="headerlink" title="1.创建Vue实列"></a>1.创建Vue实列</h4><pre class="line-numbers language-none"><code class="language-none">实列：&lt;script src="./vue.js"&gt;&lt;/script&gt;   //1.导入vue.js&lt;div class="box"&gt;    //2.1挂载数据 &lt;h3&gt;NetWeb:{{name}}&lt;/h3&gt; &lt;h3&gt;NetWebURl:{{url}}&lt;/h3&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt; var demo = new Vue({  el:'.box',      //2.2挂载数据代入  data:{// 3.数据   name:'Neoction School',   url:'www.NeoctionSchool'     } })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-重新设置Vue实列"><a href="#2-重新设置Vue实列" class="headerlink" title="2.重新设置Vue实列"></a>2.重新设置Vue实列</h4><p>—–data属性传入Vue实列</p><pre class="line-numbers language-none"><code class="language-none">//设定的data数据var data={name:'Holle,Java',url:'www.java.org.com'}; //创建数据 Vue实列，自动代理 data对象var demo=new Vue({ el:'.box', // 导入已存在的数据data data:data });//锚定对象  //将自定义数据data的url属性赋值给Vue实列的namedemo.name=data.name; //重新设置属性demo.url='httpa://www.java.org.com';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-区分符"><a href="#3-区分符" class="headerlink" title="3.$ 区分符"></a>3.$ 区分符</h4><p>——vue实列对象与用户定义属性的区分</p><pre class="line-numbers language-none"><code class="language-none">demo.$data=data;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-方法-methods"><a href="#4-方法-methods" class="headerlink" title="4.方法(methods)"></a>4.方法(methods)</h3><pre class="line-numbers language-none"><code class="language-none">&lt;div class="box"&gt;     &lt;h3&gt;{{showInfo()}}&lt;/h3&gt;    &lt;/div&gt;//设定的data数据var data={name:'Holle,Java',url:'www.java.org.com'}; //创建数据 Vue实列，自动代理 data对象var demo=new Vue({ el:'.box', // 导入已存在的数据data data:data,  // {name:'Holle,Java',url:'www.java.org.com'}, methods:{  showInfo:function(){   return this.name+":"+this.url   } }});demo.$data=data;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<br>    1.调用方法带()<br>    2.methods方法放入{}内部<br>    3.该方法有异常问题</p><h3 id="5-生命周期钩子函数"><a href="#5-生命周期钩子函数" class="headerlink" title="5.生命周期钩子函数"></a>5.生命周期钩子函数</h3><p>每一个Vue实列创建都有一系列的初始化步骤，通过这些钩子函数可以定义业务逻辑</p><ol><li>beforeCreate：在Vue实列开始初始化时调用</li><li>created：在实列创建之后进行调用，此时尚未开始DOM编译</li><li>mounted：在DOM文件渲染后进行调用（类似window.onload() )</li><li>beforeDestroy：在销毁实列前调用，此后实列任然有效</li><li>destroyed：在实列销毁后进行调用<pre class="line-numbers language-none"><code class="language-none">钩子函数:function(){ },<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="2-数据绑定"><a href="#2-数据绑定" class="headerlink" title="2.数据绑定"></a>2.数据绑定</h2><p>Vue.js 最核心的特性之一。建立数据绑定之后数据和视图会相互关联，当数据发生变换时，视图会自行进行更新。</p><h3 id="1-插值"><a href="#1-插值" class="headerlink" title="1.插值"></a>1.插值</h3><h4 id="1-文本插值"><a href="#1-文本插值" class="headerlink" title="1. 文本插值"></a>1. 文本插值</h4><h5 id="1-插值-1"><a href="#1-插值-1" class="headerlink" title="1.插值"></a>1.插值</h5><p>文本插值是最基本的形式</p><h5 id="2-v-once"><a href="#2-v-once" class="headerlink" title="2.v-once"></a>2.v-once</h5><p>单词插值，当数据对象的属性值发生变换时，插入的文本将不会更新<br>注意：</p><ol><li>v-once在标签内，不需要挂载属性</li><li>需要 插值 传入引用数据</li></ol><h4 id="2-插入HTML"><a href="#2-插入HTML" class="headerlink" title="2.插入HTML"></a>2.插入HTML</h4><p>因为 插值 会将值作为普通文本处理，输出HTML内容需要v-html</p><pre class="line-numbers language-none"><code class="language-none">实列：&lt;div class="box"&gt; &lt;p v-html="message"&gt;&lt;/p&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt; var demo=new Vue({  el:".box",  data:{   message:'&lt;h1&gt;Java,the best language in the world.&lt;/h1&gt;'  } })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<br>    1.v-html在标签内，挂载data数据的属性<br>    2.不需要 插值  来引用数据</p><h4 id="3-属性"><a href="#3-属性" class="headerlink" title="3.属性"></a>3.属性</h4><p>因为 插值 不能应用在html属性中。<br>要为html元素绑定属性，不能直接使用文本插值的方式，而需要v-bind指令对属性进行绑定。</p><h5 id="1-为html属性绑定-class"><a href="#1-为html属性绑定-class" class="headerlink" title="1.为html属性绑定 class"></a>1.为html属性绑定 class</h5><p>为html元素绑定class属性(css)</p><h6 id="1-实列一"><a href="#1-实列一" class="headerlink" title="1.实列一"></a>1.实列一</h6><p>将标签的class属性和数据对象的value属性进行绑定</p><pre class="line-numbers language-none"><code class="language-none">// html 显示&lt;div class="box"&gt;     // 声明 v-bind  调用js文件的class的value值。 &lt;span v-bind:class="value"&gt;Dream fall in truly。&lt;/span&gt;&lt;/div&gt;// js 实现&lt;script type="text/javascript"&gt; var demo=new Vue({  el:".box",  data:{   // 实现的css样式，在css池中定义   value:'title'  } });&lt;/script&gt;//  css 样式池&lt;style type="text/css"&gt; .title{  color: #ff0000;  border: 1px solid #FF00FF;  display: inline-block;  padding: 5px; }&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-实列二"><a href="#2-实列二" class="headerlink" title="2.实列二"></a>2.实列二</h6><p>应用v-bind指令将&lt;\span&gt;标签的class属性与数据对象中的value属性进行绑定，并判断title的值，如果title的值为true，则使用title；否则不适用该类</p><pre class="line-numbers language-none"><code class="language-none">//html显示&lt;div class="box"&gt;     &lt;span v-bind:class="{'title':value}"&gt;Dream fall in truly。&lt;/span&gt;&lt;/div&gt;//js 实现&lt;script type="text/javascript"&gt; var demo=new Vue({  el:".box",  data:{   value:true  } });&lt;/script&gt;//css样式池&lt;style type="text/css"&gt; .title{  color: #ff0000;  border: 1px solid #FF00FF;  display: inline-block;  padding: 5px; }&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<br>    1.v-bind:class=”{ ‘title’:value} ”  需要 {} 和实列一不同点</p><h4 id="4-表达式"><a href="#4-表达式" class="headerlink" title="4.表达式"></a>4.表达式</h4><p>给数据提供简写方式：</p><pre class="line-numbers language-none"><code class="language-none">列： &lt;a v-bind:href="url"&gt;明日学院&lt;/a&gt; &lt;!-- 简写 --&gt; &lt;a :href="url"&gt;明日学院&lt;/a&gt;列：  &lt;div id="box"&gt;   QQ:{{email.substr(0,email.indexOf('@'))}}   &lt;br /&gt;   e-mail:{{email}}  &lt;/div&gt;  &lt;script type="text/javascript"&gt;   var demo=new Vue({    el:'#box',    data:{     email:'4006751066@qq.com'     }    });  &lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-过滤器"><a href="#2-过滤器" class="headerlink" title="2.过滤器"></a>2.过滤器</h3><pre><code>对于一些需要经复杂计算的数据绑定，简单的表达式无法实现。</code></pre><p>vue.js的过滤器进行处理，可通过自定义的过滤器对文本进行格式化。<br>    过滤器可以在 插值 和 v-bind 指令中，过滤器需要被添加在JavaScript表达式的尾部，由管道符号  “|” 表示。<br>格式：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 在 插值 中 --&gt;{{message | myfilter}} &lt;!-- 在v-bind指令中 --&gt;&lt;div v-bind:id="rawId | formatId"&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>定义过滤器的两种方式：</p><ol><li>第一种：<br> 应用Vue.js全局变量 Vue.filter()<pre class="line-numbers language-none"><code class="language-none">Vue.filter( ID,function(){ } )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>第二种：<br> 选项定义本地过滤器 filter:{}<pre class="line-numbers language-none"><code class="language-none">&lt;a id="A"&gt;{{title | subStr}}&lt;/a&gt;&lt;script&gt; new Vue({   el:"A",   data:{   title:"这个String的长度"   },   filter:{   subStr:function(value){    if(value.length &gt; 10){     return value.subStr(0,10)+"...";    }else{     return value;    }   }  } });&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>注意：<br>1.多个过滤器可以串联使用，在filter:{} 中的本地方法可以通过写在插值后 用|隔开。<br>2.过滤器实质是一个方法，可以将参数传入设定的方法</li></ol><h3 id="3-指令"><a href="#3-指令" class="headerlink" title="3.指令"></a>3.指令</h3><p>解释：<br>v-bind: 、v-on: 等为指令</p><ol><li>参数<br>解释：<br>在指令和表达式之间，用冒号分隔开的<pre class="line-numbers language-none"><code class="language-none">&lt;img v-bind:src="imgsrc"&gt;          # img标签的 src 属性&lt;button v-on:click="login"&gt;登录&lt;/button&gt; # 监听的事件名称 click<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>修饰符<br>解释：<br>在参数后面，以半角句点符号指明的特殊后缀。<br>列：<pre class="line-numbers language-none"><code class="language-none"> #  .prevent 修饰符用于调用 event.preventDefault() 方法。&lt;form v-on:submit.prevent="onSubmit"&gt;&lt;/form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>解释：<br>当提交表单时会调用event.preventDefault()方法 用于阻止浏览器的默认行为。</li></ol><h2 id="3-列表渲染"><a href="#3-列表渲染" class="headerlink" title="3.列表渲染"></a>3.列表渲染</h2><h3 id="1-数组更新"><a href="#1-数组更新" class="headerlink" title="1.数组更新"></a>1.数组更新</h3><p>Vue.js 有包含检测数组变化的变异方法，调用时可以改变原始数据，并触发试图更新。</p><p>方法名      说明</p><p>push()像数据的末尾添加一个或多个元素</p><p>pop()将数组的最后一个元素从数组中删除</p><p>shift()将数组的第一个元素从数组中删除</p><p>unshift()向数组的开头添加一个或多个元素</p><p>splice()添加或删除数组中的元素</p><p>sort()对数组的元素进行排序</p><p>reverse()颠倒数组中元素的顺序</p><p>filter()</p><p>concat()</p><p>slice()获取数组该索引开始的元素</p><pre class="line-numbers language-none"><code class="language-none">列：var demo = new Vue({ el: '#box', data: {  items:[ //定义人物名称数组   {name:'张三'},   {name:'李四'}  ] }})// 向数组末尾添加数组元素demo.items.push({name:'赵六'});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-添加对象属性"><a href="#2-添加对象属性" class="headerlink" title="2. 添加对象属性"></a>2. 添加对象属性</h3><h4 id="Vue-set-vuedemo-set-Object-assign"><a href="#Vue-set-vuedemo-set-Object-assign" class="headerlink" title="Vue.set()  vuedemo.$set() Object.assign()"></a>Vue.set()  vuedemo.$set() Object.assign()</h4><h5 id="1-单列属性"><a href="#1-单列属性" class="headerlink" title="1.单列属性"></a>1.单列属性</h5><pre class="line-numbers language-none"><code class="language-none">Vue.set(demo.items, 1, {name:'李三'});或vuedemo.$set(demo.items, 1, {name:'李三'});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-多列属性"><a href="#2-多列属性" class="headerlink" title="2.多列属性"></a>2.多列属性</h5><pre class="line-numbers language-none"><code class="language-none">vuedemo.items = Object.assign( {},  vuedemo.items,  {  interest: "Sing",  address: "BeiJing" });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MPWeiXin</title>
      <link href="/2023/02/19/MPWeiXin/"/>
      <url>/2023/02/19/MPWeiXin/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-1-开发工具"><a href="#1-1-开发工具" class="headerlink" title="1.1 开发工具"></a>1.1 开发工具</h1><h2 id="1-程序调试"><a href="#1-程序调试" class="headerlink" title="1.程序调试"></a>1.程序调试</h2><h3 id="1-模拟器"><a href="#1-模拟器" class="headerlink" title="1.模拟器"></a>1.模拟器</h3><p>客服端真实逻辑表现</p><h3 id="2-编辑器"><a href="#2-编辑器" class="headerlink" title="2.编辑器"></a>2.编辑器</h3><p>对项目进行代码编写和文件的添加，删除及重命名</p><h4 id="1-文件的编辑"><a href="#1-文件的编辑" class="headerlink" title="1.文件的编辑"></a>1.文件的编辑</h4><h5 id="1-wxml"><a href="#1-wxml" class="headerlink" title="1.wxml"></a>1.wxml</h5><p>帮助开发者直接写出相关的标签和标签的属性</p><h5 id="2-wxss"><a href="#2-wxss" class="headerlink" title="2.wxss"></a>2.wxss</h5><h5 id="3-js"><a href="#3-js" class="headerlink" title="3.js"></a>3.js</h5><p>帮助开发者补全所有API和相关的注释解释，并提供代码模板支持</p><h5 id="4-json"><a href="#4-json" class="headerlink" title="4.json"></a>4.json</h5><p>帮助开发者补全相关的配置，并实时给出提示</p><h5 id="5-wxs"><a href="#5-wxs" class="headerlink" title="5.wxs"></a>5.wxs</h5><h3 id="3-调试器"><a href="#3-调试器" class="headerlink" title="3.调试器"></a>3.调试器</h3><h4 id="1-功能模块"><a href="#1-功能模块" class="headerlink" title="1.功能模块"></a>1.功能模块</h4><h5 id="1-Console"><a href="#1-Console" class="headerlink" title="1.Console"></a>1.Console</h5><h6 id="1-开发者输入"><a href="#1-开发者输入" class="headerlink" title="1.开发者输入"></a>1.开发者输入</h6><h6 id="2-调式代码"><a href="#2-调式代码" class="headerlink" title="2.调式代码"></a>2.调式代码</h6><h6 id="3-微信小程序的错误输出"><a href="#3-微信小程序的错误输出" class="headerlink" title="3.微信小程序的错误输出"></a>3.微信小程序的错误输出</h6><h5 id="2-Sources"><a href="#2-Sources" class="headerlink" title="2.Sources"></a>2.Sources</h5><p>用于显示当前项目的脚本文件，同浏览器开发不同，微信小程序框架会对脚本文件进行编译开发者看到的文件是处理之后的脚本文件，开发者的代码都会包裹在define函数中</p><h5 id="3-NetWork"><a href="#3-NetWork" class="headerlink" title="3.NetWork"></a>3.NetWork</h5><p>用于观察和显示request和socket的请求情况</p><h5 id="4-Security"><a href="#4-Security" class="headerlink" title="4.Security"></a>4.Security</h5><p>安全认证</p><h5 id="5-Mock"><a href="#5-Mock" class="headerlink" title="5.Mock"></a>5.Mock</h5><p>数据模拟</p><h5 id="6-AppDate"><a href="#6-AppDate" class="headerlink" title="6.AppDate"></a>6.AppDate</h5><p>用于显示当前appdata的具体数据，实时的反馈项目数据情况用户可在此编辑数据，数据结果将及时反馈到界面上</p><h5 id="7-Audits"><a href="#7-Audits" class="headerlink" title="7.Audits"></a>7.Audits</h5><p>性能监控</p><h5 id="8-Sensor"><a href="#8-Sensor" class="headerlink" title="8.Sensor"></a>8.Sensor</h5><h6 id="1-模拟地理位置"><a href="#1-模拟地理位置" class="headerlink" title="1.模拟地理位置"></a>1.模拟地理位置</h6><h6 id="2-模拟移动设备表现-调试重力感应API"><a href="#2-模拟移动设备表现-调试重力感应API" class="headerlink" title="2.模拟移动设备表现(调试重力感应API)"></a>2.模拟移动设备表现(调试重力感应API)</h6><h5 id="9-Storage"><a href="#9-Storage" class="headerlink" title="9.Storage"></a>9.Storage</h5><p>用于显示当前项目使用wx.setStorage 或 wx.setSrorageSync 后的数据存储情况</p><h5 id="10-Trace"><a href="#10-Trace" class="headerlink" title="10.Trace"></a>10.Trace</h5><p>体验评分</p><h5 id="11-Wxml"><a href="#11-Wxml" class="headerlink" title="11.Wxml"></a>11.Wxml</h5><p>帮助开发者开发Wxml转化后的界面。可以看到页面结构及结构对应的WXSS属性，可以修改对应的WXSS属性</p><h3 id="4-云开发"><a href="#4-云开发" class="headerlink" title="4.云开发"></a>4.云开发</h3><h4 id="1-云开发控制台"><a href="#1-云开发控制台" class="headerlink" title="1.云开发控制台"></a>1.云开发控制台</h4><h5 id="1-运营分析"><a href="#1-运营分析" class="headerlink" title="1.运营分析"></a>1.运营分析</h5><h5 id="2-数据库"><a href="#2-数据库" class="headerlink" title="2.数据库"></a>2.数据库</h5><h5 id="3-存储"><a href="#3-存储" class="headerlink" title="3.存储"></a>3.存储</h5><h5 id="4-云函数"><a href="#4-云函数" class="headerlink" title="4.云函数"></a>4.云函数</h5><h1 id="1-2-技术框架"><a href="#1-2-技术框架" class="headerlink" title="1.2 技术框架"></a>1.2 技术框架</h1><h2 id="1-运行机制"><a href="#1-运行机制" class="headerlink" title="1.运行机制"></a>1.运行机制</h2><p>马上应用在新版本，使用 wx.getUpdatemannagerAPI 进行处理</p><h3 id="1-热加载"><a href="#1-热加载" class="headerlink" title="1.热加载"></a>1.热加载</h3><p>前台切换到后台</p><h3 id="2-冷加载"><a href="#2-冷加载" class="headerlink" title="2.冷加载"></a>2.冷加载</h3><p>重新加载</p><h2 id="2-启动配置"><a href="#2-启动配置" class="headerlink" title="2.启动配置"></a>2.启动配置</h2><h3 id="1-通过全局文件app-json设置启动页面"><a href="#1-通过全局文件app-json设置启动页面" class="headerlink" title="1.通过全局文件app.json设置启动页面"></a>1.通过全局文件app.json设置启动页面</h3><p>在app.json，pages数组中的第一个页面就是默认启动页面，只需要调整当前开打的页面在pages数组的顺序</p><h3 id="2-通过添加编译模式设置启动页面"><a href="#2-通过添加编译模式设置启动页面" class="headerlink" title="2.通过添加编译模式设置启动页面"></a>2.通过添加编译模式设置启动页面</h3><h2 id="3-目录结构"><a href="#3-目录结构" class="headerlink" title="3.目录结构"></a>3.目录结构</h2><h3 id="1-page文件夹"><a href="#1-page文件夹" class="headerlink" title="1.page文件夹"></a>1.page文件夹</h3><ol><li>index.js</li><li>index.json</li><li>index.wxml</li><li>index.wxssPS: 1.小程序每个页面必须有wxml和js 2.文件名称和页面文件夹的名称相同</li></ol><h3 id="2-utils文件夹"><a href="#2-utils文件夹" class="headerlink" title="2.utils文件夹"></a>2.utils文件夹</h3><p>  用于存放全局的js文件例： 公用的方法，对时间的处理</p><pre><code>  module.exports={  formatTime:formatTime  }</code></pre><p>  对允许外部调用的方法，在用module。exports语句进行声明，才能在其他js文件中用下代码引入</p><pre><code>  var util = require('../../utils/util.js')</code></pre><p>  然后可以调用方法。 如： 定义一个ulit函数</p><pre><code>  function util(){      console.log('模块被调用')     }   module.exports.util = util</code></pre><p>  然后在 index.js文件中调用这个 util 函数</p><pre><code>  var common = require('../../util.js')</code></pre><h3 id="3-app-js文件夹，app-json文件夹，app-wxss文件夹"><a href="#3-app-js文件夹，app-json文件夹，app-wxss文件夹" class="headerlink" title="3.app.js文件夹，app.json文件夹，app.wxss文件夹"></a>3.app.js文件夹，app.json文件夹，app.wxss文件夹</h3><ol start="5"><li>app.js文件用于存放系统方法处理的全局文件</li><li>app.json文件用于存放系统全局配置文件。 该文件可设置页面路径，网络，调试模式，导航条颜色，字体大小，是否有tabbar。</li></ol><h1 id="1-3-逻辑层"><a href="#1-3-逻辑层" class="headerlink" title="1.3 逻辑层"></a>1.3 逻辑层</h1><h1 id="4-1-视图容器组件"><a href="#4-1-视图容器组件" class="headerlink" title="4.1 视图容器组件"></a>4.1 视图容器组件</h1><h2 id="1-view-视图容器"><a href="#1-view-视图容器" class="headerlink" title="1.view 视图容器"></a>1.view 视图容器</h2><p>view 视图容器是 WXML 界面布局的基础组件，它的使用和 HTML 里的 DIV 类似，主要用于界<br>面的布局。view 视图容器也有自己的属性，如表所示。</p><p>属性                类型        默认值      说明</p><p>hover               Boolean     false       是否启用单击态</p><p>hover-class         String      none        指定按下去的样式类。当 hover-class=”none”时，<br>                                            没有单击态效果</p><p>hover-start-time    Number      50          按住后多久出现单击态，单位毫秒</p><p>hover-stay-time     Number      400         手指松开后单击态保留时间，单位毫秒</p><h2 id="2-scroll-view-可滚动视图区域"><a href="#2-scroll-view-可滚动视图区域" class="headerlink" title="2.scroll-view 可滚动视图区域"></a>2.scroll-view 可滚动视图区域</h2><p>scroll-view 可滚动视图区域允许视图区域内容横向滚动或者纵向滚动，类似于浏览器的横向滚<br>动条和垂直滚动条，scroll-view 拥有自己的属性和事件，如表所示。</p><p>属性                类型        默认值      说明</p><p>scroll-x            boolean     False       允许横向滚动</p><p>scroll-y            boolean     False       允许纵向滚动</p><p>upper-threshold     number      50          距顶部/左边多远时（单位为 px）,<br>                                            触发 scrolltoupper 事件</p><p>lower-threshold     number      50          距底部/右边多远时（单位为 px）,<br>                                            触发 scrolltolower 事件</p><p>scroll-top          number                  设置竖向滚动条位置</p><p>scroll-left         number                  设置横向滚动条位置</p><p>scroll-into-view    string                  值应为某子元素 id，则滚动到该元素，<br>                                            元素顶部对齐滚动区域顶部</p><p>scroll-with-anim    atio        boolean     在设置滚动条位置时使用动画过渡</p><p>enable-back-to-top  boolean     False       iOS 系统点击顶部状态栏、安卓系统<br>                                            双击标题栏时，滚动条返回顶部。只支持竖向</p><p>enable-flex         boolean      False      启用 flexbox 布局。开启后，如果当前<br>                                            节点声明了display：flex 就会成为<br>                                            flex container，并作用于其孩子节点</p><p>scroll-anchoring    boolean     False       开启 scroll anchoring 特性，即控制滚动位置<br>                                            不随内容变化而抖动。仅在 iOS 系统下生效，安<br>                                            卓系统下可参考 CSS 的 overflow-anchor 属性</p><p>refresher-enabled   boolean     False       开启自定义下拉刷新</p><p>refresher-threshold number      45          设置自定义下拉刷新阈值</p><p>refresher-default-style string  black       设置自定义下拉刷新默认样式，支持设置为black、<br>                                            white、none。none 表示不使用默认样式</p><p>refresher-background    string  #FFF        设置自定义下拉刷新区域背景颜色</p><p>refresher-triggered     boolean False       设置当前下拉刷新状态，true 表示下拉刷新已经<br>                                            被触发，false 表示下拉刷新未被触发</p><p>bindscrolltoupper       eventhandle         滚动到顶部/左边会触发 scrolltoupper 事件</p><p>bindscrolltolower       eventhandle         滚动到底部/右边会触发 scrolltolower 事件</p><p>bindscroll              eventhandle         滚动时触发。event.detail = {scrollLeft,<br>                                            scrollTop, scrollHeight, scrollWidth, deltaX,<br>                                            deltaY}</p><p>bindrefresherpulling    eventhandle         自定义下拉刷新控件被下拉</p><p>bindrefresherrefresh    eventhandle         自定义下拉刷新控件被触发</p><p>bindrefresherrestore    eventhandle         自定义下拉刷新控件被复位</p><p>bindrefresherabort      eventhandle         自定义下拉刷新控件被中止</p><h3 id="1-纵向滑动"><a href="#1-纵向滑动" class="headerlink" title="(1) 纵向滑动"></a>(1) 纵向滑动</h3><p>允许内容纵向滚动，需要给&lt;\scroll-view/&gt;一个固定高度<br>可以绑定滚动到顶部/左边（bindscrolltoupper）<br>滚动到底部/右边（bindscrolltolower）<br>滚动时（bindscroll）触发的事件.<br>也可以滚动到指定的 id 区域（scroll- into-view）。<br>下面实现纵向滚动，如图所示。<br>（1）在 wxml 文件里使用 scroll-view 进行布局，设置 scroll-y=”true”纵向滚动.<br>绑定bindscrolltoupper、bindscrolltolower、bindscroll、scroll-into-view、scroll-top 事件，具体代<br>码如下.</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--index.wxml--&gt;&lt;view class="section"&gt;  &lt;view class="section_title"&gt;scroll-view纵向滚动&lt;/view&gt;  //需要给\&lt;\scroll-view/&gt;一个固定高度  &lt;scroll-view scroll-y="true" style="height: 200px;" bindscrolltoupper="upper"    bindscrolltolower="lower"  bindscrolltolower="scroll"    scroll-into-view="{{toView}}" scroll-top="{{scroll-top}}"&gt;        &lt;view id="green" style="width: 100%;height: 100px;background-color: green;"&gt;&lt;/view&gt;        &lt;view id="red" style="width: 100%;height: 100px;background-color: red;"&gt;&lt;/view&gt;        &lt;view id="yellow" style="width: 100%;height: 100px;background-color: yellow;"&gt;&lt;/view&gt;        &lt;view id="blue" style="width: 100%;height: 100px;background-color: blue;"&gt;&lt;/view&gt;    &lt;/scroll-view&gt;    &lt;view class="btn-area"&gt;      &lt;button type="default" style="margin: 10px;" bindtap="tap"&gt;        click me to scroll into view&lt;/button&gt;      &lt;button type="default" style="margin: 10px;" bindtap="tapMove"&gt;        click me to scroll      &lt;/button&gt;    &lt;/view&gt;&lt;/view&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）在 js 文件里设置颜色的数组，绑定 to View 和 scroll Top 数据值，提供 bindscrolltoupper、<br>bindscrolltolower、bindscroll、scroll-into-view、scroll-top 事件函数，具体代码如下。</p><pre class="line-numbers language-none"><code class="language-none">// index.jsvar order=["red","yellow","blue","green","red"]Page({  data:{    toView: 'red',    scrollTop: 100  },  upper:function(e){    console.log(e)  },  lower:function(e){    console.log(e)  },  scroll:function(e){    console.log(e)  },  tap:function(e){    for(var i=0;i&lt;order.length;++i){      if(order[i] === this.data.toView){        this.setData({          toView:order[i+1]        })        break      }    }  },tapMove:function(e){    this.setData({      scrollTop:this.data.scrollTop+10    })  }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以实现纵向滚动了，可以滚动到指定区域，也可以滚动到指定的位置，同时滚动到顶<br>部或底部会触发相应的事件，在滚动过程中也可以触发相应的事件。</p><h3 id="2-横向滑动"><a href="#2-横向滑动" class="headerlink" title="(2) 横向滑动"></a>(2) 横向滑动</h3><p>在新闻列表的上方都会有新闻频道供我们选择，可以<br>向左滑动和向右滑动来查看相应类别的新闻，可以采用 scroll-view 来实现这些新闻频道的横向滚动</p><p>在 wxml 文件里使用 scroll-view 进行布局，设置 scroll-x=”true”横向滚动，具体代码如下。</p><h2 id="3-swiper-滑块视图容器"><a href="#3-swiper-滑块视图容器" class="headerlink" title="3.swiper 滑块视图容器"></a>3.swiper 滑块视图容器</h2><p>swiper 滑块视图容器用来在指定区域内切换显示内容，常用来制作海报轮播效果和页签内容切<br>换效果，它的属性如表所示。</p><p>属性                      类型              默认值          说明</p><p>indicator-dots            boolean           False           是否显示面板指示点</p><p>indicator-color           color             rgba(0,0,0,.3)  指示点颜色</p><p>indicator-active-color    color             #000000         当前选中的指示点颜色</p><p>autoplay                  boolean           False           是否自动切换</p><p>current                   number             0              当前所在页面的 index</p><p>interval                  number            5000            自动切换时间间隔</p><p>duration                  number            500             滑动动画时长</p><p>circular                  boolean           False           是否采用衔接滑动</p><p>vertical                  boolean           False           滑动方向是否为纵向</p><p>previous-margin           string            “0px”           前边距，可用于露出前一项的一小部分，<br>                                                            有 px 和 rpx 两种单位</p><p>next-margin               string            “0px”           后边距，可用于露出后一项的一小部分，<br>                                                            有 px 和 rpx 两种单位</p><p>display-multiple-items    number            1               同时显示的滑块数量</p><p>skip-hidden-item-layout   boolean           False           是否跳过未显示的滑块布局。<br>                                                            设为True 可优化复杂情况下的滑动性能，<br>                                                            但会丢失隐藏状态的滑块的布局信息</p><p>easing-function           string            default         指定 swiper 切换缓动动画类型。<br>                                                            Default为默认缓动函数、linear为线性动画、<br>                                                            easeInCubic为缓入动画 、easeOutCubic 为缓出动画、<br>                                                            easeInOutCubic 为缓入缓出动画</p><p>bindchange                eventhandle                       current改变时会触发change事件。event.detail={current: current}</p><p>bindtransition            eventhandle                       swiper-item 的位置发生改变时会触发transition事件。<br>                                                            event. detail = {dx: dx, dy: dy}</p><p>bindanimationfinish       eventhandle                       动画结束时会触发 animationfinish 事件。<br>                                                            event.detail ={dx: dx, dy: dy}</p><h3 id="1-海报轮播效果"><a href="#1-海报轮播效果" class="headerlink" title="1.海报轮播效果"></a>1.海报轮播效果</h3><p>(1)在 wxml 文件里，采用 swiper 滑块视图容器组件进行海报轮播区域的布局，具体代码如<br>下：  </p><pre class="line-numbers language-none"><code class="language-none">&lt;view class="haibao"&gt;  &lt;swiper indicator-dots="{{indicatorDots}}" autoplay="{{autoplay}}"  interval="{{interval}}" duration="{{duration}}"&gt;      &lt;block wx:for="{{imgUrls}}"&gt;        &lt;swiper-item&gt;          &lt;image src="{{item}}" class="silde-image" style="width: 100%;"/&gt;        &lt;/swiper-item&gt;      &lt;/block&gt;  &lt;/swiper&gt;  &lt;/view&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 js 文件里，提供海报轮播的图片，设置是否自动播放，提供轮播的时长等数据，通过数据绑定的<br>方式渲染到页面上，具体代码如下。</p><pre class="line-numbers language-none"><code class="language-none">Page({  indicatorDots:true,  autoplay:true,  interval:5000,  duration:1000,  imgUrls:[    "https://api.mofun365.com:8888/images/goods/1555851154057.jpg",    "https://api.mofun365.com:8888/images/goods/1555851345937.jpg",    "https://api.mofun365.com:8888/images/goods/1555850845474.jpg",  ]})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置 autoplay 等于 true 时就可以自动进行海报轮播，设置 indicatorDots 等于 true，代表显<br>示面板指示点，同时可以设置 interval 自动切换时长、duration 滑动动画时长</p><h3 id="2-页签内容切换效果"><a href="#2-页签内容切换效果" class="headerlink" title="2.页签内容切换效果"></a>2.页签内容切换效果</h3><p>swiper 滑块视图容器除了可以用来实现海报轮播效果，还可以实现页签切换效果。页签切换效<br>果常用于多种方式的登录或者多种类别的切换，如图所示</p><h2 id="4-movable-view-可移动视图容器"><a href="#4-movable-view-可移动视图容器" class="headerlink" title="4.movable-view 可移动视图容器"></a>4.movable-view 可移动视图容器</h2><p>movable-view 是一个可移动视图容器，在页面中可以做拖曳滑动。在使用这个组件的时候，<br>需要先定义可移动区域 movable-area，然后定义直接子节点 movable-view，否则不能移动。<br>movable-area 必须设置 width 和 height 属性，不设置默认为 10px；movable-view 必须设置<br>width 和 height 属性，不设置默认为 10px， movable-view 默认为绝对定位，top 和 left 属性.<br>为 0px。movable-view 可移动视图容器的属性如表所示.</p><p>属性                    类型            默认值          说明</p><p>direction               string          none            movable-view 的移动方向。属性值有<br>                                                        all、vertical、horizontal、none</p><p>inertia                 boolean         False           movable-view 是否带有惯性</p><p>out-of-bounds           boolean         False           超过可移动区域后，movable-view 是否还可以移动</p><p>x                       number/string                   定义 x 轴方向的偏移。如果 x 的值不在可移动范围<br>                                                        内，会自动移动到可移动范围；改变 x 的值会触发动画</p><p>y                       number/string                   定义 y 轴方向的偏移。如果 y 的值不在可移动范围内，<br>                                                        会自动移动到可移动范围；改变 y 的值会触发动画</p><p>damping                 number          20              阻尼系数，用于控制 x 或 y 改变时的动画和过界回弹的<br>                                                        动画，值越大移动越快</p><p>friction                number          2               摩擦系数，用于控制惯性滑动的动画，值越大摩擦力越大，滑动<br>                                                        越快停止；必须大于 0，否则会被设置成默认值</p><p>disabled                boolean         False           是否禁用</p><p>scale                   boolean         False           是否支持双指缩放，默认缩放手势生效区域是在movable-view内</p><p>scale-min               number          0.5             定义缩放倍数最小值</p><p>scale-max               number          10              定义缩放倍数最大值</p><p>scale-value             number          1               定义缩放倍数，取值范围为 0.5～10</p><p>animation               boolean         True            是否使用动画</p><p>bindchange              eventhandle                     拖动过程中触发的事件，event.detail = {x: x, y: y, source:<br>                                                        source}。其中 source 表示产生移动的原因，值可为 touch（拖<br>                                                        动）、touch-out-of-bounds（超出移动范围）、out-of-bounds<br>                                                        （超出移动范围后的回弹）、friction（惯性）和空字符串（setData）</p><p>movable-view 提供了两个特殊事件：<br>    htouchmove 事件，指初次手指触摸后的移动为横向移动，<br>      如果 catch 此事件，则意味着 touchmove 事件也被 catch；<br>    vtouchmove 事件，指初次手指<br>      触摸后的移动为纵向移动，如果 catch 此事件，则意味着 touchmove 事件也被 catch。  </p><p>（1）在 wxml 文件里，使用 movable-area 和 movable-view 视图容器组件进行布局，具体代码如下。                                                     </p><pre class="line-numbers language-none"><code class="language-none">&lt;!--index.wxml--&gt;&lt;view class="section"&gt;  &lt;movable-area style="height: 200px;width: 100%;background-color: yellow;"&gt;                                                                                                          // movable-view 的移动方向。    &lt;movable-view style="height: 50px;width: 50px;background-color: red;" x="{{x}}" y="{{y}}" direction="all"&gt;&lt;/movable-view&gt;  &lt;/movable-area&gt;&lt;/view&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）在 js 文件里，提供拖动函数、缩放函数，通过数据绑定的方式渲染到页面上，具体代码如下。</p><pre class="line-numbers language-none"><code class="language-none">&lt;--index.js--&gt;Page({  data:{    x:0,    y:0  },  tap:function(e){    this.setData({      x:30,      y:30    });  },  onChange:function(e){    console.log(e.detail)  }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-cover-view-、cover-image-覆盖原生组件的视图容器"><a href="#5-cover-view-、cover-image-覆盖原生组件的视图容器" class="headerlink" title="5.cover-view 、cover-image 覆盖原生组件的视图容器"></a>5.cover-view 、cover-image 覆盖原生组件的视图容器</h2><p>cover-view、cover-image 这两个是覆盖原生组件的视图容器。<br>比如在使用地图组件时，地图组件本身的功能很有局限，但是想放置一些特殊的内容或图片，这时就需要使用覆盖地图组件的视<br>图容器。<br>  (1)cover-view 是指覆盖在原生组件之上的文本视图，可覆盖的原生组件包括 map、video、canvas、<br>camera，只支持嵌套 cover-view、cover-image。<br>  (2)cover-image 是指覆盖在原生组件之上的图片视图，可覆盖的原生组件同 cover-view 一样，<br>支持嵌套 cover-view。</p><p>下面使用 cover-view、cover-image 覆盖原生组件的视图容器组件，在 video 视频播放组件上<br>放置播放、暂停两个图片，同时放置一个时间内容显示区域，如图所示。</p><p>（1）在 wxml 文件里使用 cover-view、cover-image 覆盖原生组件的视图容器组件进行布局，<br>具体代码如下。在线视频地址从图片素材中复制</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--pages/coverViewDemo/coverViewDemo.wxml.wxml--&gt;&lt;video id="myideo" src="http://wxsnsdy.tc.qq.com/105/20210/snsdyvideodownload?filekey=30280201010421301f0201690402534804102ca905ce620b1241b726bc41dcff44e00204012882540400&amp;bizid=1023&amp;hy=SH&amp;fileparam=302c020101042530230204136ffd93020457e3c4ff02024ef202031e8d7f02030f42400204045a320a0201000400" controls="{{false}}"  event-model="bubble" style="width: 100%;"&gt;  &lt;cover-view class="controls"&gt;    &lt;cover-view class="play" bindtap="play"&gt;      &lt;cover-image class="img" src="/pages/images/play.png"&gt;&lt;/cover-image&gt;    &lt;/cover-view&gt;    &lt;cover-view class="pause" bindtap="pause"&gt;      &lt;cover-image class="img" src="/pages/images/pause.png"&gt;&lt;/cover-image&gt;    &lt;/cover-view&gt;    &lt;cover-view class="time"&gt;00:00&lt;/cover-view&gt;  &lt;/cover-view&gt;    &lt;/video&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）在 wxss 文件里添加样式</p><pre class="line-numbers language-none"><code class="language-none">.controls{  position: relative;  top: 50%;  height: 50px;  margin-top: -25px;  display: flex;}.play,.pause,.time{  flex:1;  height: 100%;}.time{  text-align: center;  background-color: rgba(0,0,0,.1);  color: white;  line-height: 50px;}.img{  width: 40px;  height: 40px;  margin: 5px auto;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）在 js 文件里，提供视频播放、暂停函数，初始化视频播放组件，</p><pre class="line-numbers language-none"><code class="language-none">Page({  onReady(){    this.videoCtx=wx.createVideoContext('myVideo')  },  play(){    this.videoCtx.play()  },  pause(){    this.videoCtx.pause()  }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE</title>
      <link href="/2023/02/18/JavaEE/"/>
      <url>/2023/02/18/JavaEE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-SpringBoot"><a href="#1-SpringBoot" class="headerlink" title="1.SpringBoot"></a>1.SpringBoot</h1><h2 id="1-Rest风格"><a href="#1-Rest风格" class="headerlink" title="1.Rest风格"></a>1.Rest风格</h2><h3 id="1-1Rest"><a href="#1-1Rest" class="headerlink" title="1.1Rest"></a>1.1Rest</h3><h4 id="1-1-1-Rest简介"><a href="#1-1-1-Rest简介" class="headerlink" title="1.1.1 Rest简介"></a>1.1.1 Rest简介</h4><ul><li>Rest 表现形式状态转换<br><strong>传统风格</strong></li></ul><ul><li><p><a href="http://localhost/user/getById?id=1">http://localhost/user/getById?id=1</a></p></li><li><p><a href="http://localhost/user/saveUser">http://localhost/user/saveUser</a></p></li></ul><p><strong>Rest风格</strong></p><ul><li><p><a href="http://localhost/user/1">http://localhost/user/1</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(查询单数，删除用户信息)</p></li><li><p><a href="http://localhost/user">http://localhost/user</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(查询复数，添加，修改用户信息)</p></li></ul><p><strong>优点</strong></p><ul><li><p>隐藏资源访问行为</p></li><li><p>书写简化</p></li></ul><h4 id="1-1-2-地址栏传参模式—-参数配置"><a href="#1-1-2-地址栏传参模式—-参数配置" class="headerlink" title="1.1.2 地址栏传参模式—-参数配置"></a>1.1.2 地址栏传参模式—-参数配置</h4><ul><li>method = RequestMethod.GET&nbsp;   查询</li><li>method = RequestMethod.POST   保存</li><li>method = RequestMethod.DELETE 删除</li><li>method = RequestMethod.HEAD</li><li>method = RequestMethod.PUT    更新</li><li>method = RequestMethod.OPTIONS</li><li>method = RequestMethod.PATCH</li><li>method = RequestMethod.TRACE</li></ul><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.controller;import org.springframework.web.bind.annotation.*;@Controllerpublic class UserController {    @RequestMapping(value = "/users",method = RequestMethod.POST)    @ResponseBody    public String save(){        System.out.println("user save...");        return "{'module':'user save'}";    }    /**     * {id}             代表请求格式，对应方法的传参值     * @PathVariable    指定 id 的所取值,url地址传给方法     */    @RequestMapping(value = "/users/{id}",method = RequestMethod.DELETE)    @ResponseBody    public String delete(@PathVariable Integer id){        System.out.println("user delete..."+id);        return "{'module':'user delete'}";    }&nbsp;&nbsp;&nbsp;&nbsp;@RequestMapping(value = "/users",method = RequestMethod.PUT)    @ResponseBody    public String update(@RequestBody User user){        System.out.println("user update..."+user);        return "{'module':'user update'}";    }&nbsp;&nbsp;&nbsp;&nbsp;/*    * @RequestMethod.GET  专门查询语句    */    @RequestMapping(value = "/users/{id}",method = RequestMethod.GET)    @ResponseBody    public String getById(@PathVariable Integer id){        System.out.println("user getById..."+id);        return "{'module':'user getById'}";    }    @RequestMapping(value = "/users",method = RequestMethod.GET)    @ResponseBody    public String getAll(){        System.out.println("user getAll...");        return "{'module':'user getAll'}";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;区别</p><ul><li><p>@RequestParam 用于接受 url 地址传参或表单传参</p></li><li><p>@RequestBody 用于接受json数据</p></li><li><p>@PathVariable 用于接收路径参数，使用 {name} 描述路径参数</p></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;应用</p><ul><li><p>后期开发，发送请求超过一个参数，以json格式，@RequestBody 应用为主</p></li><li><p>如果发送非json格式数据，选用@RequestParam 接收请求参数</p></li><li><p>采用RESTful进行开发，当参数较少时，采用@PathVariable 接收请求路径变量，传递 id 值</p></li></ul><h4 id="1-1-3-Rest快速开发"><a href="#1-1-3-Rest快速开发" class="headerlink" title="1.1.3 Rest快速开发"></a>1.1.3 Rest快速开发</h4><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.controller;import org.springframework.web.bind.annotation.*;@RestController@ResponseBody//@RestController@RequestMapping("/users")public class UserController {    @PostMapping    public String save(@RequestBody User user){        System.out.println("user save...");        return "{'module':'user save'}";    }    /**     * {id}             代表请求格式，对应方法的传参值     * @PathVariable    指定 id 路径 的 所取值     */    @DeleteMapping("/{id}")    public String delete(@PathVariable Integer id){        System.out.println("user delete..."+id);        return "{'module':'user delete'}";    }    @PutMapping    public String update(@RequestBody User user){        System.out.println("user update..."+user);        return "{'module':'user update'}";    }    /*    * @RequestMethod.GET  专门查询语句    */    @GetMapping("/{id}")    public String getById(@PathVariable Integer id){        System.out.println("user getById..."+id);        return "{'module':'user getById'}";    }    @GetMapping    public String getAll(){        System.out.println("user getAll...");        return "{'module':'user getAll'}";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要点：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;简化</p><ul><li>@RestController&nbsp;&nbsp;等价 @ResponseBody &lt; &lt; ==== &gt; &gt; @RestController (目的：省略重复)</li><li>value = “/users” 省略：value 但不能省略传递的 {name} 值</li><li>method = RequestMethod. { } @…Mapping代替 单值 和 POJO值 的传值方式</li><li>@PathVariable 单值传输</li><li>@RequestBody POJO值传输</li></ul><h2 id="2-基础配置"><a href="#2-基础配置" class="headerlink" title="2.基础配置"></a>2.基础配置</h2><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/">SpringBoot文档地址</a></p><h3 id="2-1-属性配置"><a href="#2-1-属性配置" class="headerlink" title="2.1 属性配置"></a>2.1 属性配置</h3><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties">SpringBoot Appilcation.properties文档地址</a></p><h4 id="2-1-1-Springboot-多种属性配置-文件优先级递减"><a href="#2-1-1-Springboot-多种属性配置-文件优先级递减" class="headerlink" title="2.1.1 Springboot 多种属性配置(文件优先级递减)"></a>2.1.1 Springboot 多种属性配置(文件优先级递减)</h4><ul><li>.properties<ul><li>server.port=80</li></ul></li><li>.yml<ul><li>server:<br>  port: 80</li></ul></li><li>.yaml<ul><li>   server:<br>   port: 80</li></ul></li></ul><h5 id="1-yml格式"><a href="#1-yml格式" class="headerlink" title="1.yml格式"></a>1.yml格式</h5><ol><li><p>多层级属性名</p><pre class="line-numbers language-none"><code class="language-none">a: b:  C: 1145137<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>数组属性名</p><pre class="line-numbers language-none"><code class="language-none">likes: - games - foods - books# 缩略模式likes:[games,foods,books]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对象数组属性名</p><pre class="line-numbers language-none"><code class="language-none">users: - name: zhangsan   age: 18 - name: Jhon   age: 16# 缩略模式users:[{name:zhangsan,age:18},{name:Jhon,age:16}]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="2-数据读取"><a href="#2-数据读取" class="headerlink" title="2.数据读取"></a>2.数据读取</h5><div class="tabs" id="user.java"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#user.java-1">user.java</button></li><li class="tab"><button type="button" data-href="#user.java-2">application.properties</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="user.java-1"><pre class="line-numbers language-none"><code class="language-none">@value("${users.name}")private String name;@value("${likes[1]}")private String games;@value("${users[1].name}")private String name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="user.java-2"><pre class="line-numbers language-none"><code class="language-none">baseDir: c:\windows # 使用 ${value} 引用数据tempDir: ${baseDir}\temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>属性值(value)用 “"转义字符 的会不显示<br>使用　“spring\boot\text.txt”</p><h5 id="3-封装数据"><a href="#3-封装数据" class="headerlink" title="3.封装数据"></a>3.封装数据</h5><ol><li><p>全配置封装</p><pre class="line-numbers language-none"><code class="language-none">//自动装配@Autowiredprivate Environment environment;environment.getProperty("users[0].name");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>针对性封装</p><div class="tabs" id="application.yml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#application.yml-1">application.yml</button></li><li class="tab"><button type="button" data-href="#application.yml-2">MyDataSource.java</button></li><li class="tab"><button type="button" data-href="#application.yml-3">ServerImpl.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="application.yml-1"><pre class="line-numbers language-none"><code class="language-none">spring:  datasource:    url: jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false    username: root    password: 123456    driver: com.mysql.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="application.yml-2"><pre class="line-numbers language-none"><code class="language-none"># 1.创建类，封装数据package top.wabisabifag.POJO;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;# 2.Spring加载数据对象，告诉Spring加载信息@Data@Component@ConfigurationProperties(prefix = "spring.datasource")public class MyDataSource {    private String url;    private String username;    private String password;    private String driver;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="application.yml-3"><pre class="line-numbers language-none"><code class="language-none"># 3.使用Spring获取的信息@Autowiredprivate MyDataSource myDataSource;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li></ol><h4 id="2-1-2-修改服务器端口"><a href="#2-1-2-修改服务器端口" class="headerlink" title="2.1.2 修改服务器端口"></a>2.1.2 修改服务器端口</h4><pre class="line-numbers language-none"><code class="language-none"># 配置服务器端口server.port=80# 修改Spring启动的banner# 关闭Spring Logospring.main.banner-mode=off# 将text，png等文件转化为二维图#spring.banner.image.location=1.png# 控制日志# 输出日志级别#logging.level.root=debug# 在出错时输出日志logging.level.root=error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-第三方技术整合"><a href="#3-第三方技术整合" class="headerlink" title="3.第三方技术整合"></a>3.第三方技术整合</h2><h3 id="1-JUnit"><a href="#1-JUnit" class="headerlink" title="1.JUnit"></a>1.JUnit</h3><div class="tabs" id="bookdaoimpl.java"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bookdaoimpl.java-1">BookDaoImpl.java</button></li><li class="tab"><button type="button" data-href="#bookdaoimpl.java-2">测试</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bookdaoimpl.java-1"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.dao.Impl;import org.springframework.stereotype.Repository;import top.wabisabifag.dao.BookDao;/* 3.接受Spring管理 */@Repositorypublic class BookDaoImpl implements BookDao {    @Override    public void save() {        System.out.println("BookDao testing");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bookdaoimpl.java-2"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.test;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import top.wabisabifag.dao.BookDao;/* 4.获取Spring管理声明 */@SpringBootTestpublic class SpringBootJUnitApplicationTests {    /*1.注入测试对象*/    @Autowired    private BookDao bookDao;    /*2.执行测试方法*/    @Test    void contextLoads(){        bookDao.save();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ol><li><p>当test 测试路径无法对应java 源代码路径</p><p> @SpringBootTest(classes = BookDaoImpl.class)来申明源码</p></li></ol><pre class="line-numbers language-none"><code class="language-none">@SpringBootTest(classes = BookDaoImpl.class)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>@RunWith(设置运行器)@ContextConfiguration(class = .... )//配置引导类或配置类</code></pre><ul><li>ContextConfiguration 用于在当前包下查找声明类</li></ul><h3 id="2-MybatisPlus"><a href="#2-MybatisPlus" class="headerlink" title="2.MybatisPlus"></a>2.MybatisPlus</h3><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">application.yml</button></li><li class="tab"><button type="button" data-href="#pom.xml-3">BookDao.java</button></li><li class="tab"><button type="button" data-href="#pom.xml-4">测试</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;  &lt;groupId&gt;com.baomidou&lt;/groupId&gt;  &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;  &lt;version&gt;3.4.2&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">#配置MP相关数据库名称mybatis-plus:  global-config:    db-config:      table-prefix: tb_<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-3"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.dao;import com.baomidou.mybatisplus.core.mapper.BaseMapper;import org.apache.ibatis.annotations.Mapper;import org.apache.ibatis.annotations.Select;import top.wabisabifag.POJO.Book;@Mapper //  继承 BaseMapperpublic interface BookDao extends BaseMapper {    public void save();    @Select("select * from smbms_user where userid = #{id} ")    public Book getById(int id);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-4"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.test;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import top.wabisabifag.dao.BookDao;import top.wabisabifag.dao.Impl.BookDaoImpl;@SpringBootTest(classes = BookDaoImpl.class)public class SpringBootJUnitApplicationTests {    /*1.注入测试对象*/    @Autowired    private BookDao bookDao;    /*2.执行测试方法*/    @Test    void contextLoads(){        bookDao.save();        bookDao.getById(1);    }    @Test    void contextLoadsPlus(){        System.out.println(bookDao.selectById(2));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="4-Lombok"><a href="#4-Lombok" class="headerlink" title="4.Lombok"></a>4.Lombok</h3><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">实体类注解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;  &lt;artifactId&gt;lombok&lt;/artifactId&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.domain;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;import lombok.ToString;@Data  //  @Getter @Setter@NoArgsConstructor  // 无参构造@AllArgsConstructor // 有参构造@ToString   public class User {    private int id;    private String userCode;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>主要:</p><ul><li>@Getter @Setter 等价于 @Data</li></ul><h3 id="5-Druid"><a href="#5-Druid" class="headerlink" title="5.Druid"></a>5.Druid</h3><pre class="line-numbers language-none"><code class="language-none">------pom 获取Druid依赖------&lt;dependency&gt;      &lt;groupId&gt;com.alibaba&lt;/groupId&gt;      &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;      &lt;version&gt;1.1.23&lt;/version&gt;    &lt;/dependency&gt;-------配置--------通用配置:spring:  datasource:    url: jdbc:mysql://localhost:3306/smbms_db?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false    username: root    password: 123456    driver-class-name: com.mysql.jdbc.Driver    type: com.alibaba.druid.pool.DruidDataSource整合配置:spring:  datasource:    druid:      url: jdbc:mysql://localhost:3306/smbms_db?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false      username: root      password: 123456      driver-class-name: com.mysql.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-SSMP整合案例"><a href="#2-SSMP整合案例" class="headerlink" title="2.SSMP整合案例"></a>2.SSMP整合案例</h2><ul><li>实体类开发                使用Lombok 快速制作实体类</li><li>Dao 开发                  整合MyBatisPlus ，制作数据层测试类</li><li>Service 开发              基于MyBatisPlus 进行增量开发，制作业务层测试类</li><li>Controller 开发           基于Restful 开发，使用PostMan 测试接口功能</li><li>Controller 开发           前后端开发协议制作</li><li>页面开发                  基于VUE，Element制作，前后端联，页面数据处理<ul><li>CRUD 分页，查询操作</li></ul></li><li>项目异常处理</li><li>按条件查询                页面功能调整，Controller修正功能，Service修正功能</li></ul><h3 id="SMMP源代码"><a href="#SMMP源代码" class="headerlink" title="SMMP源代码"></a>SMMP源代码</h3><p><a href="">源代码</a></p><h2 id="3-SpringBoot维护"><a href="#3-SpringBoot维护" class="headerlink" title="3.SpringBoot维护"></a>3.SpringBoot维护</h2><h3 id="1-工程运行"><a href="#1-工程运行" class="headerlink" title="1.工程运行"></a>1.工程运行</h3><h4 id="1-Windows-jar-包执行"><a href="#1-Windows-jar-包执行" class="headerlink" title="1.Windows jar 包执行"></a>1.Windows jar 包执行</h4><pre class="line-numbers language-none"><code class="language-none">1. 执行jar 包: java -jar packageName 2. 查询端口: netstat -ano3. 查询指定端口: netstat -ano |findstr "端口号"4. 根据进程PID 查询进程名称: tasklist |findstr "进程号PID号"5. 根据PID 杀死任务: tasklist /F /PID "进程PID号"6. 根据进程名称杀死任务: taskkill -f -t -im "进程名称"     进程名称有多个相同的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Linux-jar-包执行"><a href="#2-Linux-jar-包执行" class="headerlink" title="2.Linux jar 包执行"></a>2.Linux jar 包执行</h4><pre class="line-numbers language-none"><code class="language-none">1. 启动后端: nohup java -jar jarPackageName &gt; server.log 2&gt;&amp;1 &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-临时属性配置"><a href="#3-临时属性配置" class="headerlink" title="3.临时属性配置"></a>3.临时属性配置</h4><ol><li><p>执行jar 包: java -jar packageName –server.port=8080 –spring.datasouce.druid.password=root</p></li><li><pre class="line-numbers language-none"><code class="language-none">@SpringBootApplication@MapperScan("top.wabisabifag.dao")/*使用@MapperScan可以指定要扫描的Mapper类的包的路径*/@ComponentScan(basePackages={"top.wabisabifag"})public class application {    public static void main(String[] args) {        // 线程安全问题        // SpringApplication.run(application.class,args);        // 不接受外部临时参数        SpringApplication.run(application.class);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>application.yml 的双配置</p></li></ol><p>文件位置:  1. web/springboot.jar/resources/application.yml<br>           2. web/springboot.jar/resources/config/application.yml<br>           3. web/application.yml<br>           4. web/config/application.yml</p><pre><code>重  复: 文件优先级配置高覆盖低的;不重复: 互不干扰;权限等级: 逐级上升(4 &gt; 3 &gt; 2 &gt; 1)文件内config/ .yml  &gt; 文件外 .properties</code></pre><h4 id="4-多环境开发"><a href="#4-多环境开发" class="headerlink" title="4.多环境开发"></a>4.多环境开发</h4><h5 id="1-YAML"><a href="#1-YAML" class="headerlink" title="1. YAML"></a>1. YAML</h5><pre class="line-numbers language-none"><code class="language-none"># 一、应用环境spring:  profiles:    active: pro---# 二、设置环境# 1. 公共环境# 2. 自定义环境spring:  profiles: proserver:  port:80---spring:  profiles: devserver:  port:81---spring:  config:    activate:      on-profiles: testserver:  port:82<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="YAML-弊端"><a href="#YAML-弊端" class="headerlink" title="YAML 弊端"></a>YAML 弊端</h6><p>1.— : 分割线是格式需求<br>2.容易暴露信息，安全有问题</p><h6 id="YAML-优化"><a href="#YAML-优化" class="headerlink" title="YAML 优化"></a>YAML 优化</h6><p>生成配置文件:<br>    application-dev.yml<br>    application-pro.yml<br>    application-test.yml<br>    可以独立配置文件定义环境;<br>    独立配置文件便于线上系统维护更新并保障系统安全性;</p><h5 id="2-properties"><a href="#2-properties" class="headerlink" title="2. properties"></a>2. properties</h5><ul><li>文件内容格式<pre class="line-numbers language-none"><code class="language-none">spring.profiles=proserver.port=80---spring.profiles=devserver.port=81---spring.profiles=testspring.profiles=82<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>生成配置文件:<br>  application-dev.properties<br>  application-pro.properties<br>  application-test.properties</li></ul><h5 id="3-独立的功能配置文件"><a href="#3-独立的功能配置文件" class="headerlink" title="3. 独立的功能配置文件"></a>3. 独立的功能配置文件</h5><ul><li>根据功能 对配置文件的信息拆分<ul><li>application-devDB.yml</li><li>application-devRedis.yml</li><li>application-devMVC.yml</li></ul></li><li>application.yml 中使用include 属性在激活指定环境 条件下，同时对多环境进行加载<ul><li>application.yml 后加载  <pre class="line-numbers language-none"><code class="language-none">spring:  profiles:    active: dev    include: devDB,devRedis,devMVC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h6 id="优化-include-无法动态更改问题"><a href="#优化-include-无法动态更改问题" class="headerlink" title="优化 include 无法动态更改问题"></a>优化 include 无法动态更改问题</h6><pre><code>+ application.yml 前加载</code></pre><p>SpringBoot 2.4.X 后:</p><pre class="line-numbers language-none"><code class="language-none">spring:      profiles:        active: dev        group:          "dev": devDB,devRedis,devMVC          "pro": proDB,proRedis,proMVC          "test": testDB,testRedis,testMVC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-多环境开发控制-Maven"><a href="#4-多环境开发控制-Maven" class="headerlink" title="4. 多环境开发控制(Maven)"></a>4. 多环境开发控制(Maven)</h5><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">application.yml</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;!--设置多环境--&gt;&lt;profiles&gt;  &lt;profile&gt;      &lt;id&gt;env_dev&lt;/id&gt;      &lt;properties&gt;        &lt;profile.active&gt;dev&lt;/profile.active&gt;      &lt;/properties&gt;    &lt;!--设置默认启动--&gt;      &lt;activation&gt;        &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;      &lt;/activation&gt;  &lt;/profile&gt;  &lt;profile&gt;    &lt;id&gt;env_pro&lt;/id&gt;    &lt;properties&gt;      &lt;profile.active&gt;pro&lt;/profile.active&gt;    &lt;/properties&gt;  &lt;/profile&gt;&lt;/profiles&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">spring:      profiles:        &lt;!-- 使用Maven 的环境配置的格式 "@....@" --&gt;        active: @profile.active@        group:          "dev": devDB,devRedis,devMVC          "pro": proDB,proRedis,proMVC          "test": testDB,testRedis,testMVC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ul><li>ieda 对Maven 环境的更改无法生效，需要手动编译compile</li></ul><h4 id="5-日志"><a href="#5-日志" class="headerlink" title="5. 日志"></a>5. 日志</h4><h5 id="1-日志设置"><a href="#1-日志设置" class="headerlink" title="1. 日志设置"></a>1. 日志设置</h5><ol><li>代码中使用日志工具记录日志<pre class="line-numbers language-none"><code class="language-none">@RestController@RequestMapping("/users")@CrossOriginpublic class UserController {    private static final Logger log = (Logger) LoggerFactory.getLogger(UserController.class);    @GetMapping("/{id}")    public User getById(@PathVariable Integer id){        // application.yml   debug:true        log.debug("debug...");        log.info("info...");        log.warning("warn...");        log.error();        log.fatal();        return userService.getById(id);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>设置日志级别<pre class="line-numbers language-none"><code class="language-none"># 开启debug模式，输出调试信息，常用于检查系统运行状况debug: true# 设置日志级别 root表示根节点，整体应用日志级别logging:  level:    root:      error      # 设置某包的日志级别      top.wabisabifag.controller: debug      # 设置分组，对某个祖设置日志级别      enable:warn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="2-日志工具-动态和继承"><a href="#2-日志工具-动态和继承" class="headerlink" title="2. 日志工具 (动态和继承)"></a>2. 日志工具 (动态和继承)</h5><ol><li><p>设置日志对象</p><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.controller.Logger;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import top.wabisabifag.controller.UserController;public class LoggerClass {    private Class clazz = null;    public static  Logger log;    public LoggerClass(){        clazz = this.getClass();        log = LoggerFactory.getLogger(UserController.class);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>日志工具引入控制层</p><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.controller.Logger;import lombok.extern.slf4j.Slf4j;import org.springframework.web.bind.annotation.*;@Slf4j      // 开启日志@RestController@RequestMapping("/users")@CrossOriginpublic class UserController3 extends LoggerClass {      @GetMapping("/{id}")    public String getById(@PathVariable Integer id){        log.debug("debug...");        log.info("info...");        log.warning("warn...");        log.error("error...");        log.fatal();        return "springboot is running... 2";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="3-日志输出格式"><a href="#3-日志输出格式" class="headerlink" title="3. 日志输出格式"></a>3. 日志输出格式</h5><ol><li>控制台日志输出<pre class="line-numbers language-none"><code class="language-none"># 日志配置logging:  level:    root:      error  pattern:    console: "%d %clr(5p) --- [%16t] %clr(%-40.40c){red} :%m %n"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>d 日期 </li><li>p 信息的级别 </li><li>%clr(%5p)  颜色设置</li><li>%5p  占据的长度  </li><li>[%16 t] 运行的文件</li><li>%-40 左对齐</li><li>.40c 截断后，容纳40长度</li><li>m 消息 </li><li>n 换行</li></ul><ol start="2"><li>日志记录<pre class="line-numbers language-none"><code class="language-none"># 日志配置logging:  level:    root:      error  # 控制台日志输出  pattern:    console: "%d %clr(5p) --- [%16t] %clr(%-40.40c){red} :%m %n"  # 日志文件记录  file:    name: server.log  # 日志分期记录  logback:    rollingpolicy:      max-file-size: 3KB      file-name-pattern: server.%d{yyyy-MM-dd}.%i.log      # 输出格式： server.2023-09-20.0.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="4-SpringBoot-应用开发"><a href="#4-SpringBoot-应用开发" class="headerlink" title="4.SpringBoot 应用开发"></a>4.SpringBoot 应用开发</h2><h3 id="1-热部署"><a href="#1-热部署" class="headerlink" title="1. 热部署"></a>1. 热部署</h3><h4 id="1-热部署依赖"><a href="#1-热部署依赖" class="headerlink" title="1. 热部署依赖"></a>1. 热部署依赖</h4><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;    &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>手动配置:在IEDA激活热部署: Ctrl + F9  </li><li>自动配置：生命周期compile</li></ul><h4 id="2-热部署范围"><a href="#2-热部署范围" class="headerlink" title="2. 热部署范围"></a>2. 热部署范围</h4><pre class="line-numbers language-none"><code class="language-none">spring:  datasource:    druid:      url: jdbc:mysql://localhost:3306/smbms      username: root      password: 123456      driver-class-name: com.mysql.jdbc.Driver  # 设置不参与热部署的文件与文件夹  # 默认不重启：  #   /META-INF/maven  /META-INF/resources /resources  /static /public /templates  devtools:    restart:      # 排除     exclude: static/**,public/**,config/application.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-关闭热部署"><a href="#3-关闭热部署" class="headerlink" title="3. 关闭热部署"></a>3. 关闭热部署</h4><p>热部署功能只适用于 开发环境</p><h5 id="1-设置文件层级控制"><a href="#1-设置文件层级控制" class="headerlink" title="1.设置文件层级控制"></a>1.设置文件层级控制</h5><pre class="line-numbers language-none"><code class="language-none">spring:  datasource:    druid:      url: jdbc:mysql://localhost:3306/smbms      username: root      password: 123456      driver-class-name: com.mysql.jdbc.Driver  # 设置不参与热部署的文件与文件夹  # 默认不重启：  #   /META-INF/maven  /META-INF/resources /resources  /static /public /templates  devtools:    restart:      # 排除     exclude: static/**,public/**,config/application.yml      # 开关   受到权限层级影响     enable: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-系统层级覆盖控制"><a href="#2-系统层级覆盖控制" class="headerlink" title="2. 系统层级覆盖控制"></a>2. 系统层级覆盖控制</h5><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class SSMPApplication {    public static void main(String[] args) {        // 系统层级覆盖热部署功能        System.setProperty("spring.devtools.restart.enabled","false");        SpringApplication.run(SSMPApplication.class);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-第三方Bean-属性绑定-configuration"><a href="#2-第三方Bean-属性绑定-configuration" class="headerlink" title="2. 第三方Bean 属性绑定(configuration)"></a>2. 第三方Bean 属性绑定(configuration)</h3><h4 id="1-Bean-属性绑定"><a href="#1-Bean-属性绑定" class="headerlink" title="1. Bean 属性绑定"></a>1. Bean 属性绑定</h4><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">application.yml</button></li><li class="tab"><button type="button" data-href="#pom.xml-3">ServertConfig.java</button></li><li class="tab"><button type="button" data-href="#pom.xml-4">SpringBootConfigurationApplication.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;      &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;      &lt;artifactId&gt;lombok&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;  &lt;artifactId&gt;druid&lt;/artifactId&gt;  &lt;version&gt;1.1.23&lt;/version&gt;&lt;/dependency&gt;&lt;!--springboot第三方配置绑定--&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">servers:  ipAddress: 192.168.0.1  port: 2345  timeout: -1datasource:  driverClassName: com.mysql.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-3"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.config;import lombok.Data;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;//@Component  // 受Spring接管 加载为Bean 和 @EnableConfigurationProperties 冲突@Data@ConfigurationProperties(prefix = "servers")  // 映射配置设置public class ServertConfig {    private String ipAddress;    private int port;    private long timeout;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-4"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag;import com.alibaba.druid.pool.DruidDataSource;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.context.ConfigurableApplicationContext;import org.springframework.context.annotation.Bean;import top.wabisabifag.config.ServertConfig;@SpringBootApplication/* 自动加载配置类为Bean 和 @Component  冲突 开启属性绑定 并 设定对应的类 */@EnableConfigurationProperties(ServertConfig.class) public class SpringBootConfigurationApplication {    /* 第三方配置类 Bean 已经加载 但是没有配置属性值    可配置自定义 和 第三方 的 配置属性值绑定     1.报错:  注解没有配置   加载 spring-boot-configuration-processor 依赖     2.宽松绑定:  配置文件驼峰命名时，此处不用遵从命名规范  */    @Bean    @ConfigurationProperties(prefix = "datasource")    public DruidDataSource dataSource(){        DruidDataSource dataSource = new DruidDataSource();        //dataSource.setDriverClassName("com.mysql.jdbc.Driver");        return dataSource;    }    public static void main(String[] args) {        ConfigurableApplicationContext ctx = SpringApplication.run(SpringBootConfigurationApplication.class,args);        // ../config/ServerConfig 类        ServertConfig bean = ctx.getBean(ServertConfig.class);        System.out.println(bean);        // 配置值        DruidDataSource dataSource = ctx.getBean(DruidDataSource.class);        // 获取懒加载的配置属性        System.out.println(dataSource);        // 设置的值 普通类对象        System.out.println(dataSource.getDriverClassName());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="2-宽松绑定"><a href="#2-宽松绑定" class="headerlink" title="2. 宽松绑定"></a>2. 宽松绑定</h4><ul><li>@ConfigurationProperties 适配多种命名模式</li></ul><ul><li>驼峰:             ipAddress</li><li>underLine         ip_adderess </li><li>矢量 (烤肉串)      ip-address  (主要适应应用)</li><li>常亮              IP_ADDRESS</li></ul><ul><li>@Value 数据绑定支持 驼峰<pre class="line-numbers language-none"><code class="language-none">@SpringBootTestclass application{  @Value("${servers.ipAddress}")  private String msg;  @Test   void contextLoads(){    System.out.println(msg);  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-常亮计量单位应用-jdk版本-8"><a href="#3-常亮计量单位应用-jdk版本-8" class="headerlink" title="3. 常亮计量单位应用(jdk版本:8)"></a>3. 常亮计量单位应用(jdk版本:8)</h3><div class="tabs" id="application.yml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#application.yml-1">application.yml</button></li><li class="tab"><button type="button" data-href="#application.yml-2">ServertConfig.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="application.yml-1"><pre class="line-numbers language-none"><code class="language-none">servers:  ipAddress: 192.168.0.1  port: 2345  timeout: -1  # 数据存储时间，服务器超时时间： 毫秒  serverTimeOut: 3  # 数据存储单位： Byte  dataSize: 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="application.yml-2"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.config;import lombok.Data;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.boot.convert.DataSizeUnit;import org.springframework.boot.convert.DurationUnit;import org.springframework.stereotype.Component;import org.springframework.util.unit.DataSize;import org.springframework.util.unit.DataUnit;import java.time.Duration;import java.time.temporal.ChronoUnit;//受Spring接管 加载为Bean 和 @EnableConfigurationProperties 冲突//@Component  @Data@ConfigurationProperties(prefix = "servers")  // 映射配置设置public class ServertConfig {    private String ipAddress;    private int port;    private long timeout;    @DurationUnit(ChronoUnit.HOURS) // 时间单位自定义    private Duration serverTimeOut;    @DataSizeUnit(DataUnit.GIGABYTES) // 数据存储单位自定义    private DataSize dataSize;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="4-数据校验"><a href="#4-数据校验" class="headerlink" title="4. 数据校验"></a>4. 数据校验</h3><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">ServertConfig.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;!--数据校验  JSR303规范 接口--&gt;   &lt;dependency&gt;     &lt;groupId&gt;javax.validation&lt;/groupId&gt;     &lt;artifactId&gt;validation-api&lt;/artifactId&gt;   &lt;/dependency&gt; &lt;!--校验框架 实现--&gt;   &lt;dependency&gt;     &lt;groupId&gt;org.hibernate.validator&lt;/groupId&gt;     &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;   &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.config;import lombok.Data;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.boot.convert.DataSizeUnit;import org.springframework.boot.convert.DurationUnit;import org.springframework.stereotype.Component;import org.springframework.util.unit.DataSize;import org.springframework.util.unit.DataUnit;import org.springframework.validation.annotation.Validated;import javax.validation.constraints.Max;import javax.validation.constraints.Min;import javax.validation.constraints.NotEmpty;import java.time.Duration;import java.time.temporal.ChronoUnit;@Data@ConfigurationProperties(prefix = "servers")  // 映射配置设置@Validated      //2. 对Bean属性注入校验public class ServertConfig {    private String ipAddress;    // 3. 设置规则    @Max(value = 8888,message = "端口号不能超过 8888")    @Min(value = 888,message = "端口号不能超过 888")    //@NotEmpty    private int port;    private long timeout;    @DurationUnit(ChronoUnit.HOURS)// 时间单位自定义    private Duration serverTimeOut;    @DataSizeUnit(DataUnit.GIGABYTES)// 数据存储单位自定义    private DataSize dataSize;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="5-进制数据转换"><a href="#5-进制数据转换" class="headerlink" title="5. 进制数据转换"></a>5. 进制数据转换</h3><ul><li>报错: 密码错误</li></ul><div class="tabs" id="application.yml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#application.yml-1">application.yml</button></li><li class="tab"><button type="button" data-href="#application.yml-2">application.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="application.yml-1"><pre class="line-numbers language-none"><code class="language-none">datasource:  driverClassName: com.mysql.jdbc.Driver  password: 0127<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="application.yml-2"><pre class="line-numbers language-none"><code class="language-none">@SpringBootTestclass application{  @Value("${datasource.password}")  private String password;  @Test   void contextLoads(){    System.out.println(password);  // 输出值: 87  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ul><li>原因:</li></ul><ul><li><ol><li>String 类型接收的 password</li></ol></li><li><ol start="2"><li>datasource.password: 0127 。 为0 开头的8进制 且只有数字，没有用”” 束缚。 编译为十进制为:87</li></ol></li></ul><h3 id="6-测试"><a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试</h3><h4 id="1-加载测试专用属性"><a href="#1-加载测试专用属性" class="headerlink" title="1. 加载测试专用属性"></a>1. 加载测试专用属性</h4><div class="tabs" id="application.yml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#application.yml-1">application.yml</button></li><li class="tab"><button type="button" data-href="#application.yml-2">PropertiesAndArgsTest.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="application.yml-1"><pre class="line-numbers language-none"><code class="language-none">test:  prop: testValue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="application.yml-2"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag;import org.junit.Test;import org.springframework.beans.factory.annotation.Value;import org.springframework.boot.test.context.SpringBootTest;//@SpringBootTest(properties = {"test.prop=testValue1"}) // 添加临时的数组属性@SpringBootTest(properties = {"test.prop=testValue1"},args = {"--test.prop=testValue2"})public class PropertiesAndArgsTest {    @Value("${test.prop}")    private String msg;    @Test    public void testProperties(){        /* 2.7.x 层级权限 properties &gt; args           2.5.x 层级权限 properties &lt; args        */        System.out.println(msg);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h5 id="1-局部配置导入"><a href="#1-局部配置导入" class="headerlink" title="1. 局部配置导入"></a>1. 局部配置导入</h5><div class="tabs" id="msgconfig.java"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#msgconfig.java-1">MsgConfig.java</button></li><li class="tab"><button type="button" data-href="#msgconfig.java-2">ConfigurationTest.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="msgconfig.java-1"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configurationpublic class MsgConfig {    @Bean    public String msg(){        return "bean msg";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="msgconfig.java-2"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag;import org.junit.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.context.annotation.Import;import top.wabisabifag.config.MsgConfig;@SpringBootTest@Import({MsgConfig.class})   // 加载当前测试类专用的配置public class ConfigurationTest {    @Autowired    private String msg;    @Test    public void testConfiguration(){        System.out.println(msg);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ul><li>加载测试临时属性应用于小范围测试环境</li></ul><h4 id="2-Web-环境模拟测试"><a href="#2-Web-环境模拟测试" class="headerlink" title="2. Web 环境模拟测试"></a>2. Web 环境模拟测试</h4><div class="tabs" id="bookcontroller.java"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bookcontroller.java-1">BookController.java</button></li><li class="tab"><button type="button" data-href="#bookcontroller.java-2">WebTest.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bookcontroller.java-1"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.controller;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.RestController;@RestController@RequestMapping("/books")public class BookController {    @GetMapping    public String getById(){        System.out.println("getById is running ...");        return "springboot";    }        /*json 数据的响应体*/    @GetMapping    @ResponseBody    public String finall(){        return "{\"name\" : Web测试成功}";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bookcontroller.java-2"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag;import org.junit.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.mock.web.MockServletContext;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.ResultMatcher;import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.result.ContentResultMatchers;import org.springframework.test.web.servlet.result.HeaderResultMatchers;import org.springframework.test.web.servlet.result.MockMvcResultMatchers;import org.springframework.test.web.servlet.result.StatusResultMatchers;// 模拟端口启动Web 环境===&gt; 随机端口@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,classes = {MockServletContext.class })// 虚拟调用MVC 注解@AutoConfigureMockMvcpublic class WebTest {    // 引入MockMvc类型对象    @Autowired    private MockMvc mvc;    // 调用 MockMvc 执行Controller 层功能    @Test    public void testWeb() throws Exception {        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/books");        // 执行对应请求        ResultActions actions = mvc.perform(builder);    }    @Test    public void testStatus() throws Exception {        /*http://localhost:8080/books 创建虚拟请求，当前访问  /books */        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/books");        /*这里需要抛出异常    获取返回值*/        ResultActions actions = mvc.perform(builder);        /*1 .status()响应状态 匹配*/        // 定义本次调用的预期值        StatusResultMatchers status = MockMvcResultMatchers.status();        // 预计本次调用时成功的状态: 200        ResultMatcher ok = status.isOk();        // 添加预期值到本次调用过程中进行匹配        actions.andExpect(ok);        /*2 .content()响应体 匹配*/        ContentResultMatchers content = MockMvcResultMatchers.content();            /* 1. content.string*/        ResultMatcher stringData = content.string("Web测试成功");        actions.andExpect(stringData);            /* 2. content.json*/        ResultMatcher jsonData = content.json("{\"name\":Web测试成功}");// controller return 的结果        actions.andExpect(jsonData);        /*3 .header()响应头 匹配*/        HeaderResultMatchers header = MockMvcResultMatchers.header();        ResultMatcher contentType = header.string("Content-Type", "text/plain;charset=UTF-8");        actions.andExpect(contentType);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="3-业务层数据测试事物回滚"><a href="#3-业务层数据测试事物回滚" class="headerlink" title="3. 业务层数据测试事物回滚"></a>3. 业务层数据测试事物回滚</h4><div class="tabs" id="application.yaml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#application.yaml-1">application.yaml</button></li><li class="tab"><button type="button" data-href="#application.yaml-2">Book.java</button></li><li class="tab"><button type="button" data-href="#application.yaml-3">BookDao.java</button></li><li class="tab"><button type="button" data-href="#application.yaml-4">BookService.java</button></li><li class="tab"><button type="button" data-href="#application.yaml-5">BookServiceImpl.java</button></li><li class="tab"><button type="button" data-href="#application.yaml-6">BookDaoTest.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="application.yaml-1"><pre class="line-numbers language-none"><code class="language-none">#在application.properties/或者application.yml文件中没有添加数据库配置信息.#      url: jdbc:mysql://localhost:3306/smbms?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=falsespring:  datasource:    druid:      url: jdbc:mysql://localhost:3306/smbms      username: root      password: 123456      driver-class-name: com.mysql.jdbc.Driver#配置MP相关数据库名称mybatis-plus:  configuration:    # 日志    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  global-config:    db-config:      table-prefix: smbms_      id-type: auto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="application.yaml-2"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.domain;import lombok.AllArgsConstructor;import lombok.Data;@Data@AllArgsConstructorpublic class Book {    private int id;    private String name;    private String type;    private String description;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="application.yaml-3"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.dao;import com.baomidou.mybatisplus.core.mapper.BaseMapper;import org.apache.ibatis.annotations.Mapper;import top.wabisabifag.domain.Book;@Mapperpublic interface BookDao extends BaseMapper&lt;Book&gt; {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="application.yaml-4"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service;import top.wabisabifag.domain.Book;public interface BookService {    public boolean save(Book book);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="application.yaml-5"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import top.wabisabifag.dao.BookDao;import top.wabisabifag.domain.Book;@Servicepublic class BookServiceImpl {    @Autowired    private BookDao bookDao;    public boolean save(Book book){        return bookDao.insert(book) &gt; 0;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="application.yaml-6"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag;import org.junit.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.annotation.Rollback;import org.springframework.transaction.annotation.Transactional;import top.wabisabifag.domain.Book;import top.wabisabifag.service.BookService;@SpringBootTest@Transactional    // 事务注解: 停止事务提交，自动回滚   [内涵 @Rollback(true)]//@Rollback(false)   测试时，提交事物更改值public class BookDaoTest {    @Autowired    private BookService bookService;    @Test    public void testSave(){        Book book = new Book(1,"name","type","description");        bookService.save(book);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ul><li>不做数据留痕，不做垃圾数据，脏数据保存</li></ul><h4 id="4-测试用例数据设定"><a href="#4-测试用例数据设定" class="headerlink" title="4. 测试用例数据设定"></a>4. 测试用例数据设定</h4><h5 id="1-测试用例设定随机数据"><a href="#1-测试用例设定随机数据" class="headerlink" title="1.  测试用例设定随机数据"></a>1.  测试用例设定随机数据</h5><div class="tabs" id="application.yml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#application.yml-1">application.yml</button></li><li class="tab"><button type="button" data-href="#application.yml-2">BookCase.java</button></li><li class="tab"><button type="button" data-href="#application.yml-3">BookDaoTest.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="application.yml-1"><pre class="line-numbers language-none"><code class="language-none">#在application.properties/或者application.yml文件中没有添加数据库配置信息.#      url: jdbc:mysql://localhost:3306/smbms?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=falsespring:  datasource:    druid:      url: jdbc:mysql://localhost:3306/smbms      username: root      password: 123456      driver-class-name: com.mysql.jdbc.Driver#配置MP相关数据库名称mybatis-plus:  configuration:    # 日志    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  global-config:    db-config:      table-prefix: smbms_      id-type: auto# 测试用例设定随机数据testcase:  book:    id: ${random.int(0,10)} # 自定义随机范围    name: Wabisabifag${random.value}   # 数据可拼接    uuid: ${random.uuid}    publishTome: ${random.long}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="application.yml-2"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.domain;import lombok.Data;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;@Component@Data@ConfigurationProperties(prefix = "testcase.book")public class BookCase {    private int id;    private String name;    private String uuid;    private long publishTime;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="application.yml-3"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag;import org.junit.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import top.wabisabifag.domain.BookCase;@SpringBootTestpublic class BookDaoTest {    @Autowired    private BookCase bookCase;    public void testBookCase(){        System.out.println(bookCase);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="7-数据层解决方案"><a href="#7-数据层解决方案" class="headerlink" title="7. 数据层解决方案"></a>7. 数据层解决方案</h3><h4 id="1-SQL"><a href="#1-SQL" class="headerlink" title="1. SQL"></a>1. SQL</h4><p>数据层解决方案:</p><p>数据源       持久化         数据库</p><p>Druid       MyBatis-Plus    MySql</p><p>Hikari      MyBatis           H2</p><pre><code>        JDBCTemplate</code></pre><h5 id="1-数据源配置-DruidDataSource"><a href="#1-数据源配置-DruidDataSource" class="headerlink" title="1. 数据源配置(DruidDataSource)"></a>1. 数据源配置(DruidDataSource)</h5><ul><li>SpringBoot提供的3种内嵌的数据源对象</li></ul><ul><li>HiKariCP</li><li>Tomcat 提供 DataSource</li><li>Commons DBCP<pre class="line-numbers language-none"><code class="language-none">spring:  datasource:    url: jdbc:mysql://localhost:3306/smbms      # 进一步配置  hikari、 tomcat 、dbcp2  数据实现      hikari:        username: root        password: 123456        driver-class-name: com.mysql.jdbc.Driver        maximum-pool-size: 50  # 最大连接池数量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="2-数据持久化-jdbcTemplate"><a href="#2-数据持久化-jdbcTemplate" class="headerlink" title="2. 数据持久化(jdbcTemplate)"></a>2. 数据持久化(jdbcTemplate)</h5><h6 id="1-JDBCTemplate-配置"><a href="#1-JDBCTemplate-配置" class="headerlink" title="1. JDBCTemplate 配置"></a>1. JDBCTemplate 配置</h6><pre class="line-numbers language-none"><code class="language-none">spring:  jdbc:    template:      query-timeout: -1   # 查询超时时间      max-rows: 500       # 最大行数      fetch-size: -1      # 批处理数量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-数据库-MySQL"><a href="#3-数据库-MySQL" class="headerlink" title="3. 数据库(MySQL)"></a>3. 数据库(MySQL)</h5><ul><li>SpringBoot提供的3种内嵌的数据库</li><li>内存级别数据库: 基于Java开发，可以在内存中启动运行，方便测试</li></ul><ul><li>H2</li><li>HSQL</li><li>Derby</li></ul><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">application.yml</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;!--H2 数据库依赖--&gt;    &lt;dependency&gt;      &lt;groupId&gt;com.h2database&lt;/groupId&gt;      &lt;artifactId&gt;h2&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-starte-data-jpa&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-starte-web-jpa&lt;/artifactId&gt;    &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">#在application.properties/或者application.yml文件中没有添加数据库配置信息.spring:  # h2 数据库配置  h2:    console:      path: /h2      # 仅用于开发阶段 安全风险巨大      enabled: true  # H2 数据库初始化时需要配置数据源  # 格式同页面提供的数据源样式  datasource:    druid:      url: jdbc:h2:~/test      username: root      password: 123456      # 可以省略, 设置后必须保证可访问      driver-class-name: org.h2.Driver# 配置服务器端口server:  port:    80  servlet:    context-path: /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h6 id="1-访问H2-数据库服务页面"><a href="#1-访问H2-数据库服务页面" class="headerlink" title="1. 访问H2 数据库服务页面"></a>1. 访问H2 数据库服务页面</h6><ul><li>localhost://h2</li></ul><h4 id="2-NoSQL"><a href="#2-NoSQL" class="headerlink" title="2. NoSQL"></a>2. NoSQL</h4><ul><li>主要常见的NoSQL 解决方案 (常在Linux 系统中部署安装)</li></ul><h5 id="1-Redis"><a href="#1-Redis" class="headerlink" title="1. Redis"></a>1. Redis</h5><ul><li><a href="https://github.com/tporadowski/redis/releases">Redis</a> 是一款 Key-Value 存储结构的内存级 NoSQL 数据库<ul><li>支持多种数据存储格式</li><li>支持持久化</li><li>支持集群</li></ul></li></ul><h6 id="1-Redis基础操作"><a href="#1-Redis基础操作" class="headerlink" title="1. Redis基础操作"></a>1. Redis基础操作</h6><ul><li><p>启动安装</p>  <pre class="line-numbers language-none"><code class="language-none"># 服务端启动命令   声明参数redis-sercer.exe   redis.windows.conf(如果服务端无法启动，先执行客服端启动命令。这里shutdown就是为了关闭这个版本的redis默认创建的服务，服务可以在任务管理中找到)# 客服端启动命令redis-cli.exeshutdown    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Redis 存储获取 值</p>  <pre class="line-numbers language-none"><code class="language-none"># 存储  key      value  set   name     wabisabifag# 获取  get   name# 查询所有数值  keys  *# 清屏  clear# 设置多个嵌套值hset keya a1 aa1hset keya a2 aa2hget keya a1         # "aa1"hget keya a2         # "aa2"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="2-Redis整合"><a href="#2-Redis整合" class="headerlink" title="2. Redis整合"></a>2. Redis整合</h6><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">application.yml</button></li><li class="tab"><button type="button" data-href="#pom.xml-3">Application.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;dependencies&gt;        &lt;!--Nosql整合数据库--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;        &lt;/dependency&gt;&lt;/dependencies&gt;    &lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;    &lt;/build&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">spring:  redis:    host: localhost    port: 6379<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-3"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.core.StringRedisTemplate;import org.springframework.data.redis.core.ValueOperations;@SpringBootTestpublic class Application {    @Autowired    // 以对象 操作的基本单元    // 客服端 : RedisTemplate 以对象作为Key 和 Value，内部对数据进行序列化 操作    private RedisTemplate redisTemplate;    private StringRedisTemplate stringRedisTemplate; // 以字符串 操作的基本单元    @Test    public void setRedisTemplate(){        ValueOperations ops = redisTemplate.opsForValue();        ops.set("age",42);    }    @Test    public void getRedisTemplate(){        ValueOperations ops = redisTemplate.opsForValue();        Object age = ops.get("age");        System.out.println(age);     //  空值    }    @Test    public void getStringRedisTemplate(){        ValueOperations&lt;String,String&gt; ops = stringRedisTemplate.opsForValue();        String age = ops.get("age");        System.out.println(age);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ul><li>客服端 : RedisTemplate 以对象作为Key 和 Value，内部对数据进行序列化 操作</li></ul><h6 id="3-jedis-客户端实现技术切换"><a href="#3-jedis-客户端实现技术切换" class="headerlink" title="3. jedis 客户端实现技术切换"></a>3. jedis 客户端实现技术切换</h6><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">application.yml</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;!--jedis--&gt;       &lt;dependency&gt;           &lt;groupId&gt;redis.clients&lt;/groupId&gt;           &lt;artifactId&gt;jedis&lt;/artifactId&gt;       &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">spring:  redis:    host: localhost    port: 6379    client-type: jedis        lettuce:      pool:        max-active: 16            jedis:      pool:        max-active: 16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ul><li><p>lettcus 与 jedis 区别</p><ul><li><p>jedis 连接 Redis 服务器是直连模式，当线程模式下使用 jedis 会存在线程安全问题，解决方案通过配置连接池使每个连接专用，这样整体性能就大受影响。</p></li><li><p>lettcus 基于 Netty 框架进行与 Redis 服务器连接，底层设计采用 StatefulRedisConnection。StatefulRedisConnection 自身是线程安全的，可以保障并发访问安全问题，所以一个连接可以被多线程复用。当然 lettcus 也支持多连接实例一起工作。</p></li></ul></li></ul><h5 id="2-Mongo"><a href="#2-Mongo" class="headerlink" title="2. Mongo"></a>2. Mongo</h5><h6 id="1-MongoDB-特性"><a href="#1-MongoDB-特性" class="headerlink" title="1. MongoDB 特性"></a>1. MongoDB 特性</h6><ul><li>MongoDB 开源，高性能，无模式的文档型数据库</li></ul><h6 id="2-Mysql-Redis-弊端"><a href="#2-Mysql-Redis-弊端" class="headerlink" title="2. Mysql Redis 弊端"></a>2. Mysql Redis 弊端</h6><ul><li><p>Mysql</p><ul><li>有 结构化数据, 较低的响应需求</li></ul></li><li><p>Redis</p><ul><li>无 结构化数据, 较高的响应需求</li></ul></li></ul><h6 id="3-数据分析"><a href="#3-数据分析" class="headerlink" title="3. 数据分析"></a>3. 数据分析</h6><ul><li>用户数据: 永久性存储，修改频度极低</li><li>游戏数据: 永久性存储和临时性存储结合，修改频度较高</li><li>直播数据: 永久性存储和临时性存储结合，修改频度极高</li><li>物联网数据: 临时性存储, 修改频率飞速</li></ul><h6 id="4-Mongo-运行"><a href="#4-Mongo-运行" class="headerlink" title="4. Mongo 运行"></a>4. Mongo 运行</h6><pre class="line-numbers language-none"><code class="language-none"># 手动创建 ..\data\db 文件夹mongod --dbpath=..\data\db# 运行客服端   自定义参数mongo --host=127.0.0.1 --port=27017<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../JavaEE/2.png" alt="MongoDB基础"></p><h6 id="5-Mongo-整合"><a href="#5-Mongo-整合" class="headerlink" title="5. Mongo 整合"></a>5. Mongo 整合</h6><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">application.yml</button></li><li class="tab"><button type="button" data-href="#pom.xml-3">Application.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;!--MongoDB 整合--&gt;       &lt;dependency&gt;           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;           &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;           &lt;version&gt;3.1.2&lt;/version&gt;       &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">spring:  datasource:    mongodb:      uri: mongodb://localhost/wabisabifag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-3"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.mongodb.core.MongoTemplate;import java.awt.print.Book;@SpringBootTestpublic class Application {    @Autowired    private MongoTemplate mongoTemplate;    @Test    public void setMongoTemplate(){        Book book = new Book(1,"spring","spring","spring");        mongoTemplate.save(book);    }            @Test     public void find(){        List&lt;Book&gt; all = mongoTemplate.findAll(Book.class);        System.out.println(all);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h5 id="3-ES"><a href="#3-ES" class="headerlink" title="3. ES"></a>3. ES</h5><ul><li><p><a href="https://www.elastic.co/cn/downloads/elasticsearch">Elasticsearch</a> 是一个分布式全文搜索引擎</p></li><li><p>端口号: 9200</p></li></ul><h6 id="1-索引操作"><a href="#1-索引操作" class="headerlink" title="1. 索引操作"></a>1. 索引操作</h6><ul><li>幂等性，指的是相同参数下，一次请求和多次请求的结果是相等的<ul><li>get,put,delete请求都是幂等的</li></ul></li></ul><ol><li><a href="https://github.com/medcl/elasticsearch-analysis-ik">IK分词器 (Elasticsearch 放入插件文件夹)</a></li></ol><h6 id="2-文档操作"><a href="#2-文档操作" class="headerlink" title="2. 文档操作"></a>2. 文档操作</h6><p>以下内容在 <a href="https://www.postman.com/downloads/">postman</a> 中执行</p><ol><li>数据生成</li></ol><ul><li>post 生成指定id     <a href="http://localhost:9200/bools/_create">http://localhost:9200/bools/_create</a></li><li>post 生成随机id     <a href="http://localhost:9200/bools/_doc">http://localhost:9200/bools/_doc</a></li><li>post 生成指定id     <a href="http://localhost:9200/bools/_doc/1">http://localhost:9200/bools/_doc/1</a><ul><li>body   {“id”:1,”name”:”spring”,”type”:”spring”,”description”:”spring”}</li></ul></li></ul><ol start="2"><li>数据 id 查询</li></ol><ul><li>get 查询指定id      <a href="http://localhost:9200/bools/_doc/1">http://localhost:9200/bools/_doc/1</a></li><li>get 查询所有id      <a href="http://localhost:9200/bools/_search">http://localhost:9200/bools/_search</a></li></ul><ol start="3"><li>数据 条件 查询</li></ol><ul><li>get 查询指定条件     <a href="http://localhost:9200/bools/_search?q=name:spring">http://localhost:9200/bools/_search?q=name:spring</a></li></ul><ol start="4"><li>数据 id 删除</li></ol><ul><li>delete 删除指定id    <a href="http://localhost:9200/bools/_doc/1">http://localhost:9200/bools/_doc/1</a></li></ul><ol start="5"><li>数据 id 修改</li></ol><ul><li>put 修改指定id 全部数据       <a href="http://localhost:9200/bools/_doc/1">http://localhost:9200/bools/_doc/1</a></li><li>post 修改指定id 指定数据      <a href="http://localhost:9200/bools/_update/1">http://localhost:9200/bools/_update/1</a><ul><li>body   {“doc”:{“name”:”springboot”} }</li></ul></li></ul><h6 id="3-Elasticsearch-整合"><a href="#3-Elasticsearch-整合" class="headerlink" title="3. Elasticsearch 整合"></a>3. Elasticsearch 整合</h6><ol><li>Low level</li></ol><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">application.yml</button></li><li class="tab"><button type="button" data-href="#pom.xml-3">Application.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;!--elasticsearch 整合--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;        &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">spring:  datasource:    druid:      url: jdbc:mysql://localhost:3306/smbms      username: root      password: 123456      driver-class-name: com.mysql.jdbc.Driver  elasticsearch:    rest:      uris: http://localhost:9200mybatis-plus:  configuration:    # 日志    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  global-config:    db-config:      table-prefix: smbms_      id-type: auto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-3"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate;import java.awt.print.Book;import java.util.List;@SpringBootTestpublic class Application {    @Autowired    private ElasticsearchRestTemplate template;    @Test    public void fn(){        template.get(new Book(1,"a","a","a"));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ol start="2"><li>Hight level (方法过时，已经有新的整合内容 ===》》 application.yml 配置参数)</li></ol><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">Application.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;!--elasticsearch 整合--&gt;    &lt;dependency&gt;          &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;          &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;    &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag;import org.apache.http.HttpHost;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.client.RestClient;import org.elasticsearch.client.RestClientBuilder;import org.elasticsearch.client.RestHighLevelClient;import org.elasticsearch.client.indices.CreateIndexRequest;import org.junit.jupiter.api.AfterEach;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate;import java.awt.print.Book;import java.io.IOException;import java.util.List;@SpringBootTestpublic class Application {    @Autowired    private RestHighLevelClient client;    @BeforeEach    void setUp(){        this.client = new RestHighLevelClient(RestClient.builder(HttpHost.create("http://localhost:9200")));    }        @AfterEach    void tearDown() throws IOException{        this.client.close();    }    @Test    public void testCreateClient(){        &lt;!-- // 创建客服端        HttpHost host = HttpHost.create("http://localhost:9200");        RestClientBuilder builder = RestClient.builder(host);        client = new RestHighLevelClient(builder);        // 发送请求 名叫books的索引        CreateIndexRequest request = new CreateIndexRequest("books");        client.indices().create(request, RequestOptions.DEFAULT);        client.close(); --&gt;                CreateIndexRequest request = new CreateIndexRequest("books");        client.indices().create(request, RequestOptions.DEFAULT);            }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h6 id="4-分词器-和-创建索引属性"><a href="#4-分词器-和-创建索引属性" class="headerlink" title="4. 分词器 和 创建索引属性"></a>4. 分词器 和 创建索引属性</h6><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">Application.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;!--String 转换为 json--&gt;       &lt;dependency&gt;           &lt;groupId&gt;com.alibaba&lt;/groupId&gt;           &lt;artifactId&gt;fastjson&lt;/artifactId&gt;           &lt;version&gt;1.2.78&lt;/version&gt;       &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">@SpringBootTestpublic class Application {    /* 创建索引*/    @Test    public void testCreateIndex() throws IOException{        CreateIndexRequest request = new CreateIndexRequest("books");              client.indices().create(request,RequestOptions.DEFAULT);    }    /* 创建索引 By IK*/    @Test    public void testCreateIndexByIK() throws IOException{        CreateIndexRequest request = new CreateIndexRequest("books");        String json = "";        // 设置请求中的参数        request.source(json, XContentType.JSON);        client.indices().create(request,RequestOptions.DEFAULT);    }    /* 添加文档 */    @Test    public void testCreateDoc() throws IOException{        /* 1.查询单个id */        Book book = bookDao.selectByID(1);        IndexRequest request = new IndexRequest("books").id(book.getId().toString());        /* fastjson 依赖: 对象转化为 json*/        String json = JSON.toJSONString(book);        request.source(json,XContentType.JSON);        client.index(request,RequestOptions.DEFAULT);        /* 2. 查询所有id*/        List&lt;Book&gt; bookList = bookDao.selectList(null);        /* 批处理请求 */        BulkRequest request = new BulkRequest();        for (Book book : bookList) {            IndexRequest request = new IndexRequest("books").id(book.getId().toString());            String json = JSON.toJSONString(book);            request.source(json,XContentType.JSON);            request.add(request);        }        client.bulk(request,RequestOptions.DEFAULT);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="8-整合第三方技术"><a href="#8-整合第三方技术" class="headerlink" title="8. 整合第三方技术"></a>8. 整合第三方技术</h3><h4 id="1-缓存-部分过时，以最新为主，自行理解"><a href="#1-缓存-部分过时，以最新为主，自行理解" class="headerlink" title="1. 缓存 (部分过时，以最新为主，自行理解)"></a>1. 缓存 (部分过时，以最新为主，自行理解)</h4><ul><li>一种介质于数据永久存储介质可数据应用之间的数据临时存储介质</li><li>缓存可减少低速数据速过程的次数，提高系统性能。如：磁盘IO，</li><li>提高永久性存储介质的数据读取效率，提供临时数据存储空间</li><li>SpringBoot 提供其他缓存技术整合，统一接口，方便缓存技术开发管理<ul><li>Generic</li><li>JCache</li></ul><ul><li>Ehcache</li></ul><ul><li>Hazelcast</li><li>infinispan</li><li>Couchbase</li></ul><ul><li>Redis</li></ul><ul><li>Caffenine</li><li>Simple  (内存级 默认)</li></ul><ul><li>memcached</li></ul><ul><li>jetcache  (阿里)</li><li>j2cache</li></ul></li></ul><h5 id="1-模拟缓存"><a href="#1-模拟缓存" class="headerlink" title="1. 模拟缓存"></a>1. 模拟缓存</h5><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import top.wabisabifag.dao.BookDao;import top.wabisabifag.domain.Book;import java.util.HashMap;@Servicepublic class BookServiceImpl {    @Autowired    private BookDao bookDao;    /* 对应缓存 */    private HashMap&lt;Integer,Book&gt; cache = new HashMap&lt;Integer, Book&gt;();        public Book getById(Integer id){        /* 缓存中没有本次查询数据，访问数据库*/        Book book = cache.get(id);        if(book == null){            Book queryBook = bookDao.selectById(id);            cache.put(id,queryBook);            return queryBook;        }        return cache.get(id);    }    public boolean save(Book book){        return bookDao.insert(book) &gt; 0;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-模拟验证"><a href="#2-模拟验证" class="headerlink" title="2. 模拟验证"></a>2. 模拟验证</h5><div class="tabs" id="msgserviceimpl.java"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#msgserviceimpl.java-1">MsgServiceImpl.java</button></li><li class="tab"><button type="button" data-href="#msgserviceimpl.java-2">MsgControll.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="msgserviceimpl.java-1"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl;import top.wabisabifag.service.MsgService;import java.util.HashMap;public class MsgServiceImpl implements MsgService {    private HashMap&lt;String,String&gt; cache = new HashMap&lt;String,String&gt;();    @Override    public String get(String tele) {        /* 获取后6位数据*/        String code = tele.substring(tele.length() - 6);        cache.put(tele,code);        return code;    }    @Override    public boolean check(String tele, String code) {        String queryCode = cache.get(tele);        return code.equals(queryCode);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="msgserviceimpl.java-2"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.config;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import top.wabisabifag.service.MsgService;@RestController@RequestMapping("/msg")public class MsgControll {    @Autowired    private MsgService msgService;    @GetMapping("{tele}")    public String get(@PathVariable String tele){        return  msgService.get(tele);    }    @GetMapping    public boolean check(String tele,String code){        return msgService.check(tele, code);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h5 id="3-SpringBoot-缓存"><a href="#3-SpringBoot-缓存" class="headerlink" title="3. SpringBoot 缓存"></a>3. SpringBoot 缓存</h5><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">application.java</button></li><li class="tab"><button type="button" data-href="#pom.xml-3">BookServiceImpl.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none"> &lt;!--SpringBoot 缓存--&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;      &lt;version&gt;1.2.78&lt;/version&gt;    &lt;/dependency&gt;&lt;!--Nosql整合数据库--&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;    &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cache.annotation.EnableCaching;import org.springframework.context.annotation.ComponentScan;@SpringBootApplication@MapperScan("top.wabisabifag.dao") /*使用@MapperScan可以指定要扫描的Mapper类的包的路径*/@ComponentScan(basePackages={"top.wabisabifag"})@EnableCaching       /* 开启缓存*/public class application {    public static void main(String[] args) {        // 线程安全问题        SpringApplication.run(application.class,args);        // 不接受外部临时参数        SpringApplication.run(application.class);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-3"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cache.annotation.Cacheable;import org.springframework.stereotype.Service;import top.wabisabifag.dao.BookDao;import top.wabisabifag.domain.Book;import java.util.HashMap;@Servicepublic class BookServiceImpl {      @Autowired    private BookDao bookDao;    @Override    @Cacheable(value = "cacheSpace",key = "#id")    public Book getById(Integer id){        return bookDao.selectById(id);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h5 id="4-模拟短信验证-Simple"><a href="#4-模拟短信验证-Simple" class="headerlink" title="4. 模拟短信验证(Simple)"></a>4. 模拟短信验证(Simple)</h5><div class="tabs" id="smscode.java"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#smscode.java-1">SMSCode.java</button></li><li class="tab"><button type="button" data-href="#smscode.java-2">SMSCodeService.java</button></li><li class="tab"><button type="button" data-href="#smscode.java-3">SMSCodeServiceImpl.java</button></li><li class="tab"><button type="button" data-href="#smscode.java-4">SMSCodeController.java</button></li><li class="tab"><button type="button" data-href="#smscode.java-5">CodeUtils.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="smscode.java-1"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.domain;import lombok.Data;@Datapublic class SMSCode {    private String tele;    private String Code;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="smscode.java-2"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service;import top.wabisabifag.domain.SMSCode;public interface SMSCodeService {    public String sendCodeToSMS(String tele);    public boolean checkCode(SMSCode smsCode);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="smscode.java-3"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cache.annotation.CachePut;import org.springframework.cache.annotation.Cacheable;import org.springframework.stereotype.Service;import top.wabisabifag.domain.SMSCode;import top.wabisabifag.service.SMSCodeService;import top.wabisabifag.utils.CodeUtils;@Servicepublic class SMSCodeServiceImpl implements SMSCodeService {    @Autowired    private CodeUtils codeUtils;    @Override    /*@Cacheable(value = "smsCode",key = "#tele") // 可以存放和读取，不适用于验证码重新获取*/    @CachePut(value = "smsCode",key = "#tele")    public String sendCodeToSMS(String tele) {        String code = codeUtils.generator(tele);        return code;    }    @Override    public boolean checkCode(SMSCode smsCode) {        String code = smsCode.getCode();        String cacheCode = codeUtils.get(smsCode.getTele());        return code.equals(cacheCode);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="smscode.java-4"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.config;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import top.wabisabifag.domain.SMSCode;import top.wabisabifag.service.SMSCodeService;@RestController@RequestMapping("/sms")public class SMSCodeController {    @Autowired    private SMSCodeService service;    @GetMapping    public String getCode(String tele){        String code = service.sendCodeToSMS(tele);        return code;    }    @PostMapping    public boolean checkCode(SMSCode smsCode){        return service.checkCode(smsCode);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="smscode.java-5"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.utils;import org.springframework.cache.annotation.Cacheable;import org.springframework.stereotype.Component;@Component  /* 设置为bean，对方注解调用*/public class CodeUtils {    private String[] patch={"00000","0000","000","00","0",""};    public String generator(String tele){        /* 加密码 */        int encryption = 20230929;        int hash = tele.hashCode();        long nowTime = System.currentTimeMillis();        long result = hash ^ encryption;        result = result ^ nowTime;        /*         *  问题         *  1. 负数问题         *  2. 前置位为 0 。如: 001233，输出: 1233问题         */        long code = result % 1000000;        /* 防止负数*/        code = code&lt;0 ? -code:code;        /* 补零 */        String codeString = code + "";        int len = codeString.length();        return patch[len-1]+codeString;    }    /* 该方法不放置于 ServiceImpl，就算有注解也被认为普通方法    *   bean方法不能自我调用    */    @Cacheable(value = "smsCode",key = "#tele")    public String get(String tele){        return null;    }   /* *//* 功能验证*//*    public static void main(String[] args) {        System.out.println(new CodeUtils().generator("18866668888") );;    }*/}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h5 id="5-Ehcache-Redis-memcached-缓存统一接口配置"><a href="#5-Ehcache-Redis-memcached-缓存统一接口配置" class="headerlink" title="5. Ehcache Redis memcached 缓存统一接口配置"></a>5. Ehcache Redis memcached 缓存统一接口配置</h5><h6 id="1-Ehcache-Redis"><a href="#1-Ehcache-Redis" class="headerlink" title="1. Ehcache Redis"></a>1. Ehcache Redis</h6><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">application.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-3">ehcache.xml</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;!--Ehcache 缓存--&gt;   &lt;dependency&gt;     &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt;     &lt;artifactId&gt;ehcache&lt;/artifactId&gt;   &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">// 统一接口spring:  # 配置缓存类型  cache:    # ehcache (文档配置)    #type: ehcache    #ehcache: ehcache.xml    # redis  (yml配置)    type: redis    redis:      host: localhost      port: 6379      use-key-prefix: true  # 是否使用前缀      cache-null-values: false  # 是否缓存空值      key-prefix: sms_    # 指定前缀      time-to-live: # 活动时间  datasource:    druid:      url: jdbc:mysql://localhost:3306/smbms      username: root      password: 123456      driver-class-name: com.mysql.jdbc.Driver  elasticsearch:    rest:      uris: http://localhost:9200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-3"><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xsi:noNamespaceSchemaLocation="http://ehcache.org/ehcache.xsd"        updateCheck="false" name="defaultCache"&gt;    &lt;!--       diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置,可以自定义目录，确保用户有权限即可。参数解释如下：       user.home – 用户主目录       user.dir  – 用户当前工作目录       java.io.tmpdir – 默认临时文件路径     --&gt;    &lt;!--    &lt;diskStore path="java.io.tmpdir"/&gt; --&gt;    &lt;diskStore path="C:/Users/admin/ehcache/"/&gt;    &lt;!-- maxElementsInMemory：内存中最大缓存对象数，根据服务器资源配置 --&gt;    &lt;!-- eternal： 默认为false,设置true表示对象永不过期，此时会忽略timeToIdleSeconds和timeToLiveSeconds属性， --&gt;    &lt;!-- maxElementsOnDisk：硬盘中最大缓存对象数，若是0表示无穷大 --&gt;    &lt;!-- overflowToDisk：true表示当内存缓存的对象数目达到了maxElementsInMemory界限后，会把溢出的对象写到硬盘缓存中。    注意：如果缓存的对象要写入到硬盘中的话，则该对象必须实现了Serializable接口才行。--&gt;    &lt;!-- diskSpoolBufferSizeMB：磁盘缓存区大小，默认为30MB。每个Cache都应该有自己的一个缓存区。--&gt;    &lt;!-- diskPersistent：是否缓存虚拟机重启期数据  --&gt;    &lt;!-- diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认为120秒 --&gt;    &lt;!-- timeToIdleSeconds： 设定允许对象处于空闲状态的最长时间，单位（秒）。自对象最近一次被访问后，    空闲时间超过了timeToIdleSeconds属性值，这个对象就会过期，如果该属性值为0，则对象无限期地处于空闲状态    EHCache将把它从缓存中清空。只有当eternal属性为false，该属性才有效。    --&gt;    &lt;!-- timeToLiveSeconds：设定允许对象存在于缓存中的最长时间，单位（秒）。自对象被存放到缓存中后，    在缓存中的时间超过了timeToLiveSeconds属性值，这个对象就会过期，如果该属性值为0，则对象无限期地存在于缓存中。    EHCache将把它从缓存中清除。只有当eternal属性为false，该属性才有效。timeToLiveSeconds必须大于timeToIdleSeconds属性，才有意义 --&gt;    &lt;!-- memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。    可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。--&gt;    &lt;!-- 默认缓存 --&gt;    &lt;defaultCache            maxElementsInMemory="10000"            eternal="false"            overflowToDisk="false"            diskSpoolBufferSizeMB="50"            timeToIdleSeconds="300"            timeToLiveSeconds="600"            maxElementsOnDisk="10000000"            diskExpiryThreadIntervalSeconds="120"            memoryStoreEvictionPolicy="LRU"&gt;        &lt;persistence strategy="localTempSwap"/&gt;    &lt;/defaultCache&gt;    &lt;cache name="employee_all"           maxElementsInMemory="100"           eternal="false"           overflowToDisk="true"           timeToIdleSeconds="300"           timeToLiveSeconds="600"           memoryStoreEvictionPolicy="LRU"/&gt;    &lt;cache name="employee_info"           maxElementsInMemory="1000"           eternal="false"           overflowToDisk="true"           timeToIdleSeconds="300"           timeToLiveSeconds="600"           memoryStoreEvictionPolicy="LRU"/&gt;    &lt;!--设置缓存空间--&gt;     &lt;cache name="smsCode"           maxElementsInMemory="1000"           eternal="false"           overflowToDisk="true"           timeToIdleSeconds="60"           timeToLiveSeconds="60"           memoryStoreEvictionPolicy="LRU"/&gt;&lt;/ehcache&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h6 id="2-memcached-缓存整合"><a href="#2-memcached-缓存整合" class="headerlink" title="2. memcached 缓存整合"></a>2. memcached 缓存整合</h6><ol><li>memcached 特性</li></ol><ul><li>memcached Client for Java: 最早期客服端，稳定，用户群广</li><li>SpyMemcached: 效率高</li><li>Xmemcached: 并发处理好</li><li>暂未被SpringBoot 整合，硬编码方式实现客服端初始化管理</li></ul><ol start="2"><li>memcached 安装</li></ol><ul><li><a href="https://www.memcached.org/downloads">memcached</a></li><li>管理员权限 操作命令行:<ul><li>安装: memcached.exe -d install</li><li>启动: emcached.exe -d start</li><li>关闭: emcached.exe -d stop</li></ul></li></ul><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">XMemcachedConfig.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-3">SMSCodeServiceImpl.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-4">application.yml</button></li><li class="tab"><button type="button" data-href="#pom.xml-5">pom.xml 5</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;!--memcached 缓存--&gt;    &lt;dependency&gt;      &lt;groupId&gt;com.googlecode&lt;/groupId&gt;      &lt;artifactId&gt;xmemcached&lt;/artifactId&gt;      &lt;version&gt;2.4.7&lt;/version&gt;    &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">ppackage top.wabisabifag.config;import org.springframework.context.annotation.Bean;import java.io.IOException;public class XMemcachedConfig {    @Bean    public MemcachedClient getMemcachedClient() throws IOException {        MemcachedClientBuilder memcachedClientBuilder = new XMemcachedClientBuilder("localhost:11211");        MemcachedClient memcachedClient = memcachedClientBuilder.build();        return memcachedClient;    }}&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;优&gt;&gt;&gt;&gt;&gt;化&gt;&gt;&gt;&gt;&gt;配&gt;&gt;&gt;&gt;&gt;&gt;置&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;package top.wabisabifag.config;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import java.io.IOException;@Configurationpublic class XMemcachedConfig {    @Autowired    private XMemcachedProperties memcachedProperties;    @Bean    public MemcachedClient getMemcachedClient() throws IOException {        MemcachedClientBuilder memcachedClientBuilder = new XMemcachedClientBuilder(memcachedProperties.getServers());        memcachedProperties.setPoolSize(memcachedProperties.getPoolSize());        memcachedProperties.setOpTimeout(memcachedProperties.getOpTimeout());        MemcachedClient memcachedClient = memcachedClientBuilder.build();        return memcachedClient;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-3"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cache.annotation.CachePut;import org.springframework.cache.annotation.Cacheable;import org.springframework.stereotype.Service;import top.wabisabifag.domain.SMSCode;import top.wabisabifag.service.SMSCodeService;import top.wabisabifag.utils.CodeUtils;@Servicepublic class SMSCodeServiceImpl implements SMSCodeService {    @Autowired    private MemcachedClient memcachedClient;    @Override    public String sendCodeToSMS(String tele) {        String code = codeUtils.generator(tele);                      // key   有效时间   值        memcachedClient.set(tele,0,code);        return code;    }    @Override    public boolean checkCode(SMSCode smsCode) {        String code = memcachedClient.get(smsCode.getTele()).toString();        return smsCode.getCode().equals(code);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-4"><pre class="line-numbers language-none"><code class="language-none">spring:  # 配置缓存类型  cache:    # memcached    servers: localhost:11211    poolSize: 10    opTimeout:  3000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-5"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.config;import lombok.Data;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;@Component@ConfigurationProperties(prefix = "memcached")@Datapublic class XMemcachedProperties {    private String servers;    private int poolSize;    private long opTimeout;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h5 id="6-jetCache"><a href="#6-jetCache" class="headerlink" title="6. jetCache"></a>6. jetCache</h5><h6 id="1-jetCache-特性"><a href="#1-jetCache-特性" class="headerlink" title="1. jetCache 特性"></a>1. jetCache 特性</h6><ul><li>jetCache 对 SpringCache 进行封装，原有基础上实现多级缓存，缓存统计，自动刷新，异步调用，数据报表等功能。</li><li>jetCache 设定本地缓存 和 远程缓存 的多级缓存解决方案<ul><li>本地缓存<ul><li>LinkedHashMap</li><li>Caffeine</li></ul></li><li>远程缓存<ul><li>Redis</li><li>Tair<br><img src="/../JavaEE/3.png" alt="jetCache yml配置文件值定意义"></li></ul></li></ul></li></ul><h6 id="2-整体部署-基础"><a href="#2-整体部署-基础" class="headerlink" title="2. 整体部署(基础)"></a>2. 整体部署(基础)</h6><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">application.yml</button></li><li class="tab"><button type="button" data-href="#pom.xml-3">application.java</button></li><li class="tab"><button type="button" data-href="#pom.xml-4">Redis 远程方案</button></li><li class="tab"><button type="button" data-href="#pom.xml-5">本地方案</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;!--jetCache 阿里缓存整合方案--&gt;    &lt;dependency&gt;      &lt;groupId&gt;com.alicp.jetcache&lt;/groupId&gt;      &lt;artifactId&gt;jetcache-starter-redis&lt;/artifactId&gt;      &lt;version&gt;2.4.7&lt;/version&gt;    &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">  # jetcache 阿里缓存配置jetcache:  # 每过 一段时间 在控制台上显示一段数据  statIntervalMinutes: 15  # 远程访问的 area 的名称 是否进入 缓存名中  areaInCacheName: false  # 本地  local:    default:      type: linkedhashmap      # 为方便对象转换为字符粗串：key必须为字符串      keyConvertor: fastjson      # 缓存的数据量      limit: 100  # 远程  remote:    default:      type: redis      host: localhost      port: 6379      # 为方便对象转换为字符粗串：key必须为字符串      # jetCache 的方法缓存 注解方式时需要      keyConvertor: fastjson      valueEncoder: java      valueDecoder: java      # 初始化连接池      poolConfig:        minIdle: 5        maxIdle: 20        maxTotal: 50    sms:      type: redis      host: localhost      port: 6379      poolConfig:        maxTotal: 50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-3"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cache.annotation.EnableCaching;import org.springframework.context.annotation.ComponentScan;@SpringBootApplication/* jetCache 开关: 启用注解方式开启缓存*/@EnableCreateCacheAnnotationpublic class application {    public static void main(String[] args) {        // 线程安全问题        SpringApplication.run(application.class,args);        // 不接受外部临时参数        SpringApplication.run(application.class);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-4"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cache.annotation.CachePut;import org.springframework.cache.annotation.Cacheable;import org.springframework.stereotype.Service;import top.wabisabifag.domain.SMSCode;import top.wabisabifag.service.SMSCodeService;import top.wabisabifag.utils.CodeUtils;import java.util.concurrent.TimeUnit;@Servicepublic class SMSCodeServiceImpl implements SMSCodeService {    @Autowired    private CodeUtils codeUtils;    # 通过 area="sms"  调用远程缓存的自定义前缀    @CreateCache(area="sms",name="jetCache",expire=3600,timeUnit= TimeUnit.SECONDS)    private Cache&lt;String,String&gt; jetCache;    @Override    public String sendCodeToSMS(String tele) {        String code = codeUtils.generator(tele);        jetCache.put(tele,code);        return code;    }    @Override    public boolean checkCode(SMSCode smsCode) {        String code = jetCache.get(smsCode.getTele());        return smsCode.getCode().equals(code);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-5"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cache.annotation.CachePut;import org.springframework.cache.annotation.Cacheable;import org.springframework.stereotype.Service;import top.wabisabifag.domain.SMSCode;import top.wabisabifag.service.SMSCodeService;import top.wabisabifag.utils.CodeUtils;import java.util.concurrent.TimeUnit;@Servicepublic class SMSCodeServiceImpl implements SMSCodeService {    @Autowired    private CodeUtils codeUtils;    # 设定缓存类型: 仅用 本地缓存    @CreateCache(name="jetCache",expire=3600,timeUnit= TimeUnit.SECONDS,cacheType= CacheType.LOCAL)    private Cache&lt;String,String&gt; jetCache;    @Override    public String sendCodeToSMS(String tele) {        String code = codeUtils.generator(tele);        jetCache.put(tele,code);        return code;    }    @Override    public boolean checkCode(SMSCode smsCode) {        String code = jetCache.get(smsCode.getTele());        return smsCode.getCode().equals(code);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h6 id="3-jetCache-方法缓存-改动基础"><a href="#3-jetCache-方法缓存-改动基础" class="headerlink" title="3. jetCache 方法缓存(改动基础)"></a>3. jetCache 方法缓存(改动基础)</h6><div class="tabs" id="application.java"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#application.java-1">application.java</button></li><li class="tab"><button type="button" data-href="#application.java-2">Book.java</button></li><li class="tab"><button type="button" data-href="#application.java-3">jetCache远程方案</button></li><li class="tab"><button type="button" data-href="#application.java-4">jetCache本地方案</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="application.java-1"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cache.annotation.EnableCaching;import org.springframework.context.annotation.ComponentScan;@SpringBootApplication/* jetCache 开关: 启用注解方式开启缓存*/@EnableCreateCacheAnnotation/* 开启注解缓存: 包名覆盖 */@EnableMethodCache(basePackages = "top.wabisabifag")public class application {    public static void main(String[] args) {        // 线程安全问题        SpringApplication.run(application.class,args);        // 不接受外部临时参数        SpringApplication.run(application.class);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="application.java-2"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.domain;import lombok.AllArgsConstructor;import lombok.Data;import java.io.Serializable;@Data@AllArgsConstructor/* jetCache 缓存 Java 的对象时    映入 Redis 库不支持。（ 序列化和反序列化问题*/public class Book implements Serializable {    private int id;    private String name;    private String type;    private String description;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="application.java-3"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cache.annotation.Cacheable;import org.springframework.stereotype.Service;import top.wabisabifag.dao.BookDao;import top.wabisabifag.domain.Book;import java.util.HashMap;@Servicepublic class BookServiceImpl {    @Autowired    private BookDao bookDao;    /* 对应缓存 */    private HashMap&lt;Integer,Book&gt; cache = new HashMap&lt;Integer, Book&gt;();    @Override    //@Cacheable(value = "cacheSpace",key = "#id")    @Cached(name="book",key="#id",expire=3600)    public Book getById(Integer id){        return bookDao.selectById(id);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="application.java-4"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cache.annotation.Cacheable;import org.springframework.stereotype.Service;import top.wabisabifag.dao.BookDao;import top.wabisabifag.domain.Book;import java.util.HashMap;@Servicepublic class BookServiceImpl {    @Autowired    private BookDao bookDao;    /* 对应缓存 */    private HashMap&lt;Integer,Book&gt; cache = new HashMap&lt;Integer, Book&gt;();    @Override    /* 注入缓存注解*/    @Cached(name="book",key="#id",expire=3600)     /* 刷新: 内存和数据库内容不同步*/    @CacheRefresh(refresh=10)    public Book getById(Integer id){        return bookDao.selectById(id);    }    @Override    /* 更新缓存注解*/    @CacheUpdate(name="book_",key="#book.id",value="#book")    public boolean update(Book book){        return bookDao.updateById(book)&gt;0;    }    @Override    /* 删除缓存注解*/    @CacheInvalidate(name="book_",key="#id",value="#book")    public boolean update(Book book){        return bookDao.updateById(book)&gt;0;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h5 id="7-j2cache"><a href="#7-j2cache" class="headerlink" title="7. j2cache"></a>7. j2cache</h5><h6 id="1-j2cache-特性"><a href="#1-j2cache-特性" class="headerlink" title="1. j2cache 特性"></a>1. j2cache 特性</h6><ul><li>j2cache 是一个缓存整合框架，可提供缓存的整合方案，使用各种缓存搭配使用。(自身不提供缓存功能</li></ul><h6 id="2-j2cache-主要整合-Redis-Ehcache"><a href="#2-j2cache-主要整合-Redis-Ehcache" class="headerlink" title="2. j2cache (主要整合 Redis Ehcache)"></a>2. j2cache (主要整合 Redis Ehcache)</h6><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">application.yml</button></li><li class="tab"><button type="button" data-href="#pom.xml-3">j2cache.properties</button></li><li class="tab"><button type="button" data-href="#pom.xml-4">ehcache.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-5">SMSCodeServiceImpl.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;!--j2Cache 核心--&gt;    &lt;dependency&gt;      &lt;groupId&gt;net-oschina.j2cache&lt;/groupId&gt;      &lt;artifactId&gt;j2cache-core&lt;/artifactId&gt;      &lt;version&gt;2.8.4-release&lt;/version&gt;    &lt;/dependency&gt;&lt;!--jetCache SpringBoot整合--&gt;    &lt;dependency&gt;      &lt;groupId&gt;net-oschina.j2cache&lt;/groupId&gt;      &lt;artifactId&gt;j2cache-spring-boot2-starter&lt;/artifactId&gt;      &lt;version&gt;2.8.0-release&lt;/version&gt;    &lt;/dependency&gt;&lt;!--Ehcache 缓存--&gt;    &lt;dependency&gt;      &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt;      &lt;artifactId&gt;ehcache&lt;/artifactId&gt;    &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">  # j2cache 整合j2cache:  # j2cache 配置文件名  config-location: j2cache.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-3"><pre class="line-numbers language-none"><code class="language-none"># 1级缓存j2cache.L1.provider_class= ehcacheehcache.configXml = ehcache.xml# 是否开启二级缓存j2cache.l2-cache-open = ture# 1级缓存中的数据如何到达2级缓存:#   广播方式，可以使用redis 提供的消息订阅模式，也可以使用jgroups多播实现j2cache.broadcast = net.oschina.j2cache.cache.support.redis.SpringRedisPubSubPolicy# 2级缓存j2cache.L2.provider_class = net.oschina.j2cache.cache.support.redis.SpringRedisProviderj2cache.L2.config_section = redisredis.hosts = localhost:6379redis.mode = singleredis.namespace =j2cache##J2Cache configuration############################################ Cache Broadcast Method## values:## jgroups -&gt; use jgroups's multicast## redis -&gt; use redis publish/subscribe mechanism (using jedis)## lettuce -&gt; use redis publish/subscribe mechanism (using lettuce, Recommend)## rabbitmq -&gt; use RabbitMQ publisher/consumer mechanism## rocketmq -&gt; use RocketMQ publisher/consumer mechanism## none -&gt; don't notify the other nodes in cluster## xx.xxxx.xxxx.Xxxxx your own cache broadcast policy classname that implement net.oschina.j2cache.cluster.ClusterPolicy###########################################j2cache.broadcast = redis### jgroups properties#jgroups.channel.name = j2cache#jgroups.configXml = /network.xml### RabbitMQ properties#rabbitmq.exchange = j2cache#rabbitmq.host = localhost#rabbitmq.port = 5672#rabbitmq.username = guest#rabbitmq.password = guest### RocketMQ properties#rocketmq.name = j2cache#rocketmq.topic = j2cache## use ; to split multi hosts#rocketmq.hosts = 127.0.0.1:9876############################################# Level 1&amp;2 provider## values:## none -&gt; disable this level cache## ehcache -&gt; use ehcache2 as level 1 cache## ehcache3 -&gt; use ehcache3 as level 1 cache## caffeine -&gt; use caffeine as level 1 cache(only in memory)## redis -&gt; use redis as level 2 cache (using jedis)## lettuce -&gt; use redis as level 2 cache (using lettuce)## readonly-redis -&gt; use redis as level 2 cache ,but never write data to it. if use this provider, you must uncomment `j2cache.L2.config_section` to make the redis configurations available.## memcached -&gt; use memcached as level 2 cache (xmemcached),## [classname] -&gt; use custom provider############################################j2cache.L1.provider_class = caffeine#j2cache.L2.provider_class = redis### When L2 provider isn't `redis`, using `L2.config_section = redis` to read redis configurations## j2cache.L2.config_section = redis### Enable/Disable ttl in redis cache data (if disabled, the object in redis will never expire, default:true)## NOTICE: redis hash mode (redis.storage = hash) do not support this feature)#j2cache.sync_ttl_to_redis = true### Whether to cache null objects by default (default false)#j2cache.default_cache_null_object = true############################################# Cache Serialization Provider## values:## fst -&gt; using fast-serialization (recommend)## kryo -&gt; using kryo serialization## json -&gt; using fst's json serialization (testing)## fastjson -&gt; using fastjson serialization (embed non-static class not support)## java -&gt; java standard## fse -&gt; using fse serialization## [classname implements Serializer]############################################j2cache.serialization = json##json.map.person = net.oschina.j2cache.demo.Person############################################# Ehcache configuration############################################# ehcache.configXml = /ehcache.xml### ehcache3.configXml = /ehcache3.xml## ehcache3.defaultHeapSize = 1000############################################# Caffeine configuration## caffeine.region.[name] = size, xxxx[s|m|h|d]#############################################caffeine.properties = /caffeine.properties############################################# Redis connection configuration####################################################################################### Redis Cluster Mode#### single -&gt; single redis server## sentinel -&gt; master-slaves servers## cluster -&gt; cluster servers (数据库配置无效，使用 database = 0)## sharded -&gt; sharded servers  (密码、数据库必须在 hosts 中指定，且连接池配置无效); redis://user:password@127.0.0.1:6379/0）##############################################redis.mode = single###redis storage mode (generic|hash)#redis.storage = generic#### redis pub/sub channel name#redis.channel = j2cache### redis pub/sub server (using redis.hosts when empty)#redis.channel.host =###cluster name just for sharded#redis.cluster_name = j2cache#### redis cache namespace optional, default[empty]#redis.namespace =#### redis command scan parameter count, default[1000]##redis.scanCount = 1000#### connection## Separate multiple redis nodes with commas, such as 192.168.0.10:6379,192.168.0.11:6379,192.168.0.12:6379##redis.hosts = 127.0.0.1:6379#redis.timeout = 2000#redis.password =#redis.database = 0#redis.ssl = false#### redis pool properties#redis.maxTotal = 100#redis.maxIdle = 10#redis.maxWaitMillis = 5000#redis.minEvictableIdleTimeMillis = 60000#redis.minIdle = 1#redis.numTestsPerEvictionRun = 10#redis.lifo = false#redis.softMinEvictableIdleTimeMillis = 10#redis.testOnBorrow = true#redis.testOnReturn = false#redis.testWhileIdle = true#redis.timeBetweenEvictionRunsMillis = 300000#redis.blockWhenExhausted = false#redis.jmxEnabled = false############################################# Lettuce scheme#### redis -&gt; single redis server## rediss -&gt; single redis server with ssl## redis-sentinel -&gt; redis sentinel## redis-cluster -&gt; cluster servers######################################################################################### Lettuce Mode#### single -&gt; single redis server## sentinel -&gt; master-slaves servers## cluster -&gt; cluster servers (数据库配置无效，使用 database = 0)## sharded -&gt; sharded servers  (密码、数据库必须在 hosts 中指定，且连接池配置无效 ; redis://user:password@127.0.0.1:6379/0）################################################ redis command scan parameter count, default[1000]##lettuce.scanCount = 1000#lettuce.mode = single#lettuce.namespace =#lettuce.storage = hash#lettuce.channel = j2cache#lettuce.scheme = redis#lettuce.hosts = 127.0.0.1:6379#lettuce.password =#lettuce.database = 0#lettuce.sentinelMasterId =#lettuce.maxTotal = 100#lettuce.maxIdle = 10#lettuce.minIdle = 10## timeout in milliseconds#lettuce.timeout = 10000## redis cluster topology refresh interval in milliseconds#lettuce.clusterTopologyRefresh = 3000############################################# memcached server configurations## refer to https://gitee.com/mirrors/XMemcached############################################memcached.servers = 127.0.0.1:11211#memcached.username =#memcached.password =#memcached.connectionPoolSize = 10#memcached.connectTimeout = 1000#memcached.failureMode = false#memcached.healSessionInterval = 1000#memcached.maxQueuedNoReplyOperations = 100#memcached.opTimeout = 100#memcached.sanitizeKeys = false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-4"><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xsi:noNamespaceSchemaLocation="http://ehcache.org/ehcache.xsd"        updateCheck="false" name="defaultCache"&gt;    &lt;!--       diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置,可以自定义目录，确保用户有权限即可。参数解释如下：       user.home – 用户主目录       user.dir  – 用户当前工作目录       java.io.tmpdir – 默认临时文件路径     --&gt;    &lt;!--    &lt;diskStore path="java.io.tmpdir"/&gt; --&gt;    &lt;diskStore path="C:/Users/admin/ehcache/"/&gt;    &lt;!-- maxElementsInMemory：内存中最大缓存对象数，根据服务器资源配置 --&gt;    &lt;!-- eternal： 默认为false,设置true表示对象永不过期，此时会忽略timeToIdleSeconds和timeToLiveSeconds属性， --&gt;    &lt;!-- maxElementsOnDisk：硬盘中最大缓存对象数，若是0表示无穷大 --&gt;    &lt;!-- overflowToDisk：true表示当内存缓存的对象数目达到了maxElementsInMemory界限后，会把溢出的对象写到硬盘缓存中。    注意：如果缓存的对象要写入到硬盘中的话，则该对象必须实现了Serializable接口才行。--&gt;    &lt;!-- diskSpoolBufferSizeMB：磁盘缓存区大小，默认为30MB。每个Cache都应该有自己的一个缓存区。--&gt;    &lt;!-- diskPersistent：是否缓存虚拟机重启期数据  --&gt;    &lt;!-- diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认为120秒 --&gt;    &lt;!-- timeToIdleSeconds： 设定允许对象处于空闲状态的最长时间，单位（秒）。自对象最近一次被访问后，    空闲时间超过了timeToIdleSeconds属性值，这个对象就会过期，如果该属性值为0，则对象无限期地处于空闲状态    EHCache将把它从缓存中清空。只有当eternal属性为false，该属性才有效。    --&gt;    &lt;!-- timeToLiveSeconds：设定允许对象存在于缓存中的最长时间，单位（秒）。自对象被存放到缓存中后，    在缓存中的时间超过了timeToLiveSeconds属性值，这个对象就会过期，如果该属性值为0，则对象无限期地存在于缓存中。    EHCache将把它从缓存中清除。只有当eternal属性为false，该属性才有效。timeToLiveSeconds必须大于timeToIdleSeconds属性，才有意义 --&gt;    &lt;!-- memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。    可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。--&gt;    &lt;!-- 默认缓存 --&gt;    &lt;defaultCache            maxElementsInMemory="10000"            eternal="false"            overflowToDisk="false"            diskSpoolBufferSizeMB="50"            timeToIdleSeconds="300"            timeToLiveSeconds="600"            maxElementsOnDisk="10000000"            diskExpiryThreadIntervalSeconds="120"            memoryStoreEvictionPolicy="LRU"&gt;        &lt;persistence strategy="localTempSwap"/&gt;    &lt;/defaultCache&gt;    &lt;cache name="employee_all"           maxElementsInMemory="100"           eternal="false"           overflowToDisk="true"           timeToIdleSeconds="300"           timeToLiveSeconds="600"           memoryStoreEvictionPolicy="LRU"/&gt;    &lt;cache name="employee_info"           maxElementsInMemory="1000"           eternal="false"           overflowToDisk="true"           timeToIdleSeconds="300"           timeToLiveSeconds="600"           memoryStoreEvictionPolicy="LRU"/&gt;    &lt;!--设置缓存空间--&gt;    &lt;cache name="smsCode"           maxElementsInMemory="1000"           eternal="false"           overflowToDisk="true"           timeToIdleSeconds="300"           timeToLiveSeconds="600"           memoryStoreEvictionPolicy="LRU"/&gt;&lt;/ehcache&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-5"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.cache.CacheType;import org.springframework.cache.annotation.CachePut;import org.springframework.cache.annotation.Cacheable;import org.springframework.stereotype.Service;import top.wabisabifag.domain.SMSCode;import top.wabisabifag.service.SMSCodeService;import top.wabisabifag.utils.CodeUtils;import java.util.concurrent.TimeUnit;@Servicepublic class SMSCodeServiceImpl implements SMSCodeService {    @Autowired    private CodeUtils codeUtils;    @Autowired    /* 定义缓存对象*/    private CacheChannel cacheChannel;    @Override    public String sendCodeToSMS(String tele) {        String code = codeUtils.generator(tele);        /* 放入内缓存对象中*/        cacheChannel.set("sms",tele,code);        return code;    }    @Override    public boolean checkCode(SMSCode smsCode) {        /* 获取内缓存对象数据*/        String code = cacheChannel.get("sms",smsCode.getTele()).asString();        return smsCode.getCode().equals(code);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="2-任务"><a href="#2-任务" class="headerlink" title="2. 任务"></a>2. 任务</h4><ul><li><p>定时任务</p><ul><li>年度报表</li><li>缓存统计报告</li></ul></li><li><p>定时任务框架技术</p><ul><li>Quartz</li><li>Spring Task</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag;import java.util.Timer;import java.util.TimerTask;public class TimeTaskApp {    public static void main(String[] args) {        /* 创建定时器对象*/        Timer timer = new Timer();        /* 创建定时任务*/        TimerTask task = new TimerTask() {            @Override            public void run() {                System.out.println("timer task run...");            }        };        /* 每过 2秒 执行定时任务*/        timer.schedule(task,0,2000);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-SpringBoot-整合-Quartz"><a href="#1-SpringBoot-整合-Quartz" class="headerlink" title="1. SpringBoot 整合 Quartz"></a>1. SpringBoot 整合 Quartz</h5><h6 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h6><ul><li>工作(Job):  用于定义具体的工作</li><li>工作明细(JobDetail):  用于描述定时工作相关的信息</li><li>触发器(Trugger):  用于描述触发工作的规则，通常使用cron 表达式定义调度规则</li><li>调度器(Scheduler):  描述工作明细与触发器的对应关系</li></ul><h6 id="2-Quartz"><a href="#2-Quartz" class="headerlink" title="2. Quartz"></a>2. Quartz</h6><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">MyQuartzjava</button></li><li class="tab"><button type="button" data-href="#pom.xml-3">QuartzConfig.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;!--Quartz 整合--&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;      &lt;scop&gt;test&lt;/scop&gt;    &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.quartz;import org.springframework.scheduling.quartz.QuartzJobBean;public class MyQuartz extends QuartzJobBean {    @Override    protected void executeInternal(JobExecutionContext jobExecutionContext) throws JobExecutionException {    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-3"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import top.wabisabifag.quartz.MyQuartz;@Configurationpublic class QuartzConfig {    @Bean    /* 描述*/    public JobDetail printJobDetail(){        /* 绑定具体的工作  */        return JobBuilder.newJob(MyQuartz.class)                          .storeDurably().build; //持久化对象    }    @Bean    public Trigger printJobTrigger(){        /* 设定任务执行的周期:  分 时 日 月 */        ScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule("0 * * * * ?");        /* 绑定对应的工作明细*/        return TriggerBuilder                            .newTrigger().forJob(printJobTrigger()) // 新建触发器 绑定任务                            .withSchedule(schedBuilder).build();// 构建执行周期 绑定任务执行周期     }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h5 id="2-Spring-Task"><a href="#2-Spring-Task" class="headerlink" title="2. Spring Task"></a>2. Spring Task</h5><div class="tabs" id="application.java"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#application.java-1">application.java</button></li><li class="tab"><button type="button" data-href="#application.java-2">MyBean.java</button></li><li class="tab"><button type="button" data-href="#application.java-3">application.yml</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="application.java-1"><pre class="line-numbers language-none"><code class="language-none">@SpringBootApplication/* 开启定时任务功能*/@EnableScheduling       public class application {    public static void main(String[] args) {        // 线程安全问题        SpringApplication.run(application.class,args);        // 不接受外部临时参数        SpringApplication.run(application.class);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="application.java-2"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.quartz;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Component;@Componentpublic class MyBean {    @Scheduled(cron = "0/1 * * * * ?")    public void print(){        //  获取线程名称        System.out.println(Thread.currentThread().getName()+":spring task run 。。。");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="application.java-3"><pre class="line-numbers language-none"><code class="language-none">spring:    # 定时任务配置  task:    scheduling:      # 任务调度线程池大小 默认 1    pool:      size: 1    # 调度线程名称前缀 默认 scheduling-    thread-name-prefix: ssm_    shutdown:      # 线程池关闭时等待所有任务完成      await-termination: false      # 调度线程 关闭前最大等待时间，确保最后一定关闭      await-termination=period: 10s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h5 id="3-SpringBoot-整合-JavaMail"><a href="#3-SpringBoot-整合-JavaMail" class="headerlink" title="3. SpringBoot 整合 JavaMail"></a>3. SpringBoot 整合 JavaMail</h5><ul><li>SMTP(Simple Mail Transfer Protocol): 简单的邮件传输协议，用于发送电子邮件的传输协议</li><li>POP3(Post Office Protocol -Version 3): 用于接收电子邮件的标准协议</li><li>IMAP(Internat Mail Access Protocol): 互联网消息协议，POP3 替代协议</li></ul><h6 id="1-JavaMail-基础"><a href="#1-JavaMail-基础" class="headerlink" title="1. JavaMail(基础)"></a>1. JavaMail(基础)</h6><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">application.yml</button></li><li class="tab"><button type="button" data-href="#pom.xml-3">SendMailTest.java</button></li><li class="tab"><button type="button" data-href="#pom.xml-4">基础发送</button></li><li class="tab"><button type="button" data-href="#pom.xml-5">优化多格式内容发送</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;!--JavaMail 整合--&gt;   &lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;   &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">spring:    # JavaMail 邮件  mail:    host: smtp.qq.com    username: 12345678@qq.com    # QQ邮箱 =&gt; 设置 =&gt; 账户 =&gt; POP3服务开启： 获取授权码 (付费功能)    password: zsaf45coca<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-3"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag;import org.junit.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import top.wabisabifag.service.SendMailService;@SpringBootTestpublic class SendMailTest {    @Autowired    private SendMailService sendMailService;    @Test    public void contextLoads(){        sendMailService.sendMail();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-4"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.mail.SimpleMailMessage;import org.springframework.mail.javamail.JavaMailSender;import org.springframework.stereotype.Service;import top.wabisabifag.service.SendMailService;@Servicepublic class SendMaillServiceImpl implements SendMailService {    @Autowired    private JavaMailSender javaMailSender;    private String from = "12345678@qq.com"; /* 发送人*/    private String to = "12345678@126.com"; /* 接收人*/    private String subject = "测试邮件"; /* 标题*/    private String context = "测试邮件正文内容"; /* 正文*/    @Override    public void sendMail() {        SimpleMailMessage message = new SimpleMailMessage();        /* 替代发送者的邮箱账号，接收者信息有具体的信息*/        message.setFrom(from+"(好友:张伟)");        message.setTo(to);        message.setSubject(subject);        message.setText(context);        javaMailSender.send(message);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-5"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.mail.SimpleMailMessage;import org.springframework.mail.javamail.JavaMailSender;import org.springframework.mail.javamail.MimeMailMessage;import org.springframework.mail.javamail.MimeMessageHelper;import org.springframework.stereotype.Service;import top.wabisabifag.service.SendMailService;import java.io.File;@Servicepublic class SendMaillServiceImpl implements SendMailService {    @Autowired    private JavaMailSender javaMailSender;    private String from = "12345678@qq.com"; /* 发送人*/    private String to = "12345678@126.com"; /* 接收人*/    private String subject = "测试邮件"; /* 标题*/    private String context = "&lt;a href='http://www.wabisabifag.top'&gt;测试邮件正文内容&lt;/a&gt;"; /* 正文*/    @Override    public void sendMail() {        try{            MimeMessage message = javaMailSender.createMimeMessage();            /* 1.添加附件功能: true*/            MimeMessageHelper helper = new MimeMessageHelper(message,true);            helper.setFrom(from+"(好友:张伟)");            helper.setTo(to);            helper.setSubject(subject);            /* 4.文档内容支持 HTML 格式*/            helper.setText(context,true);            /* 2.添加 附件*/            File file = new File("D:\\wabisabifag.jar");            File file2 = new File("D:\\学习资料.zip");            /* 3.附件名修改方式*/            helper.addAttachment(file.getName(),file);            helper.addAttachment("发给张总的素材.zip",file2);            javaMailSender.send(message);        }catch (Exception e){            e.printStackTrace();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="3-消息"><a href="#3-消息" class="headerlink" title="3. 消息"></a>3. 消息</h4><ul><li>生产者 消费者</li><li>消息队列<ul><li>浏览器 ===&gt;&gt; 业务系统 ===&gt;&gt; MQ ===&gt;&gt; 子业务系统</li></ul></li></ul><h5 id="1-同步消息"><a href="#1-同步消息" class="headerlink" title="1. 同步消息"></a>1. 同步消息</h5><h5 id="2-异步消息"><a href="#2-异步消息" class="headerlink" title="2. 异步消息"></a>2. 异步消息</h5><h6 id="1-JMS"><a href="#1-JMS" class="headerlink" title="1. JMS"></a>1. JMS</h6><p>JMS(Java Message Service): 一个规范，等同于JDBC 规范，提供消息服务的API接口</p><ol><li><p>JMS 消息模型</p><ul><li>peer-2-peer: 点对点模型，消息发送到一个队列中，队列保存消息只能被一个消费者消费，或超时</li><li>publish-subscribe: 发布订阅模型，消息被多消费者消费，生产者和消费者完全独立</li></ul></li><li><p>JMS 消息种类</p><ul><li>TextMessage</li><li>MapMessage</li><li>BytesMessage (主要使用)</li><li>StreamMessage</li><li>ObjectMessage</li><li>Message (只有消息和属性)</li></ul></li><li><p>JMS 实现:</p><ul><li>ActiveMQ</li><li>Redis</li><li>HornetMQ</li><li>RabbitMQ</li></ul></li></ol><h6 id="2-AMQP"><a href="#2-AMQP" class="headerlink" title="2. AMQP"></a>2. AMQP</h6><p>AMQP(advanced message queuing protocol): 一种协议(高级消息队列协议，消息代理规范)。会犯网络交换的数据格式，兼容JMS</p><ul><li>特性<ul><li>跨平台和语言</li><li>服务器供应商</li><li>生产者</li></ul></li></ul><ol><li><p>AMQP 消息模型</p><ul><li>direct exchange</li><li>fanout exchange</li><li>topic exchange (主要)</li><li>headers exchange</li><li>system exchange</li></ul></li><li><p>AMQP 消息种类</p><ul><li>byte[]</li></ul></li><li><p>AMQP 实现:</p><ul><li>RabbitMQ</li><li>StormMQ</li><li>RockeMQ</li></ul></li></ol><h6 id="3-MQTT"><a href="#3-MQTT" class="headerlink" title="3. MQTT"></a>3. MQTT</h6><p>MQTT(Message Queueing Telemetry Transport) 消息队列遥测传输，专为小设备设计，物联网(IOT)生态系统主要成分之一</p><h6 id="4-Kafka"><a href="#4-Kafka" class="headerlink" title="4. Kafka"></a>4. Kafka</h6><p>Kafka 一种高吞吐量的分布式发布订阅消息系统，提供实时消息功能</p><h5 id="3-消息案例-—-模拟订单短信通知"><a href="#3-消息案例-—-模拟订单短信通知" class="headerlink" title="3. 消息案例 — 模拟订单短信通知"></a>3. 消息案例 — 模拟订单短信通知</h5><div class="tabs" id="orderserviceimpl.java"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#orderserviceimpl.java-1">OrderServiceImpl.java</button></li><li class="tab"><button type="button" data-href="#orderserviceimpl.java-2">MessageServiceImpl.java</button></li><li class="tab"><button type="button" data-href="#orderserviceimpl.java-3">OrderController.java</button></li><li class="tab"><button type="button" data-href="#orderserviceimpl.java-4">MessageController.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="orderserviceimpl.java-1"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import top.wabisabifag.service.MessageService;import top.wabisabifag.service.OrderService;@Servicepublic class OrderServiceImpl implements OrderService {    @Autowired    private MessageService messageService;    @Override    public void order(String id) {        /* 服务调用 处理各种业务*/        System.out.println("订单处理处理中。。。");        /* 短信消息处理*/        messageService.sendMessage(id);        System.out.println("订单处理完成");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="orderserviceimpl.java-2"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl;import org.springframework.stereotype.Service;import top.wabisabifag.service.MessageService;import java.util.ArrayList;@Servicepublic class MessageServiceImpl implements MessageService {    private ArrayList&lt;String&gt; msgList = new ArrayList&lt;&gt;();    @Override    public void sendMessage(String id) {        System.out.println("待发送短信的订单已纳入处理队列: id"+id);        msgList.add(id);    }    @Override    public String doMessage() {        String id = msgList.remove(0);        System.out.println("已完成短信发送业务：id"+id);        return null;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="orderserviceimpl.java-3"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.controller;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import top.wabisabifag.service.OrderService;@RestController@RequestMapping("/orders")public class OrderController {    @Autowired    private OrderService orderService;    @PostMapping("{id}")    public void Order(@PathVariable String id){        orderService.order(id);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="orderserviceimpl.java-4"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.controller;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import top.wabisabifag.service.MessageService;@RestController@RequestMapping("/msg")public class MessageController {    @Autowired    private MessageService messageService;    @GetMapping    public String doMessage(){        String id = messageService.doMessage();        return id;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h6 id="1-ActiveMQ"><a href="#1-ActiveMQ" class="headerlink" title="1. ActiveMQ"></a>1. ActiveMQ</h6><ol><li><p><a href="https://activemq.apache.org/components/classic/download/">ActiveMQ 下载地址</a></p></li><li><p>安装运行</p></li></ol><ul><li>批处理运行: ../bin/win64/activemq.bat </li><li>安装: ../bin/win64/InstallService.bat</li><li>后台管理界面: 127.0.0.1:8161/   (password: admin)</li><li>服务端口: 127.0.0.1:61616/</li></ul><ol start="3"><li>Spring 整合 ActiveMQ</li></ol><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">application.yml</button></li><li class="tab"><button type="button" data-href="#pom.xml-3">MessageServiceActivemqImpl.java</button></li><li class="tab"><button type="button" data-href="#pom.xml-4">监听消费</button></li><li class="tab"><button type="button" data-href="#pom.xml-5">传递队列消息</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;!--ActiveMQ 整合--&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-starter-activemq&lt;/artifactId&gt;    &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">spring:  # ActiveMQ 消息  activemq:    broker-url: top://localhost:61616  jms:    # 发布订阅模型：true 点对点模型：false     pub-sub-domain: true    template:    default-destination: wabisabifag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-3"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl.activemq;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import top.wabisabifag.service.MessageService;@Servicepublic class MessageServiceActivemqImpl implements MessageService {    @Autowired    private JmsMessagingTemplate messagingTemplate;    @Override    public void sendMessage(String id) {        System.out.println("待发送短信的订单已纳入处理队列: id"+id);        /* 设置队列名字 */        messagingTemplate.convertAndSend("order.queu.id",id);    }    @Override    public String doMessage() {        String id = messagingTemplate.receiveAndConvert(String.class);        System.out.println("已完成短信发送业务：id"+id);        return null;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-4"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl.activemq.listener;import org.springframework.stereotype.Component;@Componentpublic class MessageListener {    @JsmListener(destination = "order.queue.id")    public void recevi(String id){        System.out.println("已完成短信发送业务：id"+id);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-5"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl.activemq.listener;import org.springframework.stereotype.Component;@Componentpublic class MessageListener {    @JsmListener(destination = "order.queue.id")    @SendTo("order.other.queue.id")    public String recevi(String id){        System.out.println("已完成短信发送业务：id"+id);        return "new:"+ id;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h6 id="2-RabbitMQ"><a href="#2-RabbitMQ" class="headerlink" title="2. RabbitMQ"></a>2. RabbitMQ</h6><ol><li><a href="https://rabbitmq.com/install-windows.html">RabbitMQ </a>基于Erlang 语言编写，需要安装 <a href="https://www.erlang.org.downloads/">Erlang</a> 并重启电脑</li><li>配置环境 ERLANG_HOME</li><li>管理员权限 ..\bin\rabbitmq-service.bat start</li><li>插件</li></ol><ul><li>查看 rabbitmq-plugins.bat list </li><li>开启 rabbitmq-plugins.bat enable rabbitmq_management</li></ul><ol start="5"><li>访问服务</li></ol><ul><li>管理后台端口 localhost:156772  (password: guest)</li><li>服务端口 localhost:5672</li></ul><ol start="6"><li>direct exchange 直连交换机(消息模型)</li></ol><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">application.yml</button></li><li class="tab"><button type="button" data-href="#pom.xml-3">定义消息队列</button></li><li class="tab"><button type="button" data-href="#pom.xml-4">生产与消费消息</button></li><li class="tab"><button type="button" data-href="#pom.xml-5">消息监听器</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-<!--RabbitMQ" data-language="<!--RabbitMQ"><div class="caption"><span>direct exchange (消息模型)--&gt;</span></div><code class="language-<!--RabbitMQ">&lt;dependency&gt;  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none">spring:    # RabbitMQ    rabbitmq:      host: localhost      # 服务端口       管理：15672      port: 5672<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-3"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl.rabbitmq.direct.config;import org.elasticsearch.common.inject.internal.BindingBuilder;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import javax.naming.Binding;import java.util.Queue;@Configurationpublic class RabbitConfigDirect {    @Bean       /* 消息队列*/    public Queue directQueue(){                /*  1.是否持久化  2.当前消息队列是否连接专用  3.是否删除*/        return new Queue("direct_queue",true,false,false);    }    @Bean       /* 消息队列*/    public Queue directQueue2(){        return new Queue("direct_queue2");    }    @Bean       /* 交换机*/    public DirectExchange directExchange(){        return new DirectExchange("directExchange");    }    @Bean       /* 绑定消息队列和交换机*/    public Binding bindingDirect(){        return BindingBuilder.bind(directQueue()).to(directExchange()).with("direct");    }    @Bean       /* 绑定消息队列和交换机*/    public Binding bindingDirect2(){        return BindingBuilder.bind(directQueue2()).to(directExchange()).with("direct2");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-4"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl.rabbitmq.direct;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import top.wabisabifag.service.MessageService;@Servicepublic class MessageServiceRabbitmqDirectImpl implements MessageService {    @Autowired    private  AmqpTemplate amqpTemplate;    @Override    public void sendMessage(String id) {        System.out.println("待发送短信的订单已纳入处理队列(rabbitmq direct)：id"+id);        /* 明确消息模型*/        amqpTemplate.convertAndSend("directExchange","direct",id);    }    @Override    public String doMessage() {        return null;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-5"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl.rabbitmq.direct.listener;import org.springframework.stereotype.Component;@Componentpublic class MessageListener {    @RabbitListener(queue="direct_queue")    public void recive(String id){        System.out.println("待发送短信的订单已纳入处理队列(rabbitmq direct)：id"+id);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ol start="7"><li>topic exchange  主题交换机(消息模型)</li></ol><div class="tabs" id="rabbitconfigtopic.java"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#rabbitconfigtopic.java-1">RabbitConfigTopic.java</button></li><li class="tab"><button type="button" data-href="#rabbitconfigtopic.java-2">MessageListener.java</button></li><li class="tab"><button type="button" data-href="#rabbitconfigtopic.java-3">MessageServiceRabbitmqTopicImpl.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="rabbitconfigtopic.java-1"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl.rabbitmq.topic.config;import org.elasticsearch.common.inject.internal.BindingBuilder;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import javax.naming.Binding;import java.util.Queue;@Configurationpublic class RabbitConfigTopic {    @Bean       /* 消息队列*/    public Queue topicQueue(){                /*  1.是否持久化  2.当前消息队列是否连接专用  3.是否删除*/        return new Queue("topic_queue",true,false,false);    }    @Bean       /* 消息队列*/    public Queue topictQueue2(){        return new Queue("topic_queue2");    }    @Bean       /* 交换机*/    public TopicExchange topicExchange(){        return new TopicExchange("topicExchange");    }    /* 一次队列消息多次匹配*/    @Bean       /* 绑定消息队列和交换机*/    public Binding bindingTopic(){        return BindingBuilder.bind(topicQueue()).to(topicExchange()).with("topic.*.id");    }    @Bean       /* 绑定消息队列和交换机*/    public Binding bindingTopic2(){        return BindingBuilder.bind(topicQueue2()).to(topicExchange()).with("topic.order.*");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="rabbitconfigtopic.java-2"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl.rabbitmq.topic.listener;import org.springframework.stereotype.Component;@Componentpublic class MessageListener {    @RabbitListener(queue="topic_queue")    public void recive(String id){        System.out.println("待发送短信的订单已纳入处理队列(rabbitmq direct)：id"+id);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="rabbitconfigtopic.java-3"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl.rabbitmq.topic;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import top.wabisabifag.service.MessageService;@Servicepublic class MessageServiceRabbitmqTopicImpl implements MessageService {    @Autowired    private  AmqpTemplate amqpTemplate;    @Override    public void sendMessage(String id) {        System.out.println("待发送短信的订单已纳入处理队列(rabbitmq topic)：id"+id);        /* 明确消息模型*/                              /*topic exchange 的特点*/        /* 一次队列消息多次匹配*/        amqpTemplate.convertAndSend("topicExchange","topic.order.id",id);    }    @Override    public String doMessage() {        return null;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ul><li>特性: 一个生产者，可产生多个消息队列，然后消费者通过routingkey去匹配生产者的routingkey</li><li>绑定键匹配规则<br><img src="/../JavaEE/4.png" alt="绑定键匹配规则"></li></ul><h6 id="3-RocketMQ"><a href="#3-RocketMQ" class="headerlink" title="3. RocketMQ"></a>3. RocketMQ</h6><ol><li><a href="https://rocketmq.apache.org/">RocketMQ 下载地址</a></li><li>环境配置</li></ol><ul><li>ROCKETMQ_HOME</li><li>PATH</li><li>NAMESRV_ADDR</li></ul><ol start="3"><li>访问服务</li></ol><ul><li>服务端口: 9876</li><li>管理端口: 127.0.0.1:9876</li></ul><ol start="4"><li>启动服务器</li></ol><ul><li>mqnamesrv.cmd</li><li>mqbroker.cmd</li></ul><ol start="5"><li>RocketMq 整合</li></ol><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">application.yml</button></li><li class="tab"><button type="button" data-href="#pom.xml-3">MessageServiceRocketmqImpl.java</button></li><li class="tab"><button type="button" data-href="#pom.xml-4">MessageListener.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;!--rocketmq--&gt;   &lt;dependency&gt;     &lt;groupId&gt;org.apache.rocketmq&lt;/groupId&gt;     &lt;artifactId&gt;rockemq-spring-boot-starter&lt;/artifactId&gt;     &lt;version&gt;2.2.1&lt;/version&gt;   &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none"># rocketmq 消息rocketmq:  name-server: localhost:9876  # 默认的生产者所属组  producer:    group: group_rocketmq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-3"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl.rocketmq;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import top.wabisabifag.service.MessageService;@Servicepublic class MessageServiceRocketmqImpl implements MessageService {    @Autowired    private RocketMQTemplate rocketMQTemplate;    @Override    public void sendMessage(String id) {        System.out.println("待发送短信的订单已纳入处理队列(rabbitmq topic)：id"+id);         //rocketMQTemplate.convertAndSend("order_id",id);                 /* 异步发送消息队列*/        SendCallback callback = new SendCallback(){            @Override            public void onSuccess(SendResult sendResult){                System.out.println("消息发送成功");            }            @Override            public void onException(Throwable e){                System.out.println("消息发送失败");            }        };        rocketMQTemplate.convertAndSend("order_id",id);    }    @Override    public String doMessage() {        return null;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-4"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl.rocketmq.listener;import org.springframework.stereotype.Component;@Component@RocketMQMessageListener(topic = "order_id",consumerGroup = "group_rocketmq")public class MessageListener implements RocketMqListener{    @Override    public void onMessage(String id){        System.out.println("待发送短信的订单已纳入处理队列(roketmq)：id"+id);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>`<h6 id="4-Kafka-1"><a href="#4-Kafka-1" class="headerlink" title="4. Kafka"></a>4. Kafka</h6><ol><li><a href="https://kafka.apache.org/downloads">Kafka</a></li><li>安装运行</li></ol><ul><li>启动zookeeper 注册器(默认端口:2181): zookeeper-server-start.bat ....\config\zookeeper.properties</li><li>启动kafka (默认端口:9092): kafka-server-start.bat ....\config\server.properties</li><li>创建topic: kafka-topic.bat –create –zookeeper localhost:2181 –replication-factor 1 –partition 1 –topic wabisabifag</li><li>查看topic: kafka-topics.bat –zookeeper 127.0.0.1:2181 –list</li><li>删除topic: kafka-topics.bat –delete –zookeeper localhost:2181 –topic wabisabifag</li><li>生产者功能测试: kafka-console-producer.bat –broker-list localhost:9092 –topic wabisabifag</li><li>消费者功能测试: kafka-console-consumer.bat –bootstrap-server localhost:9092 –topic wabisabifag –from-beginning</li></ul><ol start="3"><li>Kafka 整合</li></ol><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#-2">application.yml</button></li><li class="tab"><button type="button" data-href="#-3">MessageServiceKafkaImpl.java</button></li><li class="tab"><button type="button" data-href="#-4">4</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><pre class="line-numbers language-none"><code class="language-none">&lt;!--Kafka--&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;      &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;    &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><pre class="line-numbers language-none"><code class="language-none">spring:  # Kafka  kafka:    bootstrap-servers: localhost:9092    consumer:      group-id: order<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl.kafka;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import top.wabisabifag.service.MessageService;@Servicepublic class MessageServiceKafkaImpl implements MessageService {    @Autowired    private KafkaTemplate&lt;String,String&gt; kafkaTemplate;    @Override    public void sendMessage(String id) {        System.out.println("待发送短信的订单已纳入处理队列(Kafka)：id"+id);        kafkaTemplate.send("wabisabifag",id);    }    @Override    public String doMessage() {        return null;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-4"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.service.impl.kafka.Listener;import org.springframework.stereotype.Component;@Componentpublic class MessageListener {    // 监听 消费有页面存入 kafka 的缓存数据    @KafkaListener(topics={"wabisabifag"})    public void onMessage(ConsumerRecord&lt;String,String&gt; record){        System.out.println("待发送短信的订单已纳入处理队列(Kafka)：id"+record.value());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="4-监控"><a href="#4-监控" class="headerlink" title="4. 监控"></a>4. 监控</h4><h5 id="1-监控的意义"><a href="#1-监控的意义" class="headerlink" title="1. 监控的意义"></a>1. 监控的意义</h5><ul><li>监控服务状态是否宕机</li><li>监控服务运行指标(内存，虚拟机，线程，请求等)</li><li>监控日志</li><li>管理服务</li></ul><h6 id="1-监控的实施方式"><a href="#1-监控的实施方式" class="headerlink" title="1. 监控的实施方式"></a>1. 监控的实施方式</h6><ul><li>显示监控信息的服务器: 用于获取服务信息，并显示对应的信息</li><li>运行的服务: 启动时，主动上报。告知监控服务器自己需要受到监控</li></ul><h5 id="2-可视化监控平台"><a href="#2-可视化监控平台" class="headerlink" title="2. 可视化监控平台"></a>2. 可视化监控平台</h5><ol><li>Java 提供一个jmx方式获取的监控平台:cmd命令行 输入: jconsole</li><li>也可以通过 http 的 web 程序获取</li></ol><h6 id="1-SpringBoot-Admin"><a href="#1-SpringBoot-Admin" class="headerlink" title="1. SpringBoot Admin"></a>1. SpringBoot Admin</h6><p><a href="https://consolelog.gitee.io/docs-spring-boot-admin-docs-chinese/">SpringBoot Admin 文档</a> 监控管理SpringBoot 应用程序。客服端注册到服务端后，通过 HTTP 请求方式，服务端定期从客服端获取对应信息，通过UI界面战士对应信息</p><div class="tabs" id="pom.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pom.xml-1">pom.xml</button></li><li class="tab"><button type="button" data-href="#pom.xml-2">application.yml</button></li><li class="tab"><button type="button" data-href="#pom.xml-3">application.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pom.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;!--监控 服务端--&gt;    &lt;dependency&gt;      &lt;groupId&gt;de.codecentric&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-admin-starter-server&lt;/artifactId&gt;      &lt;!--和SpringBoot版本对应--&gt;      &lt;version&gt;2.4.5&lt;/version&gt;    &lt;/dependency&gt;&lt;!--监控 客服端--&gt;    &lt;dependency&gt;      &lt;groupId&gt;de.codecentric&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-admin-starter-client&lt;/artifactId&gt;      &lt;version&gt;2.4.5&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-2"><pre class="line-numbers language-none"><code class="language-none"># 向服务端 提交监控spring:  boot:    admin:      client:        url: http://localhost:8080  management:    # 端点功能的开关控制     endpoint:      # 必须对外开放的      health:        show-details: always      # 不对外展示 端口      info:        enabled: false    # 端点功能的暴露        endpoints:      # 在web页面能获取的端口      web:        exposure:          include: "*"      # 启用所有端口      enabled-by-default: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pom.xml-3"><pre class="line-numbers language-none"><code class="language-none">@SpringBootApplication/* 开启监控*/@EnableAdminServerpublic class application {    public static void main(String[] args) {        // 线程安全问题        SpringApplication.run(application.class,args);        // 不接受外部临时参数        SpringApplication.run(application.class);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h5 id="3-监控原理"><a href="#3-监控原理" class="headerlink" title="3. 监控原理"></a>3. 监控原理</h5><ul><li>Actuator 提供SpringBoot 生产就绪功能，通过端点的配置与访问获取端点信息(spring-boot-admin-starter-client 提供spring-boot-admin-starter-actuator)</li><li>端点描述一组监控信息。SpringBoot 提供多个内置端点，也可以根据需要自定义端点信息</li><li>访问当前应用的所有端点信息: /actuator</li><li>访问端点详细信息: /actuator/端点名称</li></ul><p><img src="/../JavaEE/5.png" alt="监控原理1"><br><img src="/../JavaEE/6.png" alt="监控原理2"><br><img src="/../JavaEE/7.png" alt="监控原理3"></p><h5 id="4-自定义监控指标"><a href="#4-自定义监控指标" class="headerlink" title="4. 自定义监控指标"></a>4. 自定义监控指标</h5><ol><li><p>info 端点指标控制</p><div class="tabs" id="application.yml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#application.yml-1">application.yml</button></li><li class="tab"><button type="button" data-href="#application.yml-2">通过类注册为Bean，增加Info的自定义信息</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="application.yml-1"><pre class="line-numbers language-none"><code class="language-none">info:  # 静态信息  # 映射项目名称  webName: @project.artifactId@  version: @project.version@  author: wabisabifag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="application.yml-2"><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.actuator;import org.springframework.stereotype.Component;import java.util.HashMap;@Componentpublic class InfoConfig implements InfoContributor{    @Override    public void contribute(Info.Builder builder){        // withDetail() 单值加载        builder.withDetail("runtime",System.currentTimeMillis());        // withDetails() 多值加载        Map infoMap = new HashMap();        infoMap.put("buildTime","2006");        builder.withDetails(infoMap);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li><li><p>health 端点指标控制</p><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.actuator;import org.springframework.stereotype.Component;import java.util.HashMap;@Componentpublic class HealthConfig extends AbstractHealthIndocator{    @Override    protected void doHealthCheck(Health.Builder builder) throws Exception{        boolean condition = true;        if (condition){            // 设置 health 的状态            builder.status(Status.UP);             /*builder.unknown();            builder.outService();            builder.down();*/            builder.withDetail("runtime",System.currentTimeMillis());            Map infoMap = new HashMap();            infoMap.put("buildTime","2006");            builder.withDetails(infoMap);           }else {            builder.withDetail("上线了吗？","你做梦");            builder.down();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>metrics 端点指标控制</p><pre class="line-numbers language-none"><code class="language-none">@Servicepublic class BookServiceImpl extends ServiceImpl&lt;BookDao Book&gt; implements IBookService{       private Counter counter;    public BookServiceImpl(MeterRegistry meterRegistry){        // 监控的名称        cunter = meterRegistry.counter("用户付费操作次数:");    }    @Override    public boolean delete(Integer id){      // 原子递增      counter.increment();      return bookDao.deleteById(id) &gt; 0;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自定义监控指标</p><pre class="line-numbers language-none"><code class="language-none">package top.wabisabifag.actuator;import org.springframework.stereotype.Component;import java.util.HashMap;@Component/* 声明端点名  id:访问名称     是否默认开启*/@Endpoint(id="pay",enableByDefault=true)public class PayEndpoint {    /* 注解功能: 端点读取时调用该方法*/    @ReadOperation    public Object getPay(){        // 调用业务操作 获取支付相关信息结果，return一个可转换为 json 数据的值        Map payMap = new HashMap();        payMap.put("vip 1","10");        payMap.put("vip 2","100");        payMap.put("vip 3","韭菜嘎嘎多");        return payMap;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="9-MyBatis入门"><a href="#9-MyBatis入门" class="headerlink" title="9.MyBatis入门"></a>9.MyBatis入门</h1><h2 id="1-数据持久层框架"><a href="#1-数据持久层框架" class="headerlink" title="1.数据持久层框架"></a>1.数据持久层框架</h2><h3 id="1-数据持久层"><a href="#1-数据持久层" class="headerlink" title="1.数据持久层"></a>1.数据持久层</h3><p>数据持久化指的将内存中的数据保存到磁盘中加以“固化”，几乎所有的应用系统都需要数据持久化。<br>持久化的实现通过将数据存储在各种关系型数据库中完成。<br>因此在应用框架中，一个相对独立的逻辑层，专注于数据持久化逻辑的实现，该逻辑层通常被称为“数据持久层”。</p><h3 id="2-ORM"><a href="#2-ORM" class="headerlink" title="2.ORM"></a>2.ORM</h3><p>ORM一般指持久化数据和实现对象的映射。<br>ORM框架一般采用XML格式描述对象关系的映射细节，并且将其存放在专门的映射文件中。</p><h2 id="2-Mybatis框架"><a href="#2-Mybatis框架" class="headerlink" title="2.Mybatis框架"></a>2.Mybatis框架</h2><p>Mybatis可以使用简单的XML代码或注解，将原生类型，接口和Jav的POJO配置映射为数据库中的记录。</p><h3 id="MyBatis特点"><a href="#MyBatis特点" class="headerlink" title="MyBatis特点"></a>MyBatis特点</h3><h4 id="1-简单易学"><a href="#1-简单易学" class="headerlink" title="1.简单易学"></a>1.简单易学</h4><p>下载JAR包，配置SQL映射文件</p><h4 id="2-灵活"><a href="#2-灵活" class="headerlink" title="2.灵活"></a>2.灵活</h4><p>SQl语句写在XML文件中，便于统一管理和优化。<br>解除SQL语句与程序代码的耦合，提供数据持久层，将业务逻辑和数据访问逻辑分离，使得系统设计更清晰，易维护，容易单元测试。</p><h4 id="3-提供映射标签"><a href="#3-提供映射标签" class="headerlink" title="3.提供映射标签"></a>3.提供映射标签</h4><p>支持对象和数据库的ORM字段关系映射，支持对象关系组建维护，提供XML标签，支持动态SQL。<br>相比较Hibernate设计理念完全面向POJO，MyBatis更适合网络性业务的灵活变化。</p><h2 id="3-MyBatis工作原理"><a href="#3-MyBatis工作原理" class="headerlink" title="3.MyBatis工作原理"></a>3.MyBatis工作原理</h2><h3 id="1-MyBatis核心类"><a href="#1-MyBatis核心类" class="headerlink" title="1.MyBatis核心类"></a>1.MyBatis核心类</h3><h4 id="1-Configuration"><a href="#1-Configuration" class="headerlink" title="1.Configuration"></a>1.Configuration</h4><p>MyBatis的所有的配置信息都保存在Configuration对象中，XML配置文件中的大部分配置会存储在该类。<br>此外，提供设置配置信息的方法。Configuration可以从XML配置文件中获取属性值，也可以通过程序直接配置。</p><h4 id="2-SqlSessionFactory"><a href="#2-SqlSessionFactory" class="headerlink" title="2.SqlSessionFactory"></a>2.SqlSessionFactory</h4><p>每个居于MyBtis的项目都通过SQL Session Factory的实列为中心</p><h4 id="3-SqlSession"><a href="#3-SqlSession" class="headerlink" title="3.SqlSession"></a>3.SqlSession</h4><p>MyBatis的主要顶层API，SQL Session表示和数据库交互时的会话，完全包含面向数据库执行SQL语句所需要的所有方法。</p><h5 id="SqlSession的实现类"><a href="#SqlSession的实现类" class="headerlink" title="SqlSession的实现类"></a>SqlSession的实现类</h5><h6 id="1-DefaultSqlSession"><a href="#1-DefaultSqlSession" class="headerlink" title="1.DefaultSqlSession"></a>1.DefaultSqlSession</h6><h6 id="2-SqlSessionManager"><a href="#2-SqlSessionManager" class="headerlink" title="2.SqlSessionManager"></a>2.SqlSessionManager</h6><p>SqlSession通过内部存放的执行器（Executor）来对数据进行 CRUD 基础操作。<br>此外，每个线程都应该有自己的SQL Session实列，但SQL Session实列不是线程安全的，因此不能被共享，使用后需要关闭。</p><h4 id="4-Executor"><a href="#4-Executor" class="headerlink" title="4.Executor"></a>4.Executor</h4><p>Executor是MyBatis的执行器，调度的核心，负责SQL语句的生成和查询缓存的维护。</p><h4 id="5-MappedStatement"><a href="#5-MappedStatement" class="headerlink" title="5.MappedStatement"></a>5.MappedStatement</h4><p>Mapped Statement对应配置文件中的 &lt;select | update | delete | insert&gt;节点，描述的是一条SQL语句。</p><h3 id="2-MyBatis工作流程"><a href="#2-MyBatis工作流程" class="headerlink" title="2.MyBatis工作流程"></a>2.MyBatis工作流程</h3><p><img src="/../JavaEE/1.png" alt="Mybatis原理流程"></p><h2 id="4"><a href="#4" class="headerlink" title="4."></a>4.<a href="https://mybatis.net.cn/getting-started.html" title="" target="">Mybatis入门</a></h2><h3 id="1-SQL-1"><a href="#1-SQL-1" class="headerlink" title="1.SQL"></a>1.SQL</h3><h3 id="2-cn-edu-example-mybatis-mapper"><a href="#2-cn-edu-example-mybatis-mapper" class="headerlink" title="2.cn.edu.example.mybatis.mapper"></a>2.cn.edu.example.mybatis.mapper</h3><p>StudentMapper.xml</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;!-- namespace 表示命名空间 --&gt;&lt;mapper namespace="cn.edu.example.mybatis.mapper.StudentMapper"&gt; &lt;!-- 根据学号获取学生信息--&gt; &lt;select id="findStudentByStuno" parameterType="Integer"  resultType="cn.edu.example.mybatis.po.Student"&gt;  Select*from t_student where stuno=#{stuno}  &lt;/select&gt;&lt;/mapper&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-cn-edu-example-mybatis-po"><a href="#3-cn-edu-example-mybatis-po" class="headerlink" title="3.cn.edu.example.mybatis.po"></a>3.cn.edu.example.mybatis.po</h3><p>Student.java</p><pre class="line-numbers language-none"><code class="language-none">package cn.edu.example.mybatis.po;public class Student { private Integer stuno;// 主键，学号 private String stuname;// 学生姓名 private Integer grade;// 年纪 private String dept;// 专业 private String classname; @Override public String toString() {  return "Student [stuno=" + stuno + ", stuname=" + stuname + ", grade=" + grade + ", dept=" + dept    + ", classname=" + classname + "]"; } public Integer getStuno() {  return stuno; } public void setStuno(Integer stuno) {  this.stuno = stuno; } public String getStuname() {  return stuname; } public void setStuname(String stuname) {  this.stuname = stuname; } public Integer getGrade() {  return grade; } public void setGrade(Integer grade) {  this.grade = grade; } public String getDept() {  return dept; } public void setDept(String dept) {  this.dept = dept; } public String getClassname() {  return classname; } public void setClassname(String classname) {  this.classname = classname; }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-cn-edu-example-mybatis-test"><a href="#3-cn-edu-example-mybatis-test" class="headerlink" title="3.cn.edu.example.mybatis.test"></a>3.cn.edu.example.mybatis.test</h3><p>MyBatis.java</p><pre class="line-numbers language-none"><code class="language-none">package cn.edu.example.mybatis.test;import java.io.Reader;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import cn.edu.example.mybatis.po.Student;public class MybatisTest { private static SqlSessionFactory sqlSessionFactory = null; // 初始化SQL Session Factory对象 static {  try {   // 使用Mybatic提供的Resources类加载MyBatis的XML配置文件   Reader reader = Resources.getResourceAsReader("mybatis-config.xml");   // 构建SqlSessionFactory对象    // SqlSessionFactory对象   sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);  } catch (Exception e) {   e.printStackTrace();  } } // 获取SQL Session对象的静态方法 public static SqlSession getSession() {  return sqlSessionFactory.openSession(); } // 根据学号查询学生信息 public void findStudentByStunoTest() {  // 获取SQL Session  SqlSession sqlSession = getSession();  // Sqlsession 执行映射文件中定义的SQL语句，并返回映射结果  Student stu = sqlSession.selectOne("cn.edu.example.mybatis.mapper." + "StudentMapper.findStudentByStuno",    2018020222);  // 输出结果  System.out.println(stu.toString());  // 关闭SQL Session  sqlSession.close(); } public static void main(String[] args) {  MybatisTest test = new MybatisTest();  test.findStudentByStunoTest(); }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-mybatis-config-xml"><a href="#4-mybatis-config-xml" class="headerlink" title="4.mybatis-config.xml"></a>4.mybatis-config.xml</h3><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;configuration&gt; &lt;!-- 配置环境，默认的环境ID为mysql--&gt; &lt;environments default="mysql"&gt;  &lt;!--配置环境ID为mysql的数据库环境 --&gt;  &lt;environment id="mysql"&gt;   &lt;transactionManager type="JDBC"/&gt;   &lt;dataSource type="POOLED"&gt;    &lt;property name="driver" value="com.mysql.cj.jdbc.Driver"/&gt;    &lt;property name="url"    value="jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC"/&gt;    &lt;property name="username" value="root"/&gt;    &lt;property name="password" value="love1314"/&gt;   &lt;/dataSource&gt;  &lt;/environment&gt; &lt;/environments&gt; &lt;!-- 配置映射器的位置--&gt; &lt;mappers&gt;  &lt;mapper resource="cn/edu/example/mybatis/mapper/StudentMapper.xml"/&gt; &lt;/mappers&gt;&lt;/configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-输出"><a href="#5-输出" class="headerlink" title="5.输出"></a>5.输出</h3><p>Student [stuno=2018020222, stuname=����, grade=2018, dept=�����, classname=�����1802]</p><h1 id="10-Mybatis配置"><a href="#10-Mybatis配置" class="headerlink" title="10 Mybatis配置"></a>10 Mybatis配置</h1><h2 id="1-1-属性-properties"><a href="#1-1-属性-properties" class="headerlink" title="1.1 属性(properties)"></a>1.1 属性(properties)</h2><p>properties 都是可以在外部配置且可以动态替换的，既可以在Java属性文件中配置，又可以在properties元素的子元素来传递。</p><h2 id="1-2-设置-settings"><a href="#1-2-设置-settings" class="headerlink" title="1.2 设置(settings)"></a>1.2 设置(settings)</h2><p>常用项目名                       描述                                                            有效值              默认值<br>cacheEnabled                    全局地开启/关闭XML配置文件中的所有映射器已经配置的任何缓存          布尔值</p><p>multipleResultSetsEnabled       是/否允许单一语句返回多结果集</p><p>useColumnLabel                  使用列表标签代替别名。不同的驱动会有不同的表现，具体可参考相<br>                                关驱动文档，或通过测试这两种不同的模式来观察所用驱动的结果。</p><p>useGeneratedKeys                允许JDBC支持自动化生成主键，需要驱动支持。如果设置为true，<br>                                则将强制使用自动生成主键。尽管一些驱动不支持此常用项。</p><p>autoMappbehavior                指定MyBatista应如何自动映射列到字段或属性上。<br>                                None表示取消自动映射；<br>                                Partial只会自动映射没有定义嵌套结果集映射的结果集；<br>                                full会自动映射任意复杂的结果集。</p><p>safeRowBoundsEnabled允许在嵌套语句中使用分页(RowBounds)。如果允许使用，则设置<br>                                为false</p><p>safeResultHandlerEnabled允许在嵌套语句中使用分页(ResultHandler)，如果使用设置为false。</p><p>returnlnstanceForEmptyRow当返回的所有列是空时，MyBatis默认返回null。当开启这个设置时，<br>                                Mybatis会返回一个空实列。也适用于嵌套的结果集。</p><h2 id="3-类型别名-typeAiases"><a href="#3-类型别名-typeAiases" class="headerlink" title="3.类型别名(typeAiases)"></a>3.类型别名(typeAiases)</h2><p>解释：<br>类型别名(typeAiases)是为Java数据类型设置一个短的名称。<br>只和XML配置文件有关，用来减少完全限定名的冗余。</p><p>1. </p><pre class="line-numbers language-none"><code class="language-none">&lt;typeAliases&gt; &lt;typeAliase alias='Student' type='cn.edu.mybatis.po.Student' /&gt;&lt;/typeAliases&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Student 就可以在任何使用 cn.edu.mybatis.po.Student 的地方。<br>2. </p><pre class="line-numbers language-none"><code class="language-none">&lt;typeAliases&gt; &lt;package name="cn.edu.mybatis.po" /&gt;&lt;/typeAliases&gt;@Alias("Student")public class Student{ ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指定一个包名，Mybatis会在报名下搜索需要的JavaBean。</p><p>每一个在包 cn.edu.mybatis.po 中的JavaBean，在没有注解的情况下，都会使用 Bean 的首字母小写的非限定类名来作为她的别名。</p><h2 id="4-环境配置-environments"><a href="#4-环境配置-environments" class="headerlink" title="4.环境配置(environments)"></a>4.环境配置(environments)</h2><p>Mybatis可以配置多种环境，但是每一个 SqlSessionFactory实列只能对应一个环境。如果链接多个数据库，则需要创建多个 SqlSessionFactory实列。</p><p>为指定创建环境，需要将环境作为可选的参数传递给SQLSessionFactoryBuilder：</p><pre class="line-numbers language-none"><code class="language-none">SqlSessionFactory factory =       new SqlSessionFactoryBuilder().build(reader,environment[,properties]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当使用默认环境时：</p><pre class="line-numbers language-none"><code class="language-none">SqlSessionFactory factory =       new SqlSessionFactoryBuilder().build(reader[,properties]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-元素定义配置环境"><a href="#1-元素定义配置环境" class="headerlink" title="1.元素定义配置环境"></a>1.<environments>元素定义配置环境</environments></h3><pre class="line-numbers language-none"><code class="language-none">&lt;environments default="del"&gt;    &lt;environment id="del"&gt;        &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;        &lt;dataSource type="POOLED"&gt;            &lt;!--Java 18 value="com.mysql.cj.jdbc.Driver"--&gt;            &lt;property name="driver" value="com.mysql.cj.jdbc.Driver"/&gt;            &lt;property name="url" value="jdbc:mysql://localhost:3306/mybatis"/&gt;            &lt;property name="username" value="root"/&gt;            &lt;property name="password" value="love1314"/&gt;        &lt;/dataSource&gt;    &lt;/environment&gt;&lt;/environments&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>(1). 默认使用的环境ID (default=“mysql”)</li><li>(2). 每个environment元素定义的环境ID (id=”mysql”)</li><li>(3). 事务管理器的配置(type=”JDBC”)</li><li>(4). 数据源的配置 (type=”POOLED”)</li></ul><h4 id="1-事务管理器和数据源-介绍"><a href="#1-事务管理器和数据源-介绍" class="headerlink" title="1.事务管理器和数据源 介绍"></a>1.事务管理器和数据源 介绍</h4><h5 id="1事务管理器-type-x3D-”-JDBC-x2F-MANAGED-“"><a href="#1事务管理器-type-x3D-”-JDBC-x2F-MANAGED-“" class="headerlink" title="1事务管理器 type=” [JDBC / MANAGED] “"></a>1事务管理器 type=” [JDBC / MANAGED] “</h5><ol><li>JDBC: 使用JDBC的提交和回滚设置，它依赖于从数据源得到的链接来管理事务作用域。</li><li>MANAGED: 这个配置不提交或回滚一个链接，而是让容器来管理事物的整个生命周期。默认情况关闭连接，有些容器不希望如此，需要将closeConnection属性设置为false，来阻止默认的关闭操作。</li><li>使用 Mybatis和Spring不需要配置事务管理器，Spring自带管理器会覆盖配置。</li></ol><h5 id="2-数据源-type-x3D-“-UNPOOLED-x2F-POOLED-x2F-JND-“"><a href="#2-数据源-type-x3D-“-UNPOOLED-x2F-POOLED-x2F-JND-“" class="headerlink" title="2.数据源 type= “ [UNPOOLED / POOLED / JND ] “"></a>2.数据源 type= “ [UNPOOLED / POOLED / JND ] “</h5><p>虽然数据源的配置是可选的，但为使用延迟加载，数据源是必须配置的.</p><ol><li>UNPOOLED: 只用于每次请求时打开和关闭请求，适用于连接池不重要的。</li><li>POOLED: 数据源利用“池”的概念将JDBC链接对象组织起来，避免创建新的链接实列时必须的初始化，节省认证时间。能使并发Web应用快速响应请求的处理方式，</li><li>JNDI: 数据源实现为EJB或应用服务区这类容器中的使用，容器可以集中或在外部配置数据源并设置一个JNDI上下文的应用。</li></ol><h2 id="5-映射器-mappers"><a href="#5-映射器-mappers" class="headerlink" title="5.映射器(mappers)"></a>5.映射器(mappers)</h2><pre class="line-numbers language-none"><code class="language-none">相对于类似路径的资源应引用&lt;mappers&gt; &lt;mapper resource="cn/edu/mybtis/mapper/SrudentMapper.xml" /&gt;&lt;/mappers&gt;统一资源定位符&lt;mappers&gt; &lt;mapper url="file:///var/mappers/SrudentMapper.xml" /&gt;&lt;/mappers&gt;映射器接口实现类的完全限定类名&lt;mappers&gt; &lt;mapper class="cn.edu.mybtis.mapper.SrudentMapper.xml" /&gt;&lt;/mappers&gt;将包内的映射器接口实现全部注册为映射器&lt;mappers&gt; &lt;package name="cn.edu.mybatis.mapper" /&gt;&lt;/mappers&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-mapper-xml-常用SQL标签"><a href="#6-mapper-xml-常用SQL标签" class="headerlink" title="6. mapper.xml 常用SQL标签"></a>6. mapper.xml 常用SQL标签</h2><div class="tabs" id="1.查询语句"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1.查询语句-1">1.查询语句</button></li><li class="tab"><button type="button" data-href="#1.查询语句-2">2.插入语句</button></li><li class="tab"><button type="button" data-href="#1.查询语句-3">3.删除语句</button></li><li class="tab"><button type="button" data-href="#1.查询语句-4">4.修改语句</button></li><li class="tab"><button type="button" data-href="#1.查询语句-5">5.模糊查询</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1.查询语句-1"><pre class="line-numbers language-none"><code class="language-none">&lt;select id="selectByPrimaryKey"  resultMap="BaseResultMap" parameterType="java.lang.String" &gt;   selec...    &lt;/select&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1.查询语句-2"><pre class="line-numbers language-none"><code class="language-none">&lt;insert id="insert" parameterType="pojo.OrderTable" &gt;  insert into ordertable(...)    values(...)&lt;/insert&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1.查询语句-3"><pre class="line-numbers language-none"><code class="language-none">&lt;delete id="deleteByPrimaryKey" parameterType="java.lang.String" &gt;    delete from ordertable        where order_id = #{orderId,jdbcType=VARCHAR}  &lt;/delete&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1.查询语句-4"><pre class="line-numbers language-none"><code class="language-none">&lt;update id="updateByPrimaryKey" parameterType="pojo.OrderTable" &gt;     update ordertable     set             cid = #{cid,jdbcType=VARCHAR},            address = #{address,jdbcType=VARCHAR},            create_date = #{createDate,jdbcType=TIMESTAMP},            orderitem_id = #{orderitemId,jdbcType=VARCHAR}      where           order_id = #{orderId,jdbcType=VARCHAR}  &lt;/update&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1.查询语句-5"><pre class="line-numbers language-none"><code class="language-none">&lt;select id="listProduct" resultType="Product"&gt;    select * from product_        &lt;if test="name!=null"&gt;            where name like concat('%',#{name},'%')        &lt;/if&gt;        &lt;/select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="1-需要配置的属性"><a href="#1-需要配置的属性" class="headerlink" title="1.需要配置的属性"></a>1.需要配置的属性</h4><p>1、id=”xxxx”    表示此段SQL执行语句的唯一标识，也是接口的方法名称 (必须一致才能找到)</p><p>2、parameterType=”xxxx”    表示SQL语句中需要传入的参数，类型要与对应的接口方法的类型一致</p><p>3、resultMap=”xxx”    定义出参，调用已定义的映射管理器的id的值</p><p>4、resultType=”xxxx”    定义出参，匹配普通Java类型或自定义的pojo (出参类型若不指定，将为语句类型默认类型，如语句返回值为int)</p><h3 id="1-if-和-where-标签"><a href="#1-if-和-where-标签" class="headerlink" title="1.if 和 where 标签"></a>1.if 和 where 标签</h3><pre class="line-numbers language-none"><code class="language-none">&lt;select id="listProduct" resultType="Product"&gt;    select * from product_      &lt;where&gt;        &lt;if test="name!=null"&gt;            and name like concat('%',#{name},'%')        &lt;/if&gt;                &lt;if test="price!=null and price!=0"&gt;            and price &gt; #{price}        &lt;/if&gt;      &lt;/where&gt;     &lt;/select&gt;/**作用:标签会进行自动判断：如果任何条件都不成立，那么就在sql语句里就不会出现where关键字（重点）如果有任何条件成立，会自动去掉多出来的 and 或者 or */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-set-标签"><a href="#2-set-标签" class="headerlink" title="2.set 标签"></a>2.set 标签</h3><pre class="line-numbers language-none"><code class="language-none">&lt;update id="updateProduct" parameterType="Product" &gt;    update product_    &lt;set&gt;        &lt;if test="name != null"&gt;name=#{name},&lt;/if&gt;        &lt;if test="price != null"&gt;price=#{price}&lt;/if&gt;     &lt;/set&gt;     where id=#{id}   &lt;/update&gt;/**作用:标签会进行自动判断：如果任何条件都不成立，那么就在sql语句里就不会出现where关键字（重点） */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-trim-标签"><a href="#3-trim-标签" class="headerlink" title="3.trim 标签"></a>3.trim 标签</h3><pre class="line-numbers language-none"><code class="language-none">&lt;select id="listProduct" resultType="Product"&gt;    select *from product_    &lt;trim prefix="WHERE" prefixOverrides="AND |OR "&gt;        &lt;if test="name!=null"&gt;            and name like concat('%',#{name},'%')        &lt;/if&gt;                &lt;if test="price!=null and price!=0"&gt;            and price &gt; #{price}        &lt;/if&gt;    &lt;/trim&gt;      &lt;/select&gt; &lt;update id="updateProduct" parameterType="Product" &gt;    update product_    &lt;trim prefix="SET" suffixOverrides=","&gt;        &lt;if test="name != null"&gt;name=#{name},&lt;/if&gt;        &lt;if test="price != null"&gt;price=#{price}&lt;/if&gt;       &lt;/trim&gt;     where id=#{id}   &lt;/update&gt;/**  trim 用来定制想要的功能，比如where标签就可以用 */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-chooseWhenOtherwise-标签"><a href="#4-chooseWhenOtherwise-标签" class="headerlink" title="4.chooseWhenOtherwise 标签"></a>4.chooseWhenOtherwise 标签</h3><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE mapper    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="com.myjava.pojo"&gt;        &lt;select id="listProduct" resultType="Product"&gt;              SELECT * FROM product_              &lt;where&gt;                &lt;choose&gt;                  &lt;when test="name != null"&gt;                    and name like concat('%',#{name},'%')                  &lt;/when&gt;                            &lt;when test="price !=null and price != 0"&gt;                    and price &gt; #{price}                  &lt;/when&gt;                                  &lt;otherwise&gt;                    and id &gt;1                  &lt;/otherwise&gt;                &lt;/choose&gt;              &lt;/where&gt;        &lt;/select&gt;&lt;/mapper&gt;/**  有任何任何条件符合，就进行条件查询，否则就只使用id&gt;1这个条件 */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-foreach-标签"><a href="#5-foreach-标签" class="headerlink" title="5.foreach 标签"></a>5.foreach 标签</h3><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE mapper    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="com.myjava.pojo"&gt;    &lt;select id="listProduct" resultType="Product"&gt;          SELECT * FROM product_            WHERE ID in                &lt;foreach item="item" index="index" collection="list"                    open="(" separator="," close=")"&gt;                    #{item}                &lt;/foreach&gt;    &lt;/select&gt;&lt;/mapper&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-bind-标签"><a href="#6-bind-标签" class="headerlink" title="6.bind 标签"></a>6.bind 标签</h3><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE mapper    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="com.myjava.pojo"&gt;    &lt;select id="listProduct" resultType="Product"&gt;        &lt;bind name="likename" value="'%' + name + '%'" /&gt;        select * from   product_  where name like #{likename}    &lt;/select&gt; &lt;/mapper&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-sql-片段标签"><a href="#7-sql-片段标签" class="headerlink" title="7.sql 片段标签"></a>7.sql 片段标签</h3><pre class="line-numbers language-none"><code class="language-none">&lt;!--定义sql片段--&gt;&lt;sql id="orderAndItem"&gt;    o.order_id,o.cid,o.address,o.create_date,o.orderitem_id,i.orderitem_id,i.product_id,i.count&lt;/sql&gt;&lt;select id="findOrderAndItemsByOid" parameterType="java.lang.String" resultMap="BaseResultMap"&gt;    select     &lt;!--引用sql片段--&gt;        &lt;include refid="orderAndItem" /&gt;     from           ordertable o     join  orderitem i     on    o.orderitem_id = i.orderitem_id    where         o.order_id = #{orderId}&lt;/select&gt;/**作用是:通过该标签可定义能复用的sql语句片段，在执行sql语句标签中直接引用即可。这样既可以提高编码效率，还能有效简化代码，提高可读性。 */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-Mybatis-多表查询"><a href="#7-Mybatis-多表查询" class="headerlink" title="7. Mybatis 多表查询"></a>7. Mybatis 多表查询</h2><h3 id="1-一对一"><a href="#1-一对一" class="headerlink" title="1. 一对一"></a>1. 一对一</h3><div class="tabs" id="mapper.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#mapper.xml-1">mapper.xml</button></li><li class="tab"><button type="button" data-href="#mapper.xml-2">POJO</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="mapper.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;sql id="ListMap"&gt;    b.id,b.productName,p.proName,b.totalPrice,b.isPayment,b.creationDate&lt;/sql&gt;/**    resultMap: 声明 一个存储多个POJO 对象的图表    property: pojo 对象属性    column: mysql 列名 */&lt;resultMap id="toProviderId" type="top.wabisabifag.entity.SmbmsBill"&gt;    &lt;id property="id" column="id"/&gt;    &lt;result property="productName" column="productName"/&gt;    &lt;result property="totalPrice" column="totalPrice"/&gt;    &lt;result property="isPayment" column="isPayment"/&gt;    &lt;result property="creationDate" column="creationDate"/&gt;    &lt;!-- 相同列名的做区分--&gt;    &lt;association property="smbmsProvider" javaType="top.wabisabifag.entity.SmbmsProvider"&gt;        &lt;result property="proName" column="proName"/&gt;    &lt;/association&gt;&lt;/resultMap&gt;/**    resultMap: 使用声明的图表 */&lt;select id="billShowList" resultMap="toProviderId"&gt;    select  &lt;include refid="ListMap" /&gt;        from smbms_bill b, smbms_provider p    where b.providerId = p.id&lt;/select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mapper.xml-2"><pre class="line-numbers language-none"><code class="language-none">private SmbmsProvider smbmsProvider;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="2-一对多"><a href="#2-一对多" class="headerlink" title="2. 一对多"></a>2. 一对多</h3><div class="tabs" id="mapper.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#mapper.xml-1">mapper.xml</button></li><li class="tab"><button type="button" data-href="#mapper.xml-2">POJO</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="mapper.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;sql id="ListMap"&gt;    b.id,b.productName,p.proName,b.totalPrice,b.isPayment,b.creationDate&lt;/sql&gt;/**    resultMap: id="toProviderId"  声明 一个存储多个POJO 对象的图表    property: pojo 对象属性    column: mysql 列名 */&lt;resultMap id="toProviderId" type="top.wabisabifag.entity.SmbmsBill"&gt;    &lt;id property="id" column="id"/&gt;    &lt;result property="productName" column="productName"/&gt;    &lt;result property="totalPrice" column="totalPrice"/&gt;    &lt;result property="isPayment" column="isPayment"/&gt;    &lt;result property="creationDate" column="creationDate"/&gt;    &lt;!-- 配置集合信息         property: 集合在POJO对象的名称        ofType：当前集合中的数据类型    --&gt;    &lt;collection property="smbmsProviderList" ofType="top.wabisabifag.entity.SmbmsProvider"&gt;        &lt;result property="proName" column="proName"/&gt;    &lt;/collection&gt;&lt;/resultMap&gt;/**     resultMap = "toProviderId" 使用声明的图表 */&lt;select id="billShowList" resultMap="toProviderId"&gt;    select  &lt;include refid="ListMap" /&gt;        from smbms_bill b, smbms_provider p    where b.providerId = p.id&lt;/select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mapper.xml-2"><pre class="line-numbers language-none"><code class="language-none">private List&lt;SmbmsProvider&gt; smbmsProviderList;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="3-多对多"><a href="#3-多对多" class="headerlink" title="3. 多对多"></a>3. 多对多</h3><div class="tabs" id="mapper.xml"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#mapper.xml-1">mapper.xml</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="mapper.xml-1"><pre class="line-numbers language-none"><code class="language-none">&lt;resultMap id="userRoleMap" type="user"&gt;  /* user 信息 */  &lt;id column="userId" property="id"/&gt;  &lt;result column="username" property="username"/&gt;  &lt;result column="password" property="password"/&gt;  &lt;result column="birthday" property="birthday"/&gt;    &lt;collection property="roleList" ofType="top.wabisabifag.entity.role"&gt;          /* user内部roleList 信息 */          &lt;id  property="id" cloumn="roleId"/&gt;          &lt;result property="roleName" column="roleName"/&gt;          &lt;result property="roleDesc" column="roleDesc"/&gt;    &lt;/collection&gt;&lt;/resultMap&gt;&lt;select id="findUserAndRoleAll" resultMap="userRoleMap"&gt;  select * from  user u,                 sys_user_role ur,                 sys_role r    where             u.id=ur.userTd and ur.roleId=r.id &lt;/select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三张表，中间表进行连接作用，仅在查询语句时作用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><ol><li>mybatis<br> 1.一级缓存<br>mapper调用对象代理的session,对数据库查询数据后会存在的数据缓存。<br>出现的问题:<br>      当在同一个方法中连贯query的时候，由于代码非 mapper代理绑定在前一个mapper对象上，会报错。<br>解决方法:<br>      再次赋值绑定到mapper的session上进行query。<br> 2.二级缓存<br>   (1)为什么有二级缓存：<br>   一级缓存，查询的数据不是数据库的数据，而是直接在Client端发送request请求给Tomcat，在服务器同一个线程的缓存中调用，该线程第二次调用时不访问数据库。<br>   (2)二级缓存的存在原理：<br>   二级缓存会重新独立访问数据库，以便获取最新的数据库信息。<br>   出现的问题:<br>   (1)由于Spring不对外开放，mybatis二级缓存会自动关闭对数据库的访问。<br>   (2)当数据操作的方法联动(动态)改动信息的时候，无法获得改动的最新数据。</li></ol><h1 id="Spring-—黑马程序员"><a href="#Spring-—黑马程序员" class="headerlink" title="Spring —黑马程序员"></a>Spring —黑马程序员</h1><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><ol><li><p>思想：<br>IoC  ( inversion of Control) ，控制反转，强调的是原来在程序中创建Bean的权利反转给第三方。Spring接管操纵。<br>DI  （Dependency Injection），依赖注入，强调的bean之间关系，这种关系第三方负责设置。<br>AOP  （Aspect Oriented Programming)，面向切面编程。功能的横向抽取，主要的实现方式就是 Peoxy。</p></li><li><p>Spring提供：<br>IoC，AOP，Web MVC </p></li><li><p>Spring Frameworl技术栈：<br>Data Access：数据访问<br>Data Integration：数据集成<br>Web：Web开发<br>ADP：面向切面编程<br>Aspects：AOP思想实现<br>Core Container：核心容器<br>Test：单元测试，集成测试</p></li><li><p>BeanFactory与ApplicationContext的关系：<br>1.BeanFactory时Spring的早期接口，称为Spring的Bean工厂，Application Context时后期更高级的接口，是Spring容器；<br>2.Application Context早Bean Factory基础上对功能进行了扩展，列如：监听功能，国际化功能等。Bean Factory的API更偏向底层，Application Context的API多数是对底层API的封装；<br>3.Bean的创建主要逻辑和功能都被封装在Bean Factory中，Application Context不仅继承Bean Factory，而且Application Context内部还维护着Bean Factory的引用，所以，ApplicationContext与Bean Factory既有继承关系，又有任何关系；<br>4.bean的初始化实际不同，原始Bean Factory是在首次调用个体Bean是才进行Bean的创建，而Application Context则是配置文件加载，容器一创建就将Bean都实列化并初始化好；</p></li></ol><h2 id="基于xml的Spring应用"><a href="#基于xml的Spring应用" class="headerlink" title="基于xml的Spring应用"></a>基于xml的Spring应用</h2><h3 id="SpringBean-的配置详解"><a href="#SpringBean-的配置详解" class="headerlink" title="SpringBean 的配置详解"></a>SpringBean 的配置详解</h3><pre class="line-numbers language-none"><code class="language-none">xml配置方式功能描述&lt;bean id="" class=""&gt;全限定名配置&lt;bean name=""&gt;通过name设置Bean的别名，通过别名也能直接获取到Bean实列&lt;bean scope=""&gt;Bean的作用范围，Bean Factory作为容器时取值singleton和prototype&lt;bean lazy-init=""&gt;Bean实列化时机，是否延迟加载。Bean Factory作为容器时无效&lt;bean init-method=""&gt;Bean的实列化后自动执行的初始化方法，method指定方法名&lt;bean destory-method=""&gt;Bean实列销毁钱的方法，method指定方法名&lt;bean autowire="byType"&gt;设置自动注入模式，常用的有按照类型byType，按照名字byName&lt;bean factory-bean="" factory-method=""/&gt; 指定那个工厂Bean的那个方法完成Bean的创建<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SpringBean配置"><a href="#SpringBean配置" class="headerlink" title="SpringBean配置"></a>SpringBean配置</h3><pre class="line-numbers language-none"><code class="language-none">&lt;!--    配置UserServiceImpl--&gt;   &lt;bean id="userService" class="top.wabisabifag.service.impl.UserServiceImpl"&gt;       &lt;property name="userDao" ref="userDao"&gt;&lt;/property&gt;   &lt;/bean&gt;&lt;!--    篇日志UserDaoImpl--&gt;   &lt;bean id="userDao" class="top.wabisabifag.service.impl.UserDaoImpl"&gt;&lt;/bean&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>Bean的基础配置<br> 列如：<br>     配置UserDaoImpl由Spring容器负责管理<br>     <bean id="userDao" class="top.wabisabifag.dao.impl.UserDaoImpl"><br><br>     此时存储到Spring容器的Bean的beanName时uerDao，值是UserDaoImpl对象，可根据beanName获取Bean实列<br>     applicationContext.getBean(“userDao”);<br><br>     如不配置id，则Spring会把当前Bean实列的全限定名作为beanName<br>     applicationContext.getBean(“top.wabisabifag.dao.impl.UserDaoImpl”)</bean></p></li><li><p>Bean的别名配置<br> 可以为当前Bean指定多个别名，根据别名可获得Bean对象<br> <bean id="userDao" name="aa,bb" class="top.wabisabifag.dao.impl.UserDaoImpl"><br><br> 此时多个名称可以获得UserDaoImpl实列duixiang<br> applicationContext.getBean(“UserDao”);<br> applicationContext.getBean(“aa”);<br> applicationContext.getBean(“bb”);</bean></p></li><li><p>Bean的范围设置<br> 单纯的Spring环境的作用有两个：Singleton和Prototype<br> Singleton：单列，默认值，Spring容器创建时候就会进行Bean的实列化，并存储到容器内部的单列池中，每次getBean时都是从单列池中获取相同的Bean实列<br> prototype：原型，Spring容器初始化时不会创建Bean实列，当调用getBean时才会实列化Bean，每次getBean都会创建一个新的Bean实列</p></li><li><p>Bean的延迟加载<br> 当lazy-init设置为true，Spring容器创建时不会立即创建Bean实列，等待用到时在创建Bean实列并存储到单列池中，后续在使用该Bean直接从单列池获取，本质上该Bean还是单列<br> <bean id="userDao" class="top.wabisabifag.dao.impl.UserDaoImpl" lazy-init="true"></bean></p></li><li><p>Bean的初始化和销毁方法配置<br> Bean在被实列化后，可执行指定的初始化方法完成一些初始化的操作，Bean在销毁之前也可以执行指定的销毁方法完成一些操作，初始化方法名称和销毁方法名称通过<br> </p><pre class="line-numbers language-none"><code class="language-none">&lt;bean id="userDao" class="top.wabisabifag.dao.impl.UserDaoImpl" init-method="init" destory-method="destroy"/&gt;public class UserDaoImpl implements UserDao{ public UserDaoImpl(){}; public void init(){}; public void destory(){};}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p></li><li><p>Bean的实列化配置<br> Spring的实列化方式：</p></li><li><p>构造方式实列化：底层通过构造方法对Bean进行实列化</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--    配置UserServiceImpl--&gt;   &lt;bean id="userService" class="top.wabisabifag.service.impl.UserServiceImpl"&gt;       &lt;!-- UserDapImpl的有参构造--&gt; &lt;constructor-arg name="name" value="H"&gt;&lt;/constructor&gt; &lt;property name="userDao" ref="userDao"&gt;&lt;/property&gt;   &lt;/bean&gt;&lt;!--    篇日志UserDaoImpl--&gt;   &lt;bean id="userDao" class="top.wabisabifag.service.impl.UserDaoImpl"&gt;&lt;/bean&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>工厂方式实列化：底层通过调用自定义的工厂方式对Bean进行实列化</p></li></ol><ul><li><p>静态工厂方法实列化Bean<br>  id定义一个在impl.UserServiceImpl函数方法下的 userDao 函数方法.<br>  可以被应用,便于在运行前在该方法中的其他功能的运行调用.<br>  </p><pre class="line-numbers language-none"><code class="language-none">&lt;!--    配置UserServiceImpl--&gt; &lt;bean id="user" class="top.wabisabifag.service.impl.UserServiceImpl" factory-method="userDao"&gt;&lt;/bean&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p></p></li><li><p>实列工厂方法实列化Bean</p></li><li><p>实现FavtoryBean规范延迟实列化Bean</p></li></ul><p>2.Spring 的get方法</p><p>3.Spring 配置非定义Bean</p><p>4，Bean 实列化的基本流程</p><p>5.Spring 的后处理器</p><p>6.SpringBean 的生命周期</p><p>7.Spring Ioc 整体流程总结</p><p>8.Spring xml 方式整合第三方框架</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaEE </tag>
            
            <tag> Mybatis </tag>
            
            <tag> MybatisPlus </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyDiary</title>
      <link href="/2023/02/18/MyDiary/"/>
      <url>/2023/02/18/MyDiary/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><pre><code> JavaEE企业级应用开发-题库 </code></pre><p>1.三层架构分别是哪三层，这三个功能层分别是用来干什么的？<br>控制层，服务层，持久层<br>控制层：用来分派用户的请求，从而执行不用的业务逻辑，并根据处理结果调用合适的表现层进行显示<br>业务逻辑层：用来完成具体的业务逻辑操作，并返回处理结果<br>数据持久层：用来完成业务逻辑对数据库的访问任务<br>3、什么是“框架”<br>框架是实现了某应用领域通用功能的底层服务。框架提供了所有应用期望的默认行为的类集合，具体的应用通过重写子类或组装对象来支持应用专用的行为。<br>4、框架的优势有哪些？<br>重用代码，提高软甲生产效率和质量；<br>代码结构的规范化，降低程序员之间沟通和日后维护的成本；<br>知识的积累，可以让经验丰富的人员去设计框架和领域构建，不必为底层编码限制；<br>软件设计人员要注于对领域的了解，使需求分析更充分；<br>允许采用快速原型技术；<br>有利于在一个项目内多人协同工作；<br>大粒度的重用使得平均开发费用降低，开发速度加快，开发人员减少，维护费用降低，而参数化框架使得适应性、灵活性增强<br>5、JavaEE 所使用的主流框架包括哪些？<br>A、 Spring<br>B、 Spring MVC<br>C、 Spring Boot<br>D、 MyBatis<br>答案： ABCD<br>6、maven 是什么？<br>答案： Maven是一个实现项目开发中依赖项目类库下载和同步的项目管理工具。<br>Maven项目可以用于对java项目进行构建和依赖管理，也可以用于帮助项目的编译<br>7、maven 的功能是什么？<br> Maven是一个项目管理工具，主要功能是依赖管理和项目构建。<br>通过在pom.xml中定义坐标后，从Maven仓库自动下载依赖包的方式实现项目的构建。<br>8、配置maven需要修改 .xml文件？<br>A、 pom<br>B、 setting<br>答案： A </p><p>13、简述什么是SpringIOC/DI<br>答案：<br>Spring的核心理念包括IoC（控制反转）和AOP (面向切面编程）。<br>IOC：控制反转；<br>DI：依赖注入。<br>控制反转和依赖注入是对同一件事情的不同描述，只是描述的角度不同。</p><p>14、简述Spring的核心容器<br>答案：<br>Spring框架提供了两种核心容器BeanFactory和ApplicationContext。<br>BeanFactory是Spring框架最核心的接口，是一个用于管理Bean的工厂，或者说是一个类工厂。<br>使用BeanFactory可以完成各种Bean的初始化，以及调用它们的生命周期方法。<br>但由于BeanFactory更趋于底层，实际开发中并不会在代码中体现。<br>ApplicationContext（应用上下文）建立在BeanFactory基础上，是BeanFactory的子接口。</p><p>17、bean标签有哪些常用的属性？请简单介绍他们的功能<br>答案：<br>1.ID属性：Bean的唯一标识，Ioc容器中Bean的ID属性值不能重复<br>2.Name属性：Bean的名称标识，不能重复<br>3.Class属性：Bean的全限定类名，指向类路径下类定义所在的位置<br>35、配置自己电脑上的tomcat，在网页上显示locahost：8080<br>答案：<br>41、请写出jdbc中创建表格的语句<br>答案： jdbcTemplate.execute(“create table temp(user integer,name varchar(100) )”);<br>42、请写出jdbc中修改表格的语句<br>答案： jdbcTemplate.update(“update customers set age=12 where id=?”,new Object[]{id});<br>43、请写出jdbc中向表格增加数据的语句<br>答案： jdbcTemplate.update(“insert into customers value(?,?)”,new Object[]{user.getId(),user.getName()});<br>44、请写出jdbc中从表格删除数据的语句<br>答案： jdbcTemplate.update(“delete from customers where id=7”);<br>45、请写出jdbc中从表格中查询数据的语句<br>答案：  jdbcTemplate.queryForObject(“select name from customers where id=?”,new Object[]{id},String.class);<br>47、配置JdbcTemplate,用execute（）方法创建表格<br>答案：<br>48、用update（）方法实现表格数据更新的操作<br>答案：<br>51、用execute（）方法实现表格创建的操作<br>答案：<br>60、load-on-startup 标签的取值为正数与负数分别代表什么意思<br>答案: servlet的加载优先级和容器是否启动时候加载该servlet。<br>当值为0或者大于0时，代表容器启动时加载该servlet，正数值越小，启动时加载该servlet的优先级越高。<br>为负数，容器启动时不会加载该servlet<br>61、load-on-startup的哪个取值代表加载该servlet的优先级最高<br>A、 1<br>B、 2<br>C、 3<br>D、 4<br>答案： A<br>62、列举springmvc的常用注解<br>答案：<br>1.@Controller  标记在一个类上。使用它标记的类就是一个SpringMVC Controller 对象。<br>2.@RequestMapping 用于处理请求url映射的注解，可用于类或方法上</p><p>答案：<br>66、public &nbsp; class Student {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private String name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private List<string> courses;<br>}<br>使用设值注入和构造注入两种方式获得两个Student的实例对象，使用一个Spring配置文件进行配置，在可执行类Test2中获取并输出这两个Student实例中的姓名和所有课程信息。<br>需要提交的截图<br>Student类，可执行类Test2和Spring配置文件applicationContext.xml部分代码。<br>答案：<br>Public class Student{<br>}</string></p><p>67、什么是pojo对象<br>答案：普通法人Java对象。指没有使用Entity Beans的普通java对象，可以把POJO作为支持业务逻辑的协助类<br>70、简述modelandview是什么类型的对象<br>答案： 包含model属性和view属性，model是ModelMap类型，是LinkedHashMap的子类，view包含视图信息<br>71、简述HttpServletRequest 对象的功能<br>答案： 主要作用是用来接收客户端发送过来的请求信息<br>72、什么事pojo对象<br>答案： 普通的Java对象，通常指没有使用Entity beans 的普通Java对象，可以把POJO作为支持业务逻辑的协助类。</p><p>74、简述SpringMVC请求参数绑定的几种方式。<br>答案：<br>常用的参数绑定方式包括以下几种。<br>1、绑定默认参数类型，如HttpServletRequest、HttpServletResponse、HttpSession、Model/ModelMap等<br>2、 绑定简单参数类型，@RequestParam注解类型来进行间接数据绑定。<br>3、绑定POJO类型。</p><p>75、简述JSON数据交互两个注解的作用。<br>答案：<br>Spring&nbsp;MVC中提供了JSON数据格式转换注解，分别是@RequestBody和@ResponseBody，两个注解的作用分别如下：<br>1、@RequestBody注解：标注在方法的形参上。用于实现接收http请求的JSON数据，将JSON数据转换为Java对象并绑定到控制器Controller的请求处理方法的参数上。<br>2、@ResponseBody注解：标注在方法上。用于将控制器Controller的请求处理方法返回的Java对象转换为指定格式的数据，如：JSON或XML等，最终数据通过Response响应给客户端进行显示。</p><p>83、简述文件上传页面表单需要满足的3个条件。<br>答案：<br>（1）&nbsp;form 标签中设置属性method = “post”。<br>（2）&nbsp;form标签中设置属性enctype=”multipart/form-data”。<br>（3）form标签体中，添加<input type="file">元素，如果需要支持多个文件的上传，则添加属性”multiple”。</p><p>84、MultipartFile类有哪些常用的方法，这些方法的功能分别是什么<br>答案：<br> String getContentType()//获取文件MIME类型<br>InputStream getInputStream()//后去文件流<br>String getName() //获取表单中文件组件的名字<br>String getOriginalFilename() //获取上传文件的原名<br>long getSize() //获取文件的字节大小，单位byte<br>boolean isEmpty() //是否为空<br>void transferTo(File dest) //保存到一个目标文件中。<br>85、如何配置Spring JdbcTemplate<br>答案：<br>Spring框架中使用JdbcTemplate需要在Spring的XML配置文件中对DataSource和JdbcTemplate进行配置。在XML配置文件中定义一个JdbcTemplate的Bean组件，并将dataSource进行注注入，即将JDBC数据库连接时将使用到的数据源指向已经配置好的dataSource。dataSource配置中包含4个属性，各属性含义如下。<br>（1）&nbsp;driverClassName：所使用驱动器名称，对应驱动jar包中的Driver类。<br>（2）&nbsp;url：数据源所在的地址。<br>（3）&nbsp;username：访问数据库的用户名。<br>（4）&nbsp;password：访问数据库的密码。</p><p>86、典型的jdbc操作语句有哪些<br>87、<br>90、mybatis的核心对象有三个，其中两个为SqlSessionFactoryBuilder和SqlSessionFactory,还有一个是什么？，其中SqlSessionFactoryBuilder的build（）方法有几种重构形式？其语法分别为什么？<br>答案：<br>SqlSession<br>build(InputStream inputstream，String environment，Properties properties)<br>build(Reader reader，String environment，Properties properties)<br>build(Configuration config)</p><p>95、简述MyBatis核心配置文件的结构，并对各配置项进行简要描述。<br>答案：<br>100、简述SSM框架整合过程中需要配置哪些XML文件，并对配置内容简要描述。<br>答案：<br>SSM框架整合过程中需要的XML配置文件：<br>括数据库常量配置文件db.properties、<br>Spring配置文件applicationContext.xml、<br>SpringMVC配置文件springmvc-servlet.xml，<br>以及Mybatis配置文件mybatis_config.xml。<br>db.properties文件中对数据库链接的常量，如链接地址、用户名、密码等进行了配置。</p><p>105、在AOP的应用中，包含以下一些专业术语：<br>切面（Aspect）、切入点（Pointcut）、通知/增强处理（Advice）、<br>目标对象（Target）、代理（Proxy）、织入等。请分别简述一下它们的含义。<br>答案：<br>1、切面：切面 =通知+切入点。通常指封装后的用户横向切入到主业务流程中的非业务逻辑实现类，如事务管理、日志记录等。<br>2、通知（Advice）：也就是增强处理，具体指在定义好的切入点处要执行的增强处理程序代码，例如执行日志记录操作的代码。<br>3、切入点（Pointcut）：是指切面与目标业务程序的交叉点，一般切入点指的是类或方法名。<br>4、目标对象（Target）：通知被应用的对象，成为目标。<br>5、&nbsp;织入：指有了切面和待切入的目标对象的切入点以后，把通过生成代理对象的方式将切面代码插入到目标对象上的过程。<br>6、代理（Proxy）对象：是指将通知应用到目标对象后，被动态创建的对象。代理是指为别人的业务，提供增值服务。</p><p>106、简述aspectJ框架中的Spring通知类型有哪些，并简要描述。<br>答案：<br>Spring中对于AOP的通知，共提供了5种类型，具体如下。<br>1、&nbsp;前置通知：在主业务方法（目标方法）执行之前执行，常用于权限管理等功能。<br>2、&nbsp;后置通知：在主业务方法（目标方法）执行之后执行，常用于上传文件、关闭流、删除临时文件等功能。<br>3、&nbsp;异常通知：在主业务方法（目标方法）抛出异常之后，常用于处理异常记录日志等功能。<br>4、环绕通知：围绕着主业务方法（目标方法）执行，常用于日志管理、事务管理等功能。<br>5、最终通知：在主业务方法（目标方法）返回结果之后执行。最终通知无论如何都会在目标方法调用过后执行，即使目标方法没有正常的执行完成。</p><p>108、简述企业级应用常用框架及其整合方案有哪些<br>A、 Struts/Struts2+ Spring + Hibernate。<br>B、 Spring + SpringMVC + SpringJDBCTemplate<br>C、 Spring + SpringMVC + Mybatis<br>D、 Springboot + Mybatis<br>答案： ABCD<br>109、简述Spring容器的工作原理。<br>答案：<br>Spring框架应用时，首先需要在应用程序中定义Bean的实现类，如Bean1、Bean2等，之后需要对Bean进行配置。<br>Bean的实现类和配置信息完成后，在应用程序的运行过程中，<br>第一步，加载Spring的Bean配置文件，读取Bean的配置信息。<br>第二步，Spring容器根据各种形式的Bean配置信息在容器内部建立Bean定义注册表，之后根据注册表加载和实例化Bean，并建立Bean和Bean的依赖关系。<br>第三步，将实例化好的Bean放到Bean缓存池中备用。<br>第四步，应用程序调用Bean实现程序功能。</p><p>110、1.&nbsp;简述Spring的Bean有哪些装配方式。<br>答案：<br>比较常见的三种方式为<br>基于XML的装配<br>基于注解（Annotation）的装配<br>自动装配<br>但最为常用的是基于注解的方式。<br>Xml装配会覆盖注解装配，大项目时xml装配更加灵活和易读</p><p>111、简述Spring JdbcTemplate类的常用方法及返回值。<br>答案：<br>包括execute()、query()、update()方法等。<br>execute()方法：无返回值，用于执行执行SQL语，<br>queryForObject(sql, requiredType)：返回不同类型的对象，例如返回一个String对象。<br>queryForList（String&nbsp;sql，Object[] args，class<t> elementType）：该方法可以返回多行数据的列表，即返回一个装有map的list，每一个map是一条记录，map里面的key是字段名。<br>queryForMap（String&nbsp;sql）：查询的返回结果只能是一条记录，返回0条或多条都会报错，返回结果类型是一个Map，Map中的key值是对应数据库表中column的值。<br>int&nbsp;update（String&nbsp;sql）：该方法是最简单的update方法的重载形式，可以直接执行传入的SQL语句，并返回受SQL语句操作影响的行数。</t></p><p>112、简述MyBatis映射文件中的主要元素及作用<br>答案：<br>cache：对给定命名空间的缓存配置。<br>cache-ref：对其他命名空间缓存配置的引用。<br>resultMap：描述如何从数据库结果集中加载对象。<br>sql：可被其他语句引用的可重用语句块。<br>insert：映射插入语句。<br>update：映射更新语句。<br>delete：映射删除语句。<br>select：映射查询语句。</p><p>113、Spring框架的核心模块不包括以下哪个?<br>A、 Spring Core<br>B、 Spring MVC<br>C、 Spring Data<br>D、 Spring Security<br>答案： C<br>114、在Spring框架中,哪个模块提供了AOP(面向切面编程)功能?<br>A、 Spring Core<br>B、 Spring Context<br>C、 Spring Aspects<br>D、 Spring JDBC<br>答案： C<br>115、在Spring框架中,哪个模块提供了事务管理功能?<br>A、 Spring Core<br>B、 Spring Context<br>C、 Spring Data<br>D、 Spring Transactions<br>答案： D<br>116、在Spring框架中,哪个模块提供了声明式异常处理功能?D. Spring( )<br>A、 Spring Core<br>B、 Spring Context<br>C、 Spring Web<br>D、 Spring MVC<br>答案：<br>117、在Spring框架中,哪个模块提供了数据访问和事务管理的功能?C. Spring Data<br>A、 Spring Core<br>B、 Spring Context<br>C、 Spring Data<br>D、 Spring Transactions<br>答案：<br>118、在Spring框架中,哪个模块提供了Web应用程序开发的功能?<br>A、 Spring Core<br>B、 Spring Context<br>C、 Spring Web<br>D、 Spring MVC<br>答案： C<br>119、在Spring框架中,哪个模块提供了声明式事务管理功能?D. Spring Aspects<br>A、 Spring Core<br>B、 Spring Context<br>C、 Spring Transactions<br>D、 Spring Aspects<br>答案：<br>120、在Spring框架中,哪个模块提供了与Web环境相关的上下文和Bean定义功能?B. Spring Context<br>A、 Spring Core<br>B、 Spring Context<br>C、 Spring Web<br>D、 Spring MVC<br>答案：<br>121、在Spring框架中,哪个模块提供了与JDBC相关的功能?<br>A、 Spring Core<br>B、 Spring Context<br>C、 Spring JDBC<br>D、 Spring Transactions<br>答案： C<br>122、在Spring框架中,哪个模块提供了与ORM框架( )相关的功能?<br>A、 Spring Core<br>B、 Spring Context<br>C、 Spring Data JPA<br>D、 Spring ORM<br>判断题<br>答案： C<br>123、Spring框架是一个基于Java语言的开源框架,用于构建企业级应用程序。 答案:<br>答案： 正确<br>124、Spring框架只支持MySQL数据库。 答案:<br>答案： 错误<br>125、Spring框架的主要特点包括轻量级、非侵入式、紧密耦合、面向切面编程等。 答案:<br>答案： 错误<br>126、Spring框架提供了核心容器、数据访问/集成、Web、AOP、仪表盘等模块。 答案:<br>答案： 正确<br>127、Spring框架的IOC/DI用于控制应用程序中的对象和它们之间的依赖关系。 答案:<br>答案： 正确<br>128、Spring框架的AOP用于实现数据访问和集成。 答案:<br>答案： 错误<br>129、Spring框架提供了一种灵活的并且轻量级的方式来进行事务管理。 答案:<br>答案： 正确<br>130、Spring框架的学习曲线较陡峭,配置较为繁琐。 答案:部分正确<br>答案：<br>131、Spring框架只支持声明式事务管理,不支持编程式事务管理。 答案:<br>答案： 错误<br>132、Spring框架的版本更新比较频繁,不利于项目的稳定性。 答案:部分正确<br>填空题<br>答案： </p><p>133、Spring框架的优点包括提高生产力、提高____质量、降低系统复杂度、增强系统可维护性等。<br>答案： 代码；<br>134、Spring框架的主要特点包括____、非侵入式、松散耦合、面向切面编程、IOC/DI、AOP等。<br>答案： 轻量级；<br>135、Spring框架提供的核心容器包括____和BeanFactory。<br>答案： ApplicationContext；<br>136、Spring框架的IOC/DI用于管理应用程序中的对象和它们之间的____关系。<br>答案： 依赖；<br>137、Spring框架提供的数据访问/集成模块包括JDBC、____Hibernate和MyBatis等。<br>答案： JPA；<br>138、____是Spring框架中用于实现AOP的核心技术。<br>答案： 代理模式；<br>139、Spring框架提供了一种灵活的并且轻量级的方式来进行____管理。<br>答案： 事务；<br>140、在Spring框架中,使用____注解可以启用声明式事务管理。<br>答案： @Transactional；<br>141、Spring框架的AOP用于实现____记录、事务管理等功能。<br>答案： 日志；<br>142、Spring框架提供了一套完整的MVC架构,其中____用于处理各种类型的HTTP请求。<br>答案：<br>控制器(Controller)</p><p>143、Spring MVC是Spring框架的哪个模块?<br>A、 Spring Core<br>B、 Spring AOP<br>C、 Spring Web<br>D、 Spring Data<br>答案： C<br>144、Spring MVC中的M代表什么?<br>A、 Model<br>B、 Method<br>C、 Maven<br>D、 Module<br>答案： A<br>145、在Spring MVC中,控制器(Controller)的作用是什么?<br>A、 处理客户端请求<br>B、 处理服务器响应<br>C、 处理数据库操作<br>D、 处理业务逻辑<br>答案： A<br>146、Spring MVC中的视图(View)是什么?<br>A、 用于展示客户端请求结果的页面<br>B、 用于存储客户端请求数据的对象<br>C、 用于处理控制器逻辑的类<br>D、 用于处理业务逻辑的类<br>答案： A<br>147、Spring MVC中的DispatcherServlet是什么?<br>A、 Spring MVC的启动类<br>B、 Spring MVC的控制器类<br>C、 Spring MVC的核心组件<br>D、 Spring MVC的配置文件<br>答案： C<br>148、在Spring MVC中,@RequestMapping注解的作用是什么?<br>A、 将控制器映射到指定的请求路径<br>B、 将模型对象映射到指定的视图<br>C、 将XML配置文件映射到指定的Java类<br>D、 将Java类映射到指定的数据表<br>答案： A<br>149、在Spring MVC中,可以将多个拦截器组合成一个拦截器链,这个拦截器链的作用是什么?<br>A、 对客户端请求进行多重拦截和过滤<br>B、 对服务器响应进行多重拦截和处理<br>C、 对数据库操作进行多重拦截和校验<br>D、 对业务逻辑进行多重拦截和验证<br>答案： A<br>150、Spring MVC提供了哪些视图解析器(View Resolver)?<br>A、 InternalResourceViewResolver和XmlViewResolver<br>B、 InternalResourceViewResolver和VelocityViewResolver<br>C、 JspViewResolver和VelocityViewResolver<br>D、 JspViewResolver和XmlViewResolver<br>答案： B<br>151、在使用Spring MVC时,如何将表单数据绑定到Java对象上?<br>A、 使用@ModelAttribute注解<br>B、 使用@RequestBody注解<br>C、 使用@PathVariable注解<br>D、 使用@RequestParam注解<br>答案： A<br>152、在Spring MVC中,如何获取客户端请求的参数?<br>A、 使用@RequestParam注解<br>B、 使用@RequestBody注解<br>C、 使用@ModelAttribute注解<br>D、 使用@PathVariable注解<br>答案： A </p><p>153、Spring MVC框架是Spring框架中的一个模块,用于构建基于MVC模式的Web应用程序。 答案:<br>答案： 正确<br>154、Spring MVC框架支持使用Java配置和XML配置两种方式进行配置。 答案:<br>答案： 正确<br>155、在Spring MVC框架中,Controller组件用于映射HTTP请求的URL和处理逻辑。 答案:<br>答案： 正确<br>156、在Spring MVC框架中,DispatcherServlet是一个前置控制器,用于拦截所有的HTTP请求。 答案:<br>答案： 正确<br>157、Spring MVC框架不支持使用RESTful风格的URL进行请求的映射。 答案:<br>答案： 错误<br>158、在Spring MVC框架中,ViewResolver组件用于将逻辑视图名称解析为实际的视图对象。 答案:<br>答案： 正确<br>159、在Spring MVC框架中,可以使用@RequestMapping注解来映射HTTP请求的URL。 答案:<br>答案： 正确<br>160、在Spring MVC框架中,可以使用@ModelAttribute注解来声明模型属性。 答案:<br>答案： 正确<br>161、在Spring MVC框架中,使用@ResponseBody注解可以将返回值转换为JSON或XML格式的数据。 答案:<br>答案： 正确<br>162、在Spring MVC框架中,可以使用@ExceptionHandler注解来处理异常。 答案:正确 </p><p>填空题<br>163、Spring MVC框架中,使用____来拦截所有HTTP请求。<br>答案： DispatcherServlet；<br>164、在Spring MVC框架中,使用____注解来映射HTTP请求的URL路径。<br>答案： @RequestMapping；<br>165、在Spring MVC框架中,使用____来声明一个控制器组件。<br>答案： @Controller；<br>166、在Spring MVC框架中,使用____来声明一个请求处理方法。<br>答案： @RequestMapping；<br>167、在Spring MVC框架中,使用____来声明一个模型属性。<br>答案： @ModelAttribute；<br>168、在Spring MVC框架中,使用____来声明一个响应体。<br>答案： @ResponseBody；<br>169、在Spring MVC框架中,使用____来声明一个返回视图名称。<br>答案： return；<br>170、在Spring MVC框架中,使用____来解析逻辑视图名称。<br>答案： ViewResolver；<br>171、在Spring MVC框架中,使用____来处理参数解析和响应的类型转换。<br>答案： HttpMessageConverter；<br>172、在Spring MVC框架中,使用____来处理异常。<br>答案： @ExceptionHandler </p><p>Mybatis<br>选择题；<br>173、MyBatis是什么类型的框架?<br>A、 ORM框架<br>B、 MVC框架<br>C、 容器框架<br>D、 RPC框架<br>答案： A<br>174、MyBatis框架的核心组件是什么?<br>A、 SqlSessionFactory<br>B、 SqlSession<br>C、 Mapper<br>D、 DataSource<br>答案： A<br>175、在MyBatis框架中的mapper.xml文件内,可以使用哪个标签来标记一个SQL映射语句?<br>A、 <mapper><br>B、 <select>C、 D、 答案： B176、在MyBatis框架中,使用哪个标签来表示一个参数传递的对象?A、 B、 </select><br>C、 <result><br>D、 <parameter><br>答案： D<br>177、在MyBatis框架中,使用哪个标签来表示sql映射语句运行结果与实体类的关系?<br>A、 <mapper><br>B、 <select>C、 D、 答案： C178、MyBatis框架提供了哪些基本的SQL操作?A、 插入、更新、删除、查询B、 授权、备份、还原、恢复C、 排序、聚合、分页、分组D、 操作系统、网络、文件系统、数据库答案： A179、在MyBatis框架中,如何进行多表关联查询?A、 使用标签B、 使用标签C、 使用标签D、 使用标签答案： B180、在使用MyBatis框架进行数据持久化时,如何进行分页操作?A、 使用MySQL的LIMIT语句B、 使用Oracle的ROWNUM语句C、 使用SQL Server的TOP语句D、 使用MyBatis提供的分页插件答案： D181、在使用MyBatis框架时,如何使用动态SQL?A、 使用标签B、 使用、、标签C、 使用、、标签D、 以上所有标签都可以用于动态SQL答案： D182、在使用MyBatis框架时,如何进行批量操作?A、 使用JDBC的批处理APIB、 使用MyBatis框架提供的批量执行器C、 使用数据库的存储过程D、 以上所有方法都可以实现批量操作答案： B183、Mybatis是一款轻量级的ORM框架,可以将Java对象和关系数据库之间进行映射。 答案:答案： 正确184、Mybatis框架使用XML配置文件来定义SQL语句和映射关系。 答案:答案： 正确185、在Mybatis框架中,SqlSessionFactory是一个单例工厂类,用于创建SqlSession对象。 答案:答案： 正确186、Mybatis框架不支持使用注解方式来定义SQL语句和映射关系。 答案:答案： 错误187、在Mybatis框架中,使用Mapper接口来定义SQL语句和映射关系。 答案:答案： 正确188、在Mybatis框架中,使用ResultMap来定义结果集和Java对象之间的映射关系。 答案:答案： 正确189、Mybatis框架支持使用动态SQL来构建复杂的SQL语句。 答案:答案： 正确190、在Mybatis框架中,使用SqlSession的selectOne()方法可以执行查询操作并返回单个结果。 答案:答案： 正确191、在Mybatis框架中,使用SqlSession的update()方法可以执行更新操作。 答案:答案： 正确192、在Mybatis框架中,使用SqlSession的commit()方法可以提交事务。 答案答案： 正确 填空题；193、Mybatis框架的核心组件是____。答案： SqlSessionFactory；194、在Mybatis框架中,可以使用____配置文件来定义SQL语句和映射关系。答案： XML；195、在Mybatis框架中,使用____接口来定义SQL语句和映射关系。答案： Mapper；196、在Mybatis框架中,使用____来执行SQL语句并返回结果。答案： SqlSession；197、在Mybatis框架中,使用____来定义Java对象和数据库表之间的映射关系。答案： ResultMap；198、在Mybatis框架中,使用____来构建动态SQL语句。答案： 动态SQL  ；199、在Mybatis框架中,使用____方法可以执行查询操作并返回单个结果。答案： selectOne()；200、在Mybatis框架中,使用____方法可以执行插入操作。答案： insert()；201、在Mybatis框架中,使用____方法可以执行更新操作。答案： update()；202、在Mybatis框架中,使用____方法可以提交事务。答案： commit() 框架整合 填空题；203、JavaEE中的____(1)是一种用于编写后端逻辑的开发框架。答案： Spring；204、在SSM框架中,(1)用于数据存储与访问,是一个ORM框架。答案： MyBatis；205、在Spring框架中,(1)用于数据访问层的开发,提供了面向对象的方式来操作关系型数据库。答案： Spring；JDBC；206、在Spring框架中,(1)用于事务管理。答案： Spring；Transaction；207、在Spring框架中,(1)用于AOP编程,它能够让开发者在不修改原有代码的情况下,实现对代码的增强。答案： Spring；AOP；208、在Spring框架中,(1)用于处理Web请求,提供了基础的Web开发支持。答案： Spring；MVC；209、在JavaEE中,(1)用于Web应用的实现,是一种基于Servlet的Web框架。答案： Java；Servlet；210、在JavaEE中,(1)是一种Web服务标准,用于实现分布式计算。答案： Web；Service；211、在JavaEE中,(1)用于处理业务逻辑,负责数据的处理和转发。答案： Java；Bean；212、在JavaEE中,(1)____是一种Web应用的部署描述文件,用于描述部署信息和上下文环境。答案： Web.xml； 213、简述SpringMVC多个拦截器的执行流程。答案：当多个拦截器同时正常执行时，拦截器方法的执行顺序为：配置文件中在前面的拦截器的preHandle()方法先执行，然后根据配置文件中拦截器的顺序依次执行拦截器的preHandle()方法，等所有拦截器的preHandle()方法执行完成后，逆序执行每个拦截器的postHandle()方法，当所有postHandle()方法执行完成后，再逆序执行afterCompletion()方法。214、简述SpringMVC拦截器的概念及定义方式。答案：拦截器是一个运行在服务端的程序，主要用于拦截用户的请求并进行相应的处理，即实现对控制器Controller请求的预处理或后处理。通过拦截器可以使得程序在某个动作（action）执行前或执行后，能够先执行或后执行特定的代码逻辑，也可以实现在某个动作（action）执行前阻止某些代码逻辑的执行。通常拦截器类可以通过两种方式来定义。一种是通过实现HandlerInterceptor接口，或继承HandlerInterceptor接口的实现类（如HandlerInterceptorAdapter）来定义；另一种是通过实现WebRequestInterceptor接口，或继承WebRequestInterceptor接口的实现类来定义。215、简述MyBatis的工作流程。答案：（1）&nbsp;解析配置文件，初始化Configuration对象。（2）&nbsp;获得MyBatis应用项目的核心实例SqlSessionFactory。（3）&nbsp;从使用SqlSessionFactory的openSession()方法中获取SqlSession实例，执行具体的SQL请求。（4）&nbsp;SqlSession根据依据Statement ID，在Mybatis配置对象Configuration中获取到对应的MappedStatement对象，接着然后调用Executor来执行具体的数据库操作。将操作数据库的结果按照映射的配置进行转换，可以转换成HashMap对象、简单Java对象（POJO）或者基本数据类型，并将最终结果返回。216、简述MyBatis核心类及其作用。答案：（1）&nbsp;Configuration。MyBatis所有的配置信息都保存在Configuration对象之中，它还提供了设置这些配置信息的方法。（2）&nbsp;SqlSessionFactory。每个基于MyBatis的应用都是以一个SqlSessionFactory的实例为中心的。SqlSessionFactory一旦被创建就应该在应用的运行期间一直存在。（3）&nbsp;SqlSession。SqlSession表示和数据库交互时的会话，完全包含了面向数据库执行SQL命令所需的所有方法。（4）&nbsp;Executor。MyBatis执行器，负责SQL语句的生成和查询缓存的维护。MappedStatement。MappedStatement对应配置文件中的一个&lt;select|update|delete|insert&gt;节点，它描述的就是一条SQL语句。217、比较jdbctemplate和mybatis框架的不同点答案： 操作简单：mybatis是最简单的持久化框架，小巧简单易学；解耦合：mybatis灵活，SQL写在XML里面，从程序代码中彻底分离，降低耦合度，便于统一管理和优化，可重用；灵活：提供多种XML标签，支持各种场景的动态SQL拼接编写，基本能应付所有的操作场景，提供映射标签，支持对象与数据库的ORM字段关系映射（在XML中配置映射关系，也可以使用注解）专注：mybatis可以让开发者专注于SQL本身，是一个足够灵活的DAO层解决方案；内置代码生成器：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用218、Spring框架提供了一种灵活的并且轻量级的方式来进行事务管理。 答案:正确 填空题219、在Spring MVC框架中,使用____来声明一个返回视图名称。答案：return220、在Mybatis框架中,使用SqlSession的update()方法可以执行更新操作。 &nbsp; &nbsp; &nbsp; &nbsp;答案答案：正确221、在Mybatis框架中,使用____方法可以执行更新操作。答案：update()222、JavaEE中的____是一种用于编写后端逻辑的开发框架。答案： Spring；223、在SSM框架中,____用于数据存储与访问,是一个ORM框架。答案： MyBatis；224、在Spring框架中,____用于AOP编程,它能够让开发者在不修改原有代码的情况下,实现对代码的增强。答案： Spring AOP；225、在Spring框架中,____用于处理Web请求,提供了基础的Web开发支持。答案： Spring MVC；226、在JavaEE中,____用于处理业务逻辑,负责数据的处理和转发。答案： Java Bean； 2023/04/16毁灭人类就是拯救人类庸才，具体，锱铢必较的做，认真的。丧气鬼，你的活法到底该如何啊时间和睡眠会掩埋自己的苦痛钝木的人连时间，感觉都丢失，那为何依旧面红耳赤的愧疚2023/04/05物理意义上的三维: 1.长度：长、宽、高，体积 2.数量：个数、指数、质量 3.温度：热量、电能、电阻不是我们存活在三维，是只能存活在三维2023/02/27热爱是除死亡的目的2023/02/17说话概括一件事时尽量详细过程和内容本自己找目标学校的要求而学习软件考试资格证书可以当兼职老师</select></mapper></parameter></result></mapper></p>]]></content>
      
      
      
        <tags>
            
            <tag> Diary </tag>
            
            <tag> [object Object] </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MockingBir</title>
      <link href="/2023/02/06/MockingBir/"/>
      <url>/2023/02/06/MockingBir/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MockingBir的部署"><a href="#MockingBir的部署" class="headerlink" title="MockingBir的部署"></a>MockingBir的部署</h1><h6 id="开源作者：babysor"><a href="#开源作者：babysor" class="headerlink" title="开源作者：babysor"></a>开源作者：babysor</h6><p>操作系统：Win10</p><p>硬件：cpu</p><p>2.安装</p><blockquote><p>如果已经确认安装过，请忽略该步骤</p></blockquote><ul><li><p>获取<a href="https://github.com/babysor/MockingBird">GitHub开源代码库</a></p></li><li><p>安装Anacodna， Python 3.8 或更高，参考<a href="https://zhuanlan.zhihu.com/p/348120084">中文教程</a>，在Anaconda中创建并切换到独立虚拟环境后，进行以下步骤。</p></li><li><p>安装 PyTorch， 直接<a href="https://pytorch.org/get-started/locally/">官网下载</a>。</p></li></ul><blockquote><p>验证本步骤是否成功：在系统任意路径下运行python，进入交互式编程界面后输入&nbsp;<code>import torch;</code>, 回车，&nbsp;<code>torch.cuda.is_available()</code>, 回车。如果都是成功的话，可以进行下一步。</p></blockquote><p><img src="https://github.com/babysor/MockingBird/wiki/imgs/torch1.png" alt="torch1"></p><ul><li><p>安装 ffmpeg。 1）<a href="http://ffmpeg.org/download.html#build-windows">下载</a>&nbsp;选择点击打开链接Windows对应的版本下载 2）解压 ffmpeg-xxxx.zip 文件到指定目录； 3）将解压后的文件目录中 bin 目录（包含 ffmpeg.exe ）添加进 path 环境变量中； 4）进入 cmd，输入 ffmpeg -version，可验证当前系统是否识别 ffmpeg 以及查看 ffmpeg 的版本</p></li><li><p>运行pip install -r requirements.txt 来安装剩余的必要包。</p></li></ul><blockquote><p>确保本步骤不报错</p></blockquote><ul><li>安装 webrtcvad 用 pip install webrtcvad-wheels。</li></ul><blockquote><p>确保本步骤不报错</p></blockquote><p>3.下载社区训练好的模型</p><p>在以下选择中下载模型</p><table><thead><tr><th>作者</th><th>下载链接</th></tr></thead><tbody><tr><td>@miven</td><td><a href="https://pan.baidu.com/s/1PI-hM3sn5wbeChRryX-RCQ">百度网盘 请输入提取码</a>&nbsp;提取码：2021</td></tr></tbody></table><blockquote><p>该模型与最新代码有兼容性问题 请查阅&nbsp;<a href="https://github.com/babysor/MockingBird/issues/37">https://github.com/babysor/MockingBird/issues/37</a>&nbsp;解决</p></blockquote><p>下载完成后，确保&nbsp;<code>xxx.pt</code>&nbsp;格式的文件放在代码库的&nbsp;<code>synthesizer\saved_models</code>文件夹下，<code>saved_models</code>如不存在请新建</p><p>4.运行demo_toolbox</p><p>在代码库路径下，运行&nbsp;<code>python demo_toolbox.py -d .\samples</code>&nbsp;尝试使用工具箱, 由于没有下载任何数据集，这里的功能比较简单：</p><ol><li><p>确保界面左边中间的&nbsp;<code>synthesizer</code>&nbsp;选择了上一步中&nbsp;<code>xxx.pt</code>&nbsp;文件对应的模型。</p></li><li><p>点击<code>Record</code>录入你的5秒语音</p></li><li><p>输入任意文字</p></li><li><p>点击&nbsp;<code>Synthesizer and vocode</code>&nbsp;等待效果输出较简单：</p></li><li><p>确保界面左边中间的&nbsp;<code>synthesizer</code>&nbsp;选择了上一步中&nbsp;<code>xxx.pt</code>&nbsp;文件对应的模型。</p></li><li><p>点击<code>Record</code>录入你的5秒语音</p></li><li><p>输入任意文字</p></li><li><p>点击&nbsp;<code>Synthesizer and vocode</code>&nbsp;等待效果输出</p></li></ol><h1 id="5-遇到的问题总结"><a href="#5-遇到的问题总结" class="headerlink" title="5.遇到的问题总结"></a>5.遇到的问题总结</h1><p>1.元数据流报错:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在CSDN找到下面的方式无法解决问题。</p><pre><code>pip install setuptools==57.5.0 -i https://pypi.tuna.tsinghua.edu.cn/simple </code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解决：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在对比开源作者的文件时，发现作者main主支内容和本地文件不一致，在其他分支有完整的项目。</p><p>2.&nbsp;&nbsp;报错：</p><p>&nbsp;&nbsp;&nbsp;&nbsp; cpu硬件没有运行，以及文件的训练数据无法找到。</p><pre><code>Arguments:    datasets_root:    None    enc_models_dir:   encoder\saved_models    syn_models_dir:   synthesizer\saved_models    voc_models_dir:   vocoder\saved_models    cpu:              False    seed:             None    no_mp3_support:   FalseWarning: you did not pass a root directory for datasets as argument.The recognized datasets are:        LibriSpeech/dev-clean</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解决：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将 开发者提供的云盘资料下级文件全部导入该项目的主项目下，不用像作者要求的创建文件夹。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我自行创建文件夹同时将所有文件放在 /saved_models 下，反而导致文件的路径出错。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> GitHub-Openner </category>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据分析</title>
      <link href="/2023/01/24/Python%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96/"/>
      <url>/2023/01/24/Python%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Python数据分析与应用"><a href="#Python数据分析与应用" class="headerlink" title="Python数据分析与应用"></a>Python数据分析与应用</h1><h2 id="1-前置工作"><a href="#1-前置工作" class="headerlink" title="1.前置工作"></a>1.前置工作</h2><h3 id="1-部署环境"><a href="#1-部署环境" class="headerlink" title="1.部署环境"></a>1.部署环境</h3><h4 id="1-python环境"><a href="#1-python环境" class="headerlink" title="1. python环境"></a>1. python环境</h4><h4 id="2-jupyter-notebook编译器"><a href="#2-jupyter-notebook编译器" class="headerlink" title="2. jupyter notebook编译器"></a>2. jupyter notebook编译器</h4><pre><code>    1. 在cmd命令行下载 jupyternotebook        <pre class="line-numbers language-none"><code class="language-none">pip install jupyter -i https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>    2.进入jupyter notebook页面        jupyter是Python自带的多语言编译工具。        通过浏览器方式在本地进行编译工作。        PS：在浏览器运行工作时，不能关闭cmd命令行。            cmd命令行作为服务器功能支撑jupyternotebook实现运行。</code></pre><h4 id="3-Markdown"><a href="#3-Markdown" class="headerlink" title="3.Markdown"></a>3.Markdown</h4><pre><code>Markdown是一门使用普通文本编辑器编写的标记语言。</code></pre><h5 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h5><pre><code>'#' 可以控制标题字体大小，共 6 级。</code></pre><h5 id="2-列表"><a href="#2-列表" class="headerlink" title="2.列表"></a>2.列表</h5><pre><code>排序功能:    1.有序排序        1.        2.    2.无序排序        -        *        -</code></pre><h5 id="3-字体"><a href="#3-字体" class="headerlink" title="3.字体"></a>3.字体</h5><pre><code>文档中文字突出部分内容，使用加粗或斜体格式，是的部分功能醒目。通常使用的符号：    加粗：'*'     斜体：'_' </code></pre><h5 id="4-表格"><a href="#4-表格" class="headerlink" title="4.表格"></a>4.表格</h5><pre><code>Markdown绘制表格。列：    python | R | MATLAB |    --------|--------|-----|    接口统一 | 接口众多 | 自由度打 |解释：    第一行为表头    第二行分隔表头和主题部分    第三部分开始，每一行代表一个表格。    列与列间用 '|' 分隔开，每一行结尾也必须 '|'符号隔开。</code></pre><h5 id="5-数学公式编辑"><a href="#5-数学公式编辑" class="headerlink" title="5.数学公式编辑"></a>5.数学公式编辑</h5><pre><code>LaTex 是写科研论文的必备工具之一，课题插入数学公式。1. 在文本中插入数学公式前，应使用 '$ ... $'。列：    质能方程的LeTex表达式为: ‘SE = mc^2$' .2. 如果插入一个数学区块，应使用 '$$ ... $$'.列：    $$z=\frac{x}{y}$$     ===&gt;&gt;       z = x / y</code></pre><h4 id="导出功能"><a href="#导出功能" class="headerlink" title="导出功能"></a>导出功能</h4><pre><code>在UI界面，可以导出多种格式文件。</code></pre><h3 id="2-Python数据分析常用库"><a href="#2-Python数据分析常用库" class="headerlink" title="2.Python数据分析常用库"></a>2.Python数据分析常用库</h3><h4 id="1-NumPy-维度称为轴）"><a href="#1-NumPy-维度称为轴）" class="headerlink" title="1.NumPy (维度称为轴）"></a>1.NumPy (维度称为轴）</h4><p>NumPy是Numerical Python缩写，Python科学计算机的基础库。<br>主要内容：<br>    1. 快速高效的多维数组对象 —————— ndarray。<br>    2. 对数组进行元素级计算 和 直接对数组进行数学运算的函数。<br>    3. 读写硬盘上基于数组的数组的数据集的工具。<br>    4. 线性代数运算，傅里叶变换和随机数生成等功能。<br>    5. 将C，C++,Fortran代码集成到Python项目的工具。<br>除快速处理数组处理能力外，作为算法之间传递数据的容器。<br>在Python内部效率高于其他数据结构，在低级（其他）语言中可以直接操作数组中的数据。</p><h5 id="Python提供的array和list不同，array直接保存数值，和C语言的一维数组类似，但不支持多维数组，也无各种运算函数，不适合数值运算。"><a href="#Python提供的array和list不同，array直接保存数值，和C语言的一维数组类似，但不支持多维数组，也无各种运算函数，不适合数值运算。" class="headerlink" title="Python提供的array和list不同，array直接保存数值，和C语言的一维数组类似，但不支持多维数组，也无各种运算函数，不适合数值运算。"></a>Python提供的array和list不同，array直接保存数值，和C语言的一维数组类似，但不支持多维数组，也无各种运算函数，不适合数值运算。</h5><h4 id="1-创建数组对象"><a href="#1-创建数组对象" class="headerlink" title="1.创建数组对象"></a>1.创建数组对象</h4><pre><code>NumPy提供两种基本的对象：    ndarray(N-dimensional Array):存储单一数据类型的多维数组。    ufunc(Universal Function):对数组进行处理的函数。 </code></pre><h5 id="1-数组属性"><a href="#1-数组属性" class="headerlink" title="1.数组属性"></a>1.数组属性</h5><ol><li>ndim: 返回int。 表示数组的维数。</li><li>shape: 返回tuple。  表示数组的形状，对于n行m列的矩阵，形状为（n,m)。</li><li>size: 返回int。  表示数组的元素的总数，等于数组的形状中个元素的积。</li><li>dtype： 返回date-type。  表示数组中元素的数据类型。</li><li>itemsize： 返回int。</li></ol><h5 id="2-数组创建"><a href="#2-数组创建" class="headerlink" title="2.数组创建"></a>2.数组创建</h5><p>NumPy库<br>import numpy as np</p><ol><li>arange()<br> start<br> stop<br> step<br> dtype</li></ol><p>NumPy提供的array函数可以创建一维数组或多维数组。<br>格式：</p><pre class="line-numbers language-none"><code class="language-none">numpy.array(object,dtype=None,*,copy=True,order='K',subok=False,ndmin=0,like=None)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明表：</p><ol><li>object 接受 array_like.  表示所需创建的数组对象。无默认值</li><li>dtype 接受data_type.  表示数组所需的数据类型，如果未给定，选择保存对象所需的最小的数据类型。默认为 None</li><li>ndmin 接受int。  用于指定生成数组应该具有的最小维数。默认 0</li></ol><h6 id="1-创建数组并查看数组属性"><a href="#1-创建数组并查看数组属性" class="headerlink" title="1. 创建数组并查看数组属性"></a>1. 创建数组并查看数组属性</h6><pre class="line-numbers language-none"><code class="language-none">import numpy as np #导入NumPy库arr1 = np.array([[1,2,3,4],[2,3,4,5],[3,4,5,6]]) #创建一维数组 print('创建的数组为:\n',arr1) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建的数组为:<br> [[1 2 3 4]<br> [2 3 4 5]<br> [3 4 5 6]]</p><pre class="line-numbers language-none"><code class="language-none">print('数组形状为：',arr1.shape) #查看数组形状<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数组形状为： (3, 4)</p><pre class="line-numbers language-none"><code class="language-none">print('数组元素类型为：',arr1.dtype) #查看数组元素类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数组元素类型为： int32</p><pre class="line-numbers language-none"><code class="language-none">print('数组元素个数：',arr1.size) #查看数组元素个数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数组元素个数： 12</p><pre class="line-numbers language-none"><code class="language-none">print('数组每个元素存储空间为：',arr1.itemsize) #查看数组每一个元素的存储空间<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数组每个元素存储空间为： 4</p><h6 id="2-重新设置数组的shape属性"><a href="#2-重新设置数组的shape属性" class="headerlink" title="2.重新设置数组的shape属性"></a>2.重新设置数组的shape属性</h6><pre class="line-numbers language-none"><code class="language-none">arr1.shape = 4,3  #车厢内设置shapeprint('重新设置shape后的arr1为：\n',arr1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重新设置shape后的arr1为：<br> [[1 2 3]<br> [4 2 3]<br> [4 5 3]<br> [4 5 6]]</p><h6 id="Arange"><a href="#Arange" class="headerlink" title="Arange"></a>Arange</h6><pre><code>除了array函数创建数组之外，还可以用arange函数创建数组。arange函数类似Python自带的range，通过指定通过指定开始值，终值和步长来创建一维数组，创建的数组不包含终值。</code></pre><p>格式：</p><pre class="line-numbers language-none"><code class="language-none">numpy.arange([start,]stop,[step,]dtype=None,*,like=Node)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明表：</p><ol><li>start int                表示数组的开始值，生成的数组包括该值</li><li>stop  int                表示数值的终值，生成的数组不包括该值。无默认</li><li>step  int                表示在数组中，值之间的步长。默认1</li><li>dtype 接受数据类型        表示输出数值的类型。默认为None</li></ol><h6 id="3-使用arange函数创建数组"><a href="#3-使用arange函数创建数组" class="headerlink" title="3.使用arange函数创建数组"></a>3.使用arange函数创建数组</h6><pre class="line-numbers language-none"><code class="language-none">print('使用arange函数创建的数组为：\n',np.arange(0,1,0.1))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用arange函数创建的数组为：<br> [0. 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9]</p><p>2.linspace()      //等比数列<br>    start<br>    stop<br>    num<br>    dtype</p><pre><code>linspace函数通过指定开始值，终值和元素个数来创建一维数组，默认包括终值（和arange的区别）</code></pre><p>格式:</p><pre class="line-numbers language-none"><code class="language-none">numpy.linspace(start,stop,num=50,endpoint=True,retstep=False,dtype=None,axis=0)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明表：</p><ol><li>start </li><li>stop</li><li>num    int                   表示生成的样本数。 默认为50</li><li>dtype  接受数据类型           表示输出数值的类型。默认为None</li></ol><h6 id="4-使用linspace函数创建数组"><a href="#4-使用linspace函数创建数组" class="headerlink" title="4.使用linspace函数创建数组"></a>4.使用linspace函数创建数组</h6><pre class="line-numbers language-none"><code class="language-none">print('使用linspace函数创建的数值为：\n',np.linspace(0,1,12))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用linspace函数创建的数值为：<br> [0.         0.09090909 0.18181818 0.27272727 0.36363636 0.45454545<br> 0.54545455 0.63636364 0.72727273 0.81818182 0.90909091 1]<br>3.logspace(,,)</p><p>4.zeros((,))     // 二维 行列<br>5.ones()<br>6.eye()        //行列  对角 1<br>7.diag()       //二维 数组==&gt;&gt;行列<br>8.full( (,), )   //行列 填充<br>  full_like( array,3 )</p><h5 id="数组数据类型"><a href="#数组数据类型" class="headerlink" title="数组数据类型"></a>数组数据类型</h5><p>bool<br>inti<br>int8<br>int16<br>int32<br>int64<br>uint8<br>uint16<br>uint32<br>uint64<br>float16<br>float32<br>float64/float<br>complex64          //复数<br>complex128/complex</p><h5 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h5><p>1.random<br>  np.random()<br> 1.seed<br> 2.permutation<br> 3.shuffle<br> 4.binomial<br> 5.normal<br> 6.beta<br> 7.chisquare<br> 8.gamma<br> 9.uniform<br> 10.sample<br>      用什么当为样本，生成类似的数据</p><p>2.rand        //生成服从均匀分布的随机数<br>     numpy.random.randint(low,high=None,size=None,dtype=int)<br>  列：<br>       np.random.rand(2,3)<br>       array([[0.38786527, 0.22297469, 0.88171169],<br>       [0.75717494, 0.8715018 , 0.888392  ]])<br>    列：<br>        np.random.randint(10,size=(3,5))  //生成随机数  size规定行列<br>        array([[1, 8, 5, 6, 3],<br>            [8, 9, 1, 7, 7],<br>            [8, 9, 6, 0, 3]])<br>3.randn      //生成服从正态分布的随机数</p><h5 id="通过索引访问数组"><a href="#通过索引访问数组" class="headerlink" title="通过索引访问数组"></a>通过索引访问数组</h5><p>1.np.repeat(b,1,axis=0)       //数组 维度 行列排序 </p><p>一维数组索引<br>    1.arange[3:5]<br>    2.arange[:5]<br>    3.arange[2:4]=100,101<br>    4.arr[1:-1:2]          // 第三个 步长<br>    5.arr[5;1：-1]         // 步长为负数时，开始索引大于结束<br>多维数组索引<br>    1.arr[0,3:5]<br>    2.arr[1:,2:]          // 第二组开始 的 每行第三数据遍历<br>    3.arr[:,2]           // 每组的第三数据<br>整数序列索引和布尔值索引访问多维数组<br>    1.arr[[(0,1,2),(1,2,3)]]  // n组的第n个数据<br>    2.arr[1:,(0,2,3)]       // 第二数组开始，地标数据<br>    3.   mask=np.array([1,0,1],dtype=np.bool)<br>        // mask是一个布尔数组 用它索引第0，2行中第2列的元素<br>        arr[mask,2]         //  [3,9]<br>变换数组的形态<br>np.reshape(a,newsahpe,order=’c’)<br>    1.a        //需要变换形状的数组<br>    2.newshape   //变换后的形态<br>1.arr.reshape(3.4)<br>2.ravel        //展平<br>3.flatten/flatten(‘F’)     // 横向展平 纵向展平<br>3.hstack/vstack(arr1,arr2)  // 矩阵横向贴合/纵向贴合<br>4.concatenate((arr1,arr2),axis=1/0)  // 矩阵横向贴合/纵向贴合<br>5.hsplit/vsplit<br>   列：<br>     arr=np.arrage(16).reshape(4,4)<br>     np.hsplit(arr,2)        //横向/纵向分割成 2 个数组在同一个集合<br>6.split(arr,2,axis=1/0)     //横向(整块)/纵向(多块)切割数据</p><h5 id="Numpy矩阵和通用函数"><a href="#Numpy矩阵和通用函数" class="headerlink" title="Numpy矩阵和通用函数"></a>Numpy矩阵和通用函数</h5><h6 id="1-创建矩阵"><a href="#1-创建矩阵" class="headerlink" title="1.创建矩阵"></a>1.创建矩阵</h6><p>import numpy as np</p><p>1.mat(‘1,2,3;4,5,6;7,8,9’)<br>2.matrix([[1,2,3],[4,5,6],[7,8,9]])<br>3.bmat(‘arr1,arr2;arr1,arr2’)        //数据贴合</p><h6 id="2-矩阵运算"><a href="#2-矩阵运算" class="headerlink" title="2.矩阵运算"></a>2.矩阵运算</h6><p>1.矩阵和数相乘<br>2.矩阵相加<br>3.矩阵相减<br>4.矩阵相乘<br>    a矩阵的横数组与b矩阵的纵数组单位相乘的个个和为c矩阵的点数据</p><h6 id="3-查看矩阵属性"><a href="#3-查看矩阵属性" class="headerlink" title="3.查看矩阵属性"></a>3.查看矩阵属性</h6><p>1.arr.T    //转置矩阵         每行的数据颠倒数据顺序<br>2.arr.H   //共轭转置矩阵       每行的同角标数据归置同行数据<br>3.arr.I   //逆矩阵<br>4.arr.A   //二维数组的视图      </p><h5 id="ufunc函数-（对所有元素进行操作的函数"><a href="#ufunc函数-（对所有元素进行操作的函数" class="headerlink" title="ufunc函数 （对所有元素进行操作的函数"></a>ufunc函数 （对所有元素进行操作的函数</h5><h6 id="1-四则运算"><a href="#1-四则运算" class="headerlink" title="1.四则运算"></a>1.四则运算</h6><pre><code>arr数据组</code></pre><h6 id="2-比较运算"><a href="#2-比较运算" class="headerlink" title="2.比较运算"></a>2.比较运算</h6><h6 id="3-逻辑运算"><a href="#3-逻辑运算" class="headerlink" title="3.逻辑运算"></a>3.逻辑运算</h6><ol><li>np.all(x==y)<br> 用于测试所有的数组元素是否为真</li><li>np.any(x==y)<br> 用于测试任何元素是否为真</li></ol><h6 id="4-ufunc函数的广播机制"><a href="#4-ufunc函数的广播机制" class="headerlink" title="4.ufunc函数的广播机制"></a>4.ufunc函数的广播机制</h6><pre><code>计算前提：数组形状一致。四原则：1. 让所有的输入的数组向其中最长的shape数组看齐，如数组的shape不足，在前面加 1 补齐2.输出数组的shape是输入数组shape在各个轴上的最大值的组合。3.数组输入长度的某个轴的长度和输出的长度或输出数组的对应轴的长度相同，或输入数组的某个轴的长度为1，那么这个数组能够用于计算。4.当输入数组的某个长度为1，将使此轴上的第一组值进行运算。</code></pre><h6 id="5-利用NumPy进行统计分析"><a href="#5-利用NumPy进行统计分析" class="headerlink" title="5.利用NumPy进行统计分析"></a>5.利用NumPy进行统计分析</h6><ol><li>读/写文件<br> numpy.save(file,arr,allow_pickle=true,fix_imports=true)</li></ol><p>(1) 存入文件</p><pre class="line-numbers language-none"><code class="language-none">import numpy as nparr=np.arange(100).reshape(10,10)  # 创建数组np.save('../arr',arr) # 保存数组    可保存多个数组arr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>(2) 读取文件</p><pre class="line-numbers language-none"><code class="language-none"># 单个文件读取loaded_data=np.load('../arr.npy')# 多个文件读取loaded_data=np.load('../arr.npz')loaded_data['arr_0']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>文本读取格式<br>(1) savetxt<br> numpy.savetxt(fname,X,fmt=’%.18e’,delimiter=’’,newline=’\n’,header=’’,<br>footer=’’,commentd=’#’,encoding=None)</p><p> fname:文件名，接受Str<br> X：数据组，接受array_like<br> delimiter;表示数据分割符，接受str</p></li></ol><p>(2).loadtxt<br>    numpy.loadtxt(fname,dtype=&lt;class ‘float’&gt;,comments=’#’,delimiter=None,converters=None,skiprows=0,usecols=None,unpack=Flase,ndimn=0,encoding=’bytes’,max_rows=None,*,like=None)</p><p>(3).genfromtxt<br>    类似于loadtxt,面向结构化数据和缺失数据。</p><h6 id="6-使用函数进行简单的统计分析"><a href="#6-使用函数进行简单的统计分析" class="headerlink" title="6.使用函数进行简单的统计分析"></a>6.使用函数进行简单的统计分析</h6><p>除使用通用函数对数进行比较、逻辑等运算，还可以使用统计函数对数组进行排序、去重与重复、求最值、平均值等统计分析。</p><ol><li><p>排序<br>(1)直接排序(sort)<br>直接排序：arr.sort()<br>横轴排序：arr.sort(axis=1)<br>竖轴排序：arr.sort(axis=0)<br>解释：对数值直接排序<br>(2)简介排序(argsort、lexsort)<br>排序索引排序：arr.argsort()<br>多个键数组排序：np.lexsort((a,b,c))     # 多个键排序的顺序按照最后一个传入的键顺序排序数据<br>解释：对多个键数据集进行排序</p></li><li><p>去重与重复<br>(1)去重<br>np.unique(array)<br>(2)重复<br>np.tile(A,reps)      # 输入的数组(array):A    数组重复的次数:reps<br>np.repeat(a,repeats,axis=None)         # 输入的数组:a  数组重复的次数:repeats  复制的方向: 0/1</p></li><li><p>常用的统计函数<br>(1)聚合计算<br>解释：直接显示结果<br>计算数组的和：np.sum()<br>沿纵轴求和：np.sum(axis=0)<br>沿横轴求和：np.sum(axis=1)</p></li></ol><p>计算数组均值：np.mean()<br>沿纵轴计算数组均值：np.mean(axis=0)<br>沿横轴计算数组均值：np.mean(axis=1)</p><p>计算数组标准差：np.std()<br>计算数组方差：np.var()</p><p>计算数组最小值：np.min()<br>计算数组最大值：np.max()<br>返回数组最小值索引：np.argmin()<br>返回数组最大值索引：np.argmax()<br>(2)非聚合计算<br>解释：产生一个中间结果组成的数组<br>计算元素的累计和：np.cumsum()<br>计算元素的累计积少：np.cumprod()</p><h4 id="2-SciPy"><a href="#2-SciPy" class="headerlink" title="2.SciPy"></a>2.SciPy</h4><pre><code>SciPy是基于Python开源库，解决科学计算中各种标准问题的8个模板的集合。主要内容：    1. scipy.integrate：数值积分和微方程求解器    2. scipy.linalg：扩展了由numpy.linalg提供的线性代数求解和矩阵分解功能    3. scipy.optimize：函数优化器（最小化器）以及跟查找算法    4. scipy.signal：信号处理工具    5. scipy.sparse：稀疏矩阵和稀疏性系统求解器    6. scipy.special：SPECFUN[实现许多常用数字函数的Fortran库]的包装器    7. scipy.stats：包含检验连续和离散概率分布(密度函数，采样器，连续分布函数等)的函数与方法，各种统计检验的函数与方法，以及各类描述性统计函数的函数方法，</code></pre><h4 id="3-pandas"><a href="#3-pandas" class="headerlink" title="3.pandas"></a>3.pandas</h4><pre><code>pandas是Python的数据分析核心库。提供复杂精细的索引功能，以便完成重塑，切片，切块，聚合和选取数子集等操作。统计分析除了包含单一数值型特征的数据集中趋势、离散趋势和峰度与偏度统计知识外、还有包含多个特征间的比较计算等知识。</code></pre><h4 id="4-Matplotlib"><a href="#4-Matplotlib" class="headerlink" title="4.Matplotlib"></a>4.Matplotlib</h4><pre><code>Matplotlib是较为流行的绘制数据图表的Python库。</code></pre><h4 id="5-seaborn"><a href="#5-seaborn" class="headerlink" title="5.seaborn"></a>5.seaborn</h4><pre><code>seaborn是基于Matplotlib的数据可视化Python库，提供高度交互的界面。兼容NumPy，pandas的数据结构以及Scipy和stats models等统计模式。</code></pre><h4 id="6-pyecharts"><a href="#6-pyecharts" class="headerlink" title="6.pyecharts"></a>6.pyecharts</h4><pre><code>Echarts是百度开源的数据可视化工具，凭借良好的交互性，精巧的图表设计。</code></pre><h4 id="7-scikit-learn"><a href="#7-scikit-learn" class="headerlink" title="7.scikit-learn"></a>7.scikit-learn</h4><pre><code>scikit-learn是简单有效的数据挖取和分析工具。主要内容(基本模块)：    1.数据预处理    2.模型选择    3.分类    4.聚类    5.数据降维    6.回归  </code></pre><h1 id="Python-的网络资源获取"><a href="#Python-的网络资源获取" class="headerlink" title="Python 的网络资源获取"></a>Python 的网络资源获取</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>编辑器：PyCharm<br>库：requests BeautifulSoup4<br>###</p><pre class="line-numbers language-none"><code class="language-none">1.requests 网页下载库    requests.get/post(url,params,data,headers,timeout,verify,allow_redirects,cookies)url：下载的网页目标urlparams：字典形式，设置URL后面的参数，比如？id=123&amp;name=bilibilidata：字典或字符串，一般用于POST方法时提交数据headers：设置user-agent，refer请求头timeout：超时时间，sverify:True/False，是否进行HTTPS证书验证allow_redirects:True/False是否让requests做重定向处理cookies:附带本地cookies数据2.接收response响应    r = requests.get/post(url)    r.status_code       网页状态    r.encoding      设置编码规则    r.text      网页内容    r.headers           r.url    r.content       字节形式返回    r.cookies       导入本地cookies3.网页解析器  1.创建BeautifulSoup对象    from bs4 import BeautifulSoup    #根据HTML网页字符串创建 BeautifulSoup 对象    soup = beautifulSoup(        html_doc,                               #HTML文档字符串        'html.parser',                          #HTML解析器        from_encoding='utf8                     #HTML文档编码    ) 2.搜索节点 (find_all,find)    find_all(name,attrs,string)    比如：        soup.find_all('div',class_='abc,string'Python',href='/view/123.html')            #查找所有为 div标签 ，class为abc，文字为Python，连接符合/view/123.html的节点 3.访问节点信息    node.name   #标签名字    node['href']  # 元素属性    node.get_text()     #查找到的节点的链接文字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-网页"><a href="#2-网页" class="headerlink" title="2.网页"></a>2.网页</h2><pre class="line-numbers language-none"><code class="language-none">import requestsfrom bs4 import BeautifulSoupimport selectorsclass UrlManager():    '''    Url管理器    '''    def __init__(self):        self.new_urls = set()        self.old_urls = set()    def add_new_url(self,url):        if url is None or len(url) == 0:            return        if url in self.new_urls or url in self.old_urls:            return        self.new_urls.add(url)    def add_new_urls(self,urls):        if urls is None or len(urls) == 0:            return        for url in urls:            self.add_new_url(url)    def get_url(self):        if self.has_new_url():            url = self.new_urls.pop()            self.old_urls.add(url)            return url        else:            return None    def has_new_url(self):        return len(self.new_urls) &gt; 0#---------------------------------------------if __name__ == "__main__":    url_manager = UrlManager()    url_manager.add_new_url("url1")    url_manager.add_new_url("url2")    url_manager.add_new_url("url3")    print(url_manager.new_urls,url_manager.old_urls)    print("#"*30)    new_url = url_manager.get_url()    print(url_manager.new_urls, url_manager.old_urls)    print("#" * 30)    new_url = url_manager.get_url()    print(url_manager.new_urls, url_manager.old_urls)    print("-"*30)    print(url_manager.has_new_url())    print(new_url)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-获取页面文本内容"><a href="#3-获取页面文本内容" class="headerlink" title="3.获取页面文本内容"></a>3.获取页面文本内容</h2><pre class="line-numbers language-none"><code class="language-none">import requestsfrom bs4 import BeautifulSoupimport selectorsurl = "https://www.wabisabifag.top/"r = requests.get(url)print(f'{r.status_code}\n '      # f'{r.headers}\n '      f'{r.encoding}\n')for (index,value) in enumerate(r.text):    print(value,end='')    if 0 == index%120: print()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-获取网页标签内容"><a href="#4-获取网页标签内容" class="headerlink" title="4.获取网页标签内容"></a>4.获取网页标签内容</h2><pre class="line-numbers language-none"><code class="language-none">import  requestsfrom bs4 import  BeautifulSoupdef get_novel_chapters():    root_url = "http://www.89wxw.cn/0_9/"      # 网页无效了    r = requests.get(root_url)    r.encoding="gbk"    soup = BeautifulSoup(r.text,"html.parser")    for dd in soup.find_all("dd"):        link = dd.find("a")        if not link:            continue        print(link)get_novel_chapters()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-正则表达式"><a href="#5-正则表达式" class="headerlink" title="5.正则表达式"></a>5.正则表达式</h2><pre class="line-numbers language-none"><code class="language-none">url1 = "http://www.bilibili.com"url2 = "http://www.bilibili.com/123.html#comments"url3 = "http://www.baidu.com"import  repattern = r'^http://www.bilibili.com$'print(re.match(pattern,url1)) #okprint(re.match(pattern,url2))print(re.match(pattern,url3))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-验证网页是否有效并导入本地"><a href="#6-验证网页是否有效并导入本地" class="headerlink" title="6.验证网页是否有效并导入本地"></a>6.验证网页是否有效并导入本地</h2><pre class="line-numbers language-none"><code class="language-none">from utils import url_managerfrom bs4 import BeautifulSoupimport requestsimport reroot_url = "https://www.bilibili.com/"urls = url_manager.UrlManager()urls.add_new_url(root_url)fout = open("craw_all_pages.txt", "w")while urls.has_new_url():    curr_url = urls.get_url()    r = requests.get(curr_url, timeout=10)    if r.status_code!= 200:        print("error.retrun status_code is over 200", curr_url)        continue    soup = BeautifulSoup(r.text, "html.parser")    title = soup.title.string    fout.write("%s\t%s\n" % (curr_url, title))    fout.flush()    print("成功:%s,%s,%d" % (curr_url, title, len(urls.new_urls)))    links = soup.find_all("a")    for link in links:        href = link["href"]        pattern = r'^https://www.bilibili.com/\d+.html$'        if re.match(pattern, href):            urls.add_new_url()fout.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-获取豆瓣页面网址"><a href="#7-获取豆瓣页面网址" class="headerlink" title="7.获取豆瓣页面网址"></a>7.获取豆瓣页面网址</h2><pre class="line-numbers language-none"><code class="language-none">from turtle import pdimport requestsfrom bs4 import BeautifulSoupimport pprintimport jsonimport pdb# 构造分页数字列表page_indexs = range(0, 250, 25)list(page_indexs)def download_all_htmls():  # 获取HTML的page信息    htmls = []    for idx in page_indexs:        print(idx)        url = f"https://movie.douban.com/top250?start={idx}&amp;filter="        print("craw html:", url)        r = requests.get(url)        # if r.status_code != 200:        #     raise Exception("error")        htmls.append(r.text)    return htmlshtmls = download_all_htmls()# 解析数据def parse_single_html(html):    soup = BeautifulSoup(html, "html.parser")    article_items = (        soup.find("div", class_="article")        .find("ol", class_="grid_view")        .find_all("div", class_="item")    )    datas = []    for article_item in article_items:        rank = article_item.find("div", class_="pic").find("em").get_text()        info = article_item.find("div", class_="info")        title = info.find("div", class_="hd").find("span", class_="title").get_text()        # print(title)        stars = (            info.find("div", class_="bd")            .find("div", class_="star")            .find_all("span")        )        rating_star = stars[0]["class"][0]        rating_num = stars[1].get_text()        comments = stars[3].get_text()        datas.append({            "rank": rank,            "title": title,            "rating_star": rating_star.replace("rating", "").replace("-t", ""),            "rating_num": rating_num,            "comments": comments.replace("评价人数:", "")        })    return dataspprint.pprint(parse_single_html(htmls[0]))all_datas = []for html in htmls:    all_datas.extend(parse_single_html((html)))print(all_datas)print(len(all_datas))#导入表格df =pd.DataFrame(all_datas)print(df)df.to_eccel("豆瓣电影TOP250.xlsx")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>31，59有报错没有修改，可能是获取标签问题，也可能是代码自生的错误。</code></pre><p>报错：Traceback (most recent call last):<br>  File “C:\Users\WabiSabifag\PycharmProjects\web_crawler\douban_test\goline.py”, line 59, in <module><br>    pprint.pprint(parse_single_html(htmls[0]))<br>  File “C:\Users\WabiSabifag\PycharmProjects\web_crawler\douban_test\goline.py”, line 31, in parse_single_html<br>    soup.find(“div”, class_=”article”)<br>AttributeError: ‘NoneType’ object has no attribute ‘find’</module></p><pre class="line-numbers language-none"><code class="language-none">#封装import requestsfrom bs4 import BeautifulSoupimport pprintimport jsonfrom douban_test.goline import download_all_htmls,parse_single_htmlhtmls = download_all_htmls()for i in  range(len(htmls[0])):    print(i)pprint.pprint(parse_single_html(htmls[0]))all_datas = []for html in htmls:    all_datas.extend(parse_single_html((html)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-网页图片获取"><a href="#8-网页图片获取" class="headerlink" title="8.网页图片获取"></a>8.网页图片获取</h2><pre class="line-numbers language-none"><code class="language-none">coding = 'utf-8'import requestsfrom bs4 import BeautifulSoupimport osurl = "https://pic.netbian.com/4kmeinv/"def craw_html(url):    resp = requests.get(url)    resp.encoding = 'gbk'    print(f"获取网页状态:{resp.status_code}")    html = resp.text        #得到页面    return  htmldef parse_and_download(html):    soup = BeautifulSoup(html, "html.parser")    imgs = soup.find_all("img")    for img in imgs:        src = img['src']        if '/uploads/' not in src:            continue        src = f"https://pic.netbian.com{src}"        filename = os.path.basename(src)        with open(f"img/{filename}", "wb") as f:            resp_img = requests.get(src)            f.write(resp_img.content)# 如果页面有规律  循环获取页面urls = ["https://pic.netbian.com/4kmeinv/"]+[    f"https://pic.netbian.com/4kmeinv/index_{i}.html"    for i in range(2,4)]for url in urls:    html = craw_html(url)    parse_and_download(html)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="本地图片文件的重命名"><a href="#本地图片文件的重命名" class="headerlink" title="本地图片文件的重命名"></a>本地图片文件的重命名</h1><pre class="line-numbers language-none"><code class="language-none"># coding=utf-8import ospath_name = os.path.join(os.getcwd(), r'C:\Users\11111\Desktop\1')''' 获取图片所在文件夹的地址 可修改为文件的相对路径，比如：  path_name = D:\Documents\GitHub\my_OpenCV\models-master\research\my_data\myimages)'''num = 3323 # 图片命名的序号（从num开始）for item in os.listdir(path_name):#进入到文件夹内，对每个文件进行循环遍历    #re_name=str(num)+'.jpg'    re_name = '图片_'+str(num)+'.jpg' # 重命名图片文件的格式（从num开始）    os.rename(os.path.join(path_name,item),os.path.join(path_name,re_name))    num+=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Image库——图片字符化"><a href="#Image库——图片字符化" class="headerlink" title="Image库——图片字符化"></a>Image库——图片字符化</h1><pre class="line-numbers language-none"><code class="language-none"># coding=utf-8from PIL import Image# 生成图像所要的字符集codeLib = ''' `1234567890-=~!@#$%^&amp;*()_+qwertyuiop[]\QWERTYUIOP{}|asdfghjkl;'ASDFGHJKL:"zxcvbnm,./ZXCVBNM&lt;&gt;?'''count = len(codeLib)print(count)print(int(0.5))# 将彩色图片转换为黑白图片， 然后像素点的灰度值和字符集建立映射def transforml(image_file):    # 转换为黑白图片，参数”L“表示黑白模式    image_file=image_file.convert("L")    codePic = ''                    #  size 属性表示图片的分辨率，‘0’为横向大小，‘1’为纵向    for h in range(0,image_file.size[1]):        for v in range(0,image_file.size[0]):                    # 返回指定位置的像素值，如果打开的图象是多层次的图片，那这个方            gray = image_file.getpixel((v,h))            print(gray)            # 建立灰度和字符集的映射            codePic = codePic + codeLib[int(((count-1)*gray)/256)]        codePic = codePic+'\r\n'    return codePic# 打开图片fp = open('1.jpg','rb')image_file = Image.open(fp)# 调整图片大小image_file = image_file.resize((int(image_file.size[0]*0.5),int(image_file.size[1]*0.25)))print(u'Info:',image_file.size[0],' ',image_file.size[1],' ',count)# 打开 txt 文件写入字符tmp = open('index.txt','v')tmp.write(transforml((image_file)))tmp.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery 基础</title>
      <link href="/2023/01/05/jQuery-%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/01/05/jQuery-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h6 id="需要引入本地文件-或-https-code-jquery-com-下载文件"><a href="#需要引入本地文件-或-https-code-jquery-com-下载文件" class="headerlink" title="需要引入本地文件 或  https://code.jquery.com 下载文件"></a>需要引入本地文件 或  <a href="https://code.jquery.com/">https://code.jquery.com</a> 下载文件</h6><h2 id="1-jQuery获取BOM对象"><a href="#1-jQuery获取BOM对象" class="headerlink" title="1.jQuery获取BOM对象"></a>1.jQuery获取BOM对象</h2><pre class="line-numbers language-none"><code class="language-none">javascript$(document).ready(function(){// 页面BOM加载完成后执行的代码})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象"></a>获取对象</h5><pre class="line-numbers language-none"><code class="language-none">$("div")[0];$("div")[0].style.display="none";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-jQuery选择器"><a href="#2-jQuery选择器" class="headerlink" title="2.jQuery选择器"></a>2.jQuery选择器</h2><h3 id="1-基本选择器"><a href="#1-基本选择器" class="headerlink" title="1.基本选择器"></a>1.基本选择器</h3><pre class="line-numbers language-none"><code class="language-none">1.标签选择器    element        $("h2")2.类选择器    .class        $(".title")3.ID选择器    #id        $("#title")4.并集选择器    name1,name2....        $("div,p, .title")5.交集选择器    element.class(element#id)        $("h2.title")6.全局选择器    *        $("*")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-层次选择器"><a href="#2-层次选择器" class="headerlink" title="2.层次选择器"></a>2.层次选择器</h3><pre class="line-numbers language-none"><code class="language-none">1.后代选择器        ancestor descendant        $("#menu span")2.子选择器        parent&gt;child        $("#menu&gt;span")3.相邻元素选择器        prev+next        $("h2+dl")4.同辈选择器        prev~sibings        $("h2~dl")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-属性选择器"><a href="#3-属性选择器" class="headerlink" title="3.属性选择器"></a>3.属性选择器</h3><pre class="line-numbers language-none"><code class="language-none">1.[attribute]        $("[id]")        所有含有 id 属性的2.[attribute^=value]        $("[href^='en']")        选取href属性 en{% label  开头  pink %} 的元素3.[attribute$=value]        $("[href$='.jpg']")        选取href属性 .jpg {% label  结尾 pink %}的元素4.[attribute*=value]        $("[href\*='txt']")        选取href属性{% label  中 pink %}含有 txt 的元素5.\[selector 1][selector 2]         $("li[id]\[title]=新闻要点")        选取含有id属性和title熟悉为新闻要点的li6.[alttribute=value]        $("div[class='current']")        获取class等于current的所有div7.[alttribute!=value]     $("div[class='current']")        获取class不等于current的所有div8.[alttribute_=value]        $("div[class_='box']")            获取class属性等于或含有box的字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-基本过滤选择器"><a href="#4-基本过滤选择器" class="headerlink" title="4.基本过滤选择器"></a>4.基本过滤选择器</h3><h4 id="1-基本过滤选择器"><a href="#1-基本过滤选择器" class="headerlink" title="1.基本过滤选择器"></a>1.基本过滤选择器</h4><pre class="line-numbers language-none"><code class="language-none">1. :first        $("li:first")2. :last          $("li:last")3. :even        $("li:even")              索引为偶数的 li4. :odd         $("li:odd")                索引为奇数的 li5. :not          $("li:not(li:eq(3))")   索引不是3的所有 li6. :focus      $("input:focus")        匹配当前获取焦点的 input 元素7. :animated       $("div:animated")       匹配当前执行动画的8. :target      $("div:target")         获取&lt;div id="foo"\&gt;元素9. :contains(text)     $("li:contains('js')")       获取当前内容中包含 js 的 li10. :empty     $("li:empty")         获取内容为空的 li11. :has(selector)        $("li:has('a')")     获取内容中包含 &lt;a&gt; 元素的 所有 &lt;li&gt; 元素12. :parent     $("li:parent")          选取所有带子元素或文本的 li 元素13. :hidden    $("li:hidden")         获取所有隐藏的 li 元素14. :visible     $("li:visible")           获取所有可见的 li 元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-索引值选择元素的基本过滤选择器"><a href="#2-索引值选择元素的基本过滤选择器" class="headerlink" title="2.索引值选择元素的基本过滤选择器"></a>2.索引值选择元素的基本过滤选择器</h4><pre class="line-numbers language-none"><code class="language-none">1.:eq(index)        $("li:eq(1)")         索引等于1的 li2.:gt(index)         $("li: gt(1)")         索引大于1的 li3.:lt(index)          $("li: lt(1)")          索引小于1的 li<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-子元素选择器"><a href="#5-子元素选择器" class="headerlink" title="5.子元素选择器"></a>5.子元素选择器</h3><pre class="line-numbers language-none"><code class="language-none">1.:nth-child( index / even /odd / 公式 )                索引index默认(1)，子元素显示(公式: 2n  (n默认(0) )2.:first-child            3.:last-child4.:only-child                    当前唯有一个子元素时匹配5.:nth-last-child()            选择父元素的第n个子元素，计数从最后一个开始到第一个6.:nth-of-type()                选择同属于同一个父元素下，标签名相同的第n个子元素7.:first-of-type8.:last-of-type9.:only-of-type10.:nth-last-of-type()     选择同属于同一个父元素下，标签名相同的第n个子元素,计数从最后一个元素到第一个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-表单选择器"><a href="#6-表单选择器" class="headerlink" title="6.表单选择器"></a>6.表单选择器</h3><pre class="line-numbers language-none"><code class="language-none">1.:input2.:text3.:password4.:radio5.:checkbox6.:submit7.:reset8.:image9.:button10.:file11.:hidden12.:enabled13.:disabled14.:checked15.:selected注意的地方:   ${"input"}仅能获取表单标签，${":input"}获取页面的所有表单控件，包括 select，textarea 控件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-jQuery-样式操作"><a href="#3-jQuery-样式操作" class="headerlink" title="3.jQuery 样式操作"></a>3.jQuery 样式操作</h2><h3 id="1-修改样式"><a href="#1-修改样式" class="headerlink" title="1.修改样式"></a>1.修改样式</h3><h4 id="1-获取样式"><a href="#1-获取样式" class="headerlink" title="1.获取样式"></a>1.获取样式</h4><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;    div{        width:100px;        heigth:200px;        background-color: 'pink';    }&lt;/style&gt;&lt;div&gt;&lt;a&gt; this div&lt;/a&gt;&lt;/div&gt;&lt;script&gt;    console.log($("div).css("width"));  // 100px&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-设置单个样式"><a href="#2-设置单个样式" class="headerlink" title="2.设置单个样式"></a>2.设置单个样式</h4><pre class="line-numbers language-none"><code class="language-none">$("div").css("width","300px");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-设置多个样式"><a href="#3-设置多个样式" class="headerlink" title="3.设置多个样式"></a>3.设置多个样式</h4><pre class="line-numbers language-none"><code class="language-none">$("div").css({            width:40,            heigth:2000,            background:"pink"        });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-类操作"><a href="#2-类操作" class="headerlink" title="2.类操作"></a>2.类操作</h3><h4 id="1-准备HYML网页"><a href="#1-准备HYML网页" class="headerlink" title="1.准备HYML网页"></a>1.准备HYML网页</h4><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;        div{background-color: gainsboro;}/* //灰色 */        .a{background-color: beige;}/* //米黄色 */        .b{background-color: aquamarine;}/* //青色 */        .c{background-color: pink; }/* //粉色 */&lt;/style&gt;    &lt;div&gt;添加类名&lt;/div&gt;    &lt;div class="a"&gt;删除类名&lt;/div&gt;    &lt;div class="b"&gt;切换类名&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-addClass-添加类"><a href="#2-addClass-添加类" class="headerlink" title="2.addClass()添加类"></a>2.addClass()添加类</h4><pre class="line-numbers language-none"><code class="language-none">// 添加类名        $("div").click(function(){            $(this).addClass("a");        });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-removeClass-移除类"><a href="#3-removeClass-移除类" class="headerlink" title="3.removeClass()移除类"></a>3.removeClass()移除类</h4><pre class="line-numbers language-none"><code class="language-none">// 移除类        $("div").click(function(){            $(this).removeClass("a");        });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-toggle-Class-切换类"><a href="#4-toggle-Class-切换类" class="headerlink" title="4.toggle Class()切换类"></a>4.toggle Class()切换类</h4><pre class="line-numbers language-none"><code class="language-none">// 切换类    点赞功能实现        $("div").click(function(){            $(this).toggleClass("c")        })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-功能实例"><a href="#5-功能实例" class="headerlink" title="5.功能实例"></a>5.功能实例</h4><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset="utf-8"&gt;        &lt;title&gt;&lt;/title&gt;        &lt;script src="jquery-3.6.0.js"&gt;&lt;/script&gt;    &lt;/head&gt;    &lt;style&gt;        .current{            background-color: pink;            width: 60px;            height: 30px;        }    &lt;/style&gt;    &lt;body&gt;        &lt;div class="tab"&gt;            &lt;div class="tab_list"&gt;                &lt;ul&gt;                    &lt;li class="current"&gt;商品介绍&lt;/li&gt;                    &lt;li&gt;规格包装&lt;/li&gt;                    &lt;li&gt;售后保障&lt;/li&gt;                    &lt;li&gt;商品评价&lt;/li&gt;                    &lt;li&gt;手机社区&lt;/li&gt;                &lt;/ul&gt;            &lt;/div&gt;            &lt;div class="tab_con"&gt;                &lt;div class="item" style="display: block;"&gt;商品介绍模块内容&lt;/div&gt;                &lt;div class="item"&gt;规模与包装模块内容&lt;/div&gt;                &lt;div class="item"&gt;售后保障模块内容&lt;/div&gt;                &lt;div class="item"&gt;商品评价(50000)模块内容&lt;/div&gt;                &lt;div class="item"&gt;手机社区模块内容&lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;script&gt;        $(".tab_list li").click(function(){            $(this).addClass("current").siblings().removeClass("current");            var index = $(this).index();            console.log(index);            //让内容区域相应的索引号的item显示，其余的item隐藏            $(".tab_con .item").eq(index).show().siblings().hide();        });    &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-jQuery类操作-和-className的区别"><a href="#6-jQuery类操作-和-className的区别" class="headerlink" title="6.jQuery类操作 和 className的区别"></a>6.jQuery类操作 和 className的区别</h4><p>JavaScript的className会替换掉元素原来的所有类名，可以比喻为串联。<br>jQuery类操作不影响原来的类名存在，可以理解为并联。</p><h3 id="3-jQuery动画"><a href="#3-jQuery动画" class="headerlink" title="3.jQuery动画"></a>3.jQuery动画</h3><h4 id="1-显示和隐藏效果"><a href="#1-显示和隐藏效果" class="headerlink" title="1.显示和隐藏效果"></a>1.显示和隐藏效果</h4><pre class="line-numbers language-none"><code class="language-none">元素：show hidde toggle&lt;script src="jquery-3.6.0.js"&gt;&lt;/script&gt;&lt;style&gt;    div{        width: 150px;height: 300px;background-color: pink;    }    p{        text-align: center;    }    p:hover{        color: red;    }&lt;/style&gt;&lt;button&gt;显示&lt;/button&gt;&lt;button&gt;隐藏&lt;/button&gt;&lt;button&gt;切换&lt;/button&gt;&lt;div&gt;    &lt;p&gt;写入导航栏信息&lt;/p&gt;&lt;/div&gt;&lt;script&gt;    $("button").eq(0).click(function(){        $("div").show(1000,function(){            alert("已在显示");        });    });    $("button").eq(1).click(function(){        $("div").hide(1000,function(){            alert("已经隐藏");        });    });    $("button").eq(2).click(function(){        $("div").toggle(1000);    });&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-滑动效果-hover-替代鼠标移入、移出事件"><a href="#2-滑动效果-hover-替代鼠标移入、移出事件" class="headerlink" title="2.滑动效果  hover()替代鼠标移入、移出事件"></a>2.滑动效果  hover()替代鼠标移入、移出事件</h4><pre class="line-numbers language-none"><code class="language-none">元素：slideDown slideUp slideToggle&lt;script src="jquery-3.6.0.js"&gt;&lt;/script&gt;&lt;style&gt;    ul li{        display: inline-block;        width: 60px;        height: 20px;        float: left;        text-align: center;    }    ul li:hover{        background-color: #f3f5f7;    }    ul li a:hover{        color: red;    }&lt;/style&gt;&lt;ul class="nav"&gt;    &lt;li&gt;        &lt;a href="#"&gt;Weibo&lt;/a&gt;        &lt;ul hidden&gt;            &lt;li&gt;&lt;a href=""&gt;私信&lt;/a&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=""&gt;评论&lt;/a&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=""&gt;@我&lt;/a&gt;&lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;    &lt;li&gt;        &lt;a href=""&gt;QQ&lt;/a&gt;        &lt;ul hidden&gt;            &lt;li&gt;&lt;a href=""&gt;添加&lt;/a&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=""&gt;回复&lt;/a&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=""&gt;删除&lt;/a&gt;&lt;/li&gt;        &lt;/ul&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;script&gt;    // 下放    // $(".nav &gt; li").mouseover(function(){    //     $(this).children("ul").slideDown(100);    // });    //上敛    // $(".nav &gt; li").mouseout(function(){    //     $(this).children("ul").slideUp(1000);    // });    //可切换    // $(".nav &gt; li").mouseout(function(){    //     $(this).children("ul").slideToggle(200);    // });    // hover方法    // $(".nav &gt; li").hover(function(){    //     $(this).children("ul").slideDown(20);    //     },function(){    //         $(this).children("ul").slideUp(20);    // });    //简化版本    $(".nav &gt; li").hover(function(){        $(this).children("ul").slideToggle(20);    });&lt;/script&gt;        //  鼠标经过时有抽动的问题  下面的文章可以优化问题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-停止动画"><a href="#3-停止动画" class="headerlink" title="3.停止动画"></a>3.停止动画</h4><pre class="line-numbers language-none"><code class="language-none">元素： stop$("div").stop();    //停止当前动画，继续下一个动画$("div").stop(true);    //清楚div元素动画队列中的所有动画$("div").stop(true,true);    //停止当前动画，清楚动画队列中的所有动画$("div").stop(false,true);    //停止当前动画，继续执行下一个动画//优化    $(".nav &gt; li").hover(function(){        $(this).children("ul").stop().slideToggle(20);    });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-淡入淡出"><a href="#4-淡入淡出" class="headerlink" title="4.淡入淡出"></a>4.淡入淡出</h4><pre class="line-numbers language-none"><code class="language-none">元素：fadeIn fadeOut fadeTo fadeToggle&lt;script src="jquery-3.6.0.js"&gt;&lt;/script&gt;&lt;style&gt;    div{width: 100px;height: 100px;float: left;margin-left: 5px;background-color: pink;}    .box{width: 425px;height: 105px;padding-top: 5px;border: 1px solid #ccc;}    .red{background-color: red;}    .green{background-color: green;}    .yellow{background-color: yellow;}    .orange{background-color: orange;}&lt;/style&gt;&lt;div class="box"&gt;    &lt;div class="red"&gt;&lt;/div&gt;    &lt;div class="green"&gt;&lt;/div&gt;    &lt;div class="yellow"&gt;&lt;/div&gt;    &lt;div class="orange"&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt;    //淡入  显示匹配元素    $(".box div").fadeIn(1,1);    // 鼠标经过时灰  移出时恢复    $(".box div").hover(    function(){        $(this).fadeTo(1,0.2);        },    function(){        $(this).fadeTo(1,1);    });    &lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-自定义动画"><a href="#5-自定义动画" class="headerlink" title="5.自定义动画"></a>5.自定义动画</h4><pre class="line-numbers language-none"><code class="language-none">元素：animate&lt;script src="jquery-3.6.0.js"&gt;&lt;/script&gt;&lt;style&gt;    div{width: 100px;height: 100px;float: left;background-color: pink;position:absolute;}&lt;/style&gt;&lt;button&gt;动起来&lt;/button&gt;&lt;div &gt;    &lt;input type="reset" value="重置" hidden&gt;&lt;/div&gt;&lt;script&gt;    $("button").click(function(){        $("div").animate({left:500,top:300,opacity:.4,width:500},1000),        $("input").show()//运行时间        // $("div").animate({left:8,top:27,opacity:1,width:100},1);    });        //回到之前位置    $("input").click(function(){        $("div").animate({left:8,top:27,opacity:1,width:100},1)        $("input").hide()    })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-手风琴实列"><a href="#6-手风琴实列" class="headerlink" title="6.手风琴实列"></a>6.手风琴实列</h4><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset="utf-8"&gt;        &lt;title&gt;&lt;/title&gt;        &lt;script src="jquery-3.6.0.js"&gt;&lt;/script&gt;        &lt;style type="text/css"&gt;            *{margin: 0;padding: 0;}            .king{width: 852px;margin: 100px auto;                    background-color: #f3f6f9;                    overflow: hidden;padding: 10px;}            .king ul{list-style: none;}        /* 取消列表样式 */            .king li{position: relative;float: left;                    width: 69px;height: 69px;margin-right: 10px;}/* 设置列表样式 */            /* //设置初始状态 */            .king li.current{width: 224px;}            .king li.current .big{display: block;}            .king li.current .small{display: none;}            /* //设置大方块样式 */            .big{                width: 224px;height: 69px;                display: none;border-radius: 5px;}            /* //设置小方块 */            .small{                /* position: absolute;top: 0;left: 0; */                width: 69px;height: 69px;border-radius: 5px;}            /* //大小方块颜色 */            .red1{background-color: #ff3333;}            .orange1{background-color: orange;}            .yellow1{background-color: yellow;}            .green1{background-color: green;}            .blue1{background-color: blue;}            .pink1{background-color: pink;}            .purple{background-color: purple;}            .silver{background-color: silver;}            .red2{background-color: #ff3333;}            .orange2{background-color: orange;}            .yellow2{background-color: yellow;}            .green2{background-color: green;}            .blue2{background-color: blue;}            .pink2{background-color: pink;}        &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div class="king"&gt;            &lt;ul&gt;                &lt;li class="current"&gt;                    &lt;div class="small  red1"&gt;&lt;/div&gt;                    &lt;div class="big  red2"&gt;&lt;/div&gt;                &lt;/li&gt;                &lt;li&gt;                    &lt;div class="small  orange1"&gt;&lt;/div&gt;                    &lt;div class="big  orange2"&gt;&lt;/div&gt;                &lt;/li&gt;                &lt;li&gt;                    &lt;div class="small  yellow1"&gt;&lt;/div&gt;                    &lt;div class="big  yellow2"&gt;&lt;/div&gt;                &lt;/li&gt;                &lt;li&gt;                    &lt;div class="small  green1"&gt;&lt;/div&gt;                    &lt;div class="big  green2"&gt;&lt;/div&gt;                &lt;/li&gt;                &lt;li&gt;                    &lt;div class="small  blue1"&gt;&lt;/div&gt;                    &lt;div class="big  blue2"&gt;&lt;/div&gt;                &lt;/li&gt;                &lt;li&gt;                    &lt;div class="small  pink1"&gt;&lt;/div&gt;                    &lt;div class="big  pink2"&gt;&lt;/div&gt;                &lt;/li&gt;                &lt;li&gt;                    &lt;div class="small  purple"&gt;&lt;/div&gt;                    &lt;div class="big  purple"&gt;&lt;/div&gt;                &lt;/li&gt;                &lt;li&gt;                    &lt;div class="small  silver"&gt;&lt;/div&gt;                    &lt;div class="big  silver"&gt;&lt;/div&gt;                &lt;/li&gt;            &lt;/ul&gt;        &lt;/div&gt;        &lt;script&gt;            //鼠标经过            $(".king li").mouseover(function(){                $(this).stop().animate({                    width:224                }).find(".small").stop().fadeOut().siblings(".big").stop().fadeIn();                $(this).siblings("li").stop().animate({                    width:69                }).find(".small").stop().fadeIn().siblings(".big").stop().fadeOut();            })        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-jQuery属性操作"><a href="#4-jQuery属性操作" class="headerlink" title="4.jQuery属性操作"></a>4.jQuery属性操作</h3><h4 id="1-prop-方法"><a href="#1-prop-方法" class="headerlink" title="1.prop()方法"></a>1.prop()方法</h4><h5 id="获取或设置元素固有属性"><a href="#获取或设置元素固有属性" class="headerlink" title="获取或设置元素固有属性"></a>获取或设置元素固有属性</h5><pre class="line-numbers language-none"><code class="language-none">$().prop("")    1.元素固有属性 (获取和设置)        &lt;a href="http://localhost" title="主页"&gt;&lt;/a&gt;        &lt;script&gt;            $("a").prop("title"); /* 获取值 */            $("a").prop("title","首页");     /* 设置值 */         &lt;/script&gt;    2.表单checked属性 (获取)        &lt;input type="checkbox" checked&gt;        // 获取表单元素的checked值            $("input").change(function(){                console.log($(this).prop("checked"))            })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-attr-方法"><a href="#2-attr-方法" class="headerlink" title="2.attr()方法"></a>2.attr()方法</h4><h5 id="获取或设置元素自定义属性"><a href="#获取或设置元素自定义属性" class="headerlink" title="获取或设置元素自定义属性"></a>获取或设置元素自定义属性</h5><h4 id="3-data方法"><a href="#3-data方法" class="headerlink" title="3.data方法"></a>3.data方法</h4><h5 id="在指定的元素上存储数据，存储在内存中，不会修改DOM元素结构；页面刷新时存放的数据会移除。"><a href="#在指定的元素上存储数据，存储在内存中，不会修改DOM元素结构；页面刷新时存放的数据会移除。" class="headerlink" title="在指定的元素上存储数据，存储在内存中，不会修改DOM元素结构；页面刷新时存放的数据会移除。"></a>在指定的元素上存储数据，存储在内存中，不会修改DOM元素结构；页面刷新时存放的数据会移除。</h5><pre class="line-numbers language-none"><code class="language-none">$().attr("")    1.数据获取和设置  实列：&lt;div&gt;This is div&lt;/div&gt;        &lt;script&gt;            $("div").data("uname","andy");  /* 设置数据 */            console.log($("div").data("uname"));    /* 获取数据,设置结果 */        &lt;/script&gt;  实列：&lt;div index="1" data-index="2"&gt;This is div&lt;/div&gt;        &lt;script&gt;            console.log($("div").data("index"));  //获取自定义的数值：2        &lt;/script&gt;    2.全选功能        prop()接受checked作为第一个参数，第二个参数通过 $(this).prop('checked')获取"全选"按钮的选中状态        $(".checkall").change(function(){                $(".j-checkbox, .checkall").prop("checked",$(this).prop("checked"));            });    3.checked: 选择器查找被选中的表单元素，判断选中数量是否达到所有商品的复选框个数        $(".j-checkbox").change(function(){                if($(".j-checkbox:checked").length === $("j-checkbox").length){                    $(".checkall").prop("checked",true);                }else{                    $(".checkall").prop("checked",false);                }            });    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-jQuery内容操作"><a href="#5-jQuery内容操作" class="headerlink" title="5.jQuery内容操作"></a>5.jQuery内容操作</h3><h4 id="1-内容操作方法"><a href="#1-内容操作方法" class="headerlink" title="1.内容操作方法"></a>1.内容操作方法</h4><pre><code>html()    //获取第一个匹配元素的htmlhtml(content)    //设置第一个匹配元素的htmltext()    //获取所有匹配元素包含的文本内容组合起来的文本text(content)    //设置所有匹配元素的文本内容val()    //获取表单元素的value值val(value)    //设置表单元素的value值</code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;div&gt;    &lt;span&gt;内容&lt;/span&gt;&lt;/div&gt;&lt;input type="text" value="请输入内容" name="" id=""&gt;&lt;script&gt;    //1.获取设置元素内容 html()    console.log($("div").html());    $("div").html("&lt;span&gt;Hello&lt;/span&gt;");    //2.text()    console.log($("div").text()); //Hello    $("div").text("&lt;a&gt;12345&lt;/a&gt;");    //3.val()    console.log($("input").val());    $("input").val("123")&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-jQuery元素操作"><a href="#6-jQuery元素操作" class="headerlink" title="6.jQuery元素操作"></a>6.jQuery元素操作</h3><h4 id="1-遍历元素"><a href="#1-遍历元素" class="headerlink" title="1.遍历元素"></a>1.遍历元素</h4><pre class="line-numbers language-none"><code class="language-none">$().each(function(index,domEle) { });    1.遍历元素    &lt;div&gt;1&lt;/div&gt; &lt;div&gt;2&lt;/div&gt; &lt;div&gt;3&lt;/div&gt;        &lt;script&gt;            var arr = ["red","green","blue"];            $("div").each(function(index,domEle){                console.log(index);        //                 console.log(domEle);    //整个 html 样式                if($("div").text()[index]==='2'){                    $(domEle).css("color",arr[index]);                }            });        &lt;/script&gt;$.each(Object,function(index,element){});    1.数组和对象的遍历            // 便利数组            var arr = ["red","green","blue"];            $.each(arr,function(index,element){                console.log(index);            //index                console.log(element);        //数组值            });            //遍历对象            var obj = {name:"andy",age:18};            $.each(obj,function(index,element){                console.log(index);            //key                console.log(element);        //value            })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-删除元素"><a href="#2-删除元素" class="headerlink" title="2.删除元素"></a>2.删除元素</h4><pre class="line-numbers language-none"><code class="language-none">$(function(){    var li = $("&lt;li&gt;我是后来创建的&lt;/li&gt;")})//添加元素    //内部元素    var li = $("&lt;li&gt;后来创建&lt;/li&gt;");    $("ul").append(li);            //内部添加并且放到内部的最后面    $("ul").prepend(li);        //内部添加并放到内部的最前面    //外部添加    var div = $("&lt;div&gt;创建一个 div &lt;/div&gt;");    $(".test").after(div);        //div放入到目标元素的后面    $(".test").before(div);        //div放入到目标元素的前面//删除元素    empty()                //清空元素内容，删除元素本身    remove([expr])        //完全删除 ,[expr]用于筛选元素    $("ul").remove();        //删除匹配的元素    $("ul").empty();        //删除匹配元素的子节点    PS: 利用html()元素可以修改元素的内容,如果参数传入空字符,也可以删除子节点元素效果    $("ul").html("")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-jQuery尺寸的位置操作"><a href="#7-jQuery尺寸的位置操作" class="headerlink" title="7.jQuery尺寸的位置操作"></a>7.jQuery尺寸的位置操作</h3><h4 id="1-尺寸方法"><a href="#1-尺寸方法" class="headerlink" title="1.尺寸方法"></a>1.尺寸方法</h4><pre><code>        width()                         height()                        outerHeight(true)            padding,margin,border        outerWidth(true)            padding,margin,border        innerWidth()            padding        innerHeight()            padding        outerWidth()            padding border        outerHeight()            padding border</code></pre><h4 id="2-位置方法"><a href="#2-位置方法" class="headerlink" title="2.位置方法"></a>2.位置方法</h4><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;    *{padding: 0;margin: 0;}    .father{width: 80px;width: 80px;background-color: pink;            margin: 10px;overflow: hidden;position: relative;}    .son{width: 25px;height: 25px;background-color: palevioletred;            position: absolute;left: 10px;top: 10px;}&lt;/style&gt;&lt;div class="father"&gt;    &lt;div class="son"&gt;&lt;/div&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>offset()方法<br> 获取元素位置，返回的是对象，包含left，top表示相对于文档的偏移坐标，和父级元素没有关系。</p><pre class="line-numbers language-none"><code class="language-none">//获取元素距离文档顶部距离$().offset().top;//获取元素距离文档左侧距离$().offset().left;//设置元素偏移$().offset({top:200,left:200})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>position()方法<br> 获取元素距离父级元素的位置</p><pre class="line-numbers language-none"><code class="language-none">console.log($(".son").position().top);console.log($(".son").position().left);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>scrollTop() 和 scrollLeft()  方法</p></li></ol><p>获取或设置元素被卷去的头部距离；<br>    获取或设置元素被卷曲的左侧距离</p><pre class="line-numbers language-none"><code class="language-none">//获取元素距离页面右侧的距离    $(".container").scrollLeft();//设置元素距离页面顶部的距离    $(document).scrollTop(100);//返回顶部动画功能    $("body,html").animate({scrollTop:0})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>案例</li></ol><pre class="line-numbers language-none"><code class="language-none">            *{padding: 0;margin: 0;}            .back{                position: fixed;width: 50px;height: 50px;background-color: pink;                right: 30px;bottom: 100px;display: none;            }            .container{                width: 900px;height: 500px;background-color: skyblue;                margin: 400px auto;            }&lt;div class="back"&gt; &lt;/div&gt;&lt;div class="container"&gt;&lt;/div&gt; &lt;script&gt;     //利用scroll()方法控制“返回顶部”按钮的显示，隐藏     var boxTop = $(".container").offset().top;     $(window).scroll(function(){         if($(document).scrollTop()&gt;=boxTop){             $(".back").fadeIn();         }else{             $(".back").fadeOut();         }     }); //“返回顶部”按钮绑定单击事件     $(".back").click(function(){         $("body,html").stop().animate({             scrollTop:0         });     }); &lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-jQuery事件"><a href="#8-jQuery事件" class="headerlink" title="8.jQuery事件"></a>8.jQuery事件</h3><h4 id="1-事件绑定"><a href="#1-事件绑定" class="headerlink" title="1.事件绑定"></a>1.事件绑定</h4><h5 id="1-通过事件方法绑定事件"><a href="#1-通过事件方法绑定事件" class="headerlink" title="1.通过事件方法绑定事件"></a>1.通过事件方法绑定事件</h5><p> 相对于DOM事件相比省略 “on”。<br>     并且，jQuery的事件方法允许为一个事件绑定多个事件处理函数，只需要多次调用事件方法，传入不同的函数</p><h6 id="1-表单事件"><a href="#1-表单事件" class="headerlink" title="1.表单事件"></a>1.表单事件</h6><p> blur([data],[function])        当前失去焦点时触发</p><p> focus()                        当元素获得焦点时触发</p><p> change()                    当前元素值发生改变时触发</p><p> focusin()                    在父元素上检测子元素获取焦点的情况</p><p> focusout()                    在父元素上检测子元素失去焦点的情况</p><p> select()                    当文本框中的文本被选中时触发</p><p> submit()                    当表单提交时触发</p><h6 id="2-键盘事件"><a href="#2-键盘事件" class="headerlink" title="2.键盘事件"></a>2.键盘事件</h6><p> keydown()                    键盘按键按下时触发</p><p> keypress()                    键盘按键按下时触发（有的非基础键位没有）</p><p> keyup()                        键盘按键弹起时触发</p><h6 id="3-鼠标事件"><a href="#3-鼠标事件" class="headerlink" title="3.鼠标事件"></a>3.鼠标事件</h6><p> mouseover()                    当鼠标指针移入对象时触发</p><p> mouseout()                    当鼠标指针从元素上离开时触发</p><p> click()                        当单机元素时触发</p><p> dblclick()                    当双击元素时触发</p><p> mousedown()                    当鼠标指针移到元素上方，并按下鼠标按键时触发</p><p> mouseup()                    当在元素上放开鼠标按钮时，会触发</p><h6 id="4-浏览事件"><a href="#4-浏览事件" class="headerlink" title="4.浏览事件"></a>4.浏览事件</h6><p> scroll()                    当滚动条发生变化时触发</p><p> resize()                    当调整浏览器窗口大小时会被触发</p><h6 id="5-案例"><a href="#5-案例" class="headerlink" title="5.案例"></a>5.案例</h6><pre class="line-numbers language-none"><code class="language-none">&lt;div&gt;事件绑定&lt;/div&gt;     &lt;script&gt;             $("div").click(function(){             $(this).css("background","hotpink");         });         $("div").mouseenter(function(){             $(this).css("background-color","skyblue");         });     &lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-通过on-方法绑定事件"><a href="#2-通过on-方法绑定事件" class="headerlink" title="2.通过on()方法绑定事件"></a>2.通过on()方法绑定事件</h5><p>On()方法在匹配元素上绑定多个事件处理函数：<br> element.on(events,[selector],fn)</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="current"&gt;事件绑定&lt;/div&gt;&lt;script&gt;        //一次绑定一个事件    $("div").on(        "click",function(){        $(this).css("background","red")}    );    //一次绑定多个事件    $("div").on({        mouseenter:function(){            $(this).css("background","deepskyblue");        },        click:function(){            $(this).css("background","yellow");        },        mouseleave:function(){            $(this).css("background","orange");        }    })    //为不同事件绑定相同事件处理函数    $("div").on("mouseenter mouseleave",function(){        $(this).toggleClass("current");    })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-事件委派"><a href="#2-事件委派" class="headerlink" title="2.事件委派"></a>2.事件委派</h4><pre><code>    原本要给子元素绑定的事件绑定到父元素上。        由于事件有冒泡机制，当一个元素出发时间时，可以分区发生事件是父元素还是子元素。</code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;ul&gt;    &lt;li&gt;1&lt;/li&gt;    &lt;li&gt;2&lt;/li&gt;&lt;/ul&gt;&lt;script&gt;    $("ul").on("click","li:first-child",function(){    alert("单击li")});&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="新创建的li也可以继承任务触发事件"><a href="#新创建的li也可以继承任务触发事件" class="headerlink" title="新创建的li也可以继承任务触发事件"></a>新创建的li也可以继承任务触发事件</h5><pre class="line-numbers language-none"><code class="language-none">&lt;ul&gt;    &lt;li&gt;1&lt;/li&gt;    &lt;li&gt;2&lt;/li&gt;&lt;/ul&gt;&lt;script&gt;    $("ul").on("click","li",function(){    alert("单击li")});var li = $("&lt;li&gt;create a li &lt;/li&gt;")$("ul").append(li);&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="bind-live-delegate-也可以实现事件绑定和委派，但建议用新版本的-on-来代替"><a href="#bind-live-delegate-也可以实现事件绑定和委派，但建议用新版本的-on-来代替" class="headerlink" title="bind(),live(),delegate()也可以实现事件绑定和委派，但建议用新版本的 on()来代替"></a>bind(),live(),delegate()也可以实现事件绑定和委派，但建议用新版本的 on()来代替</h5><h4 id="5-事件解绑"><a href="#5-事件解绑" class="headerlink" title="5.事件解绑"></a>5.事件解绑</h4><pre class="line-numbers language-none"><code class="language-none">&lt;ul&gt;        &lt;li&gt;1&lt;/li&gt;        &lt;li&gt;2&lt;/li&gt;    &lt;/ul&gt;    &lt;script&gt;        var sum=0;        $("ul").on({            click:function(){                console.log(sum++);},            mouseover:function(){                console.log("鼠标经过我");}        });        //事件解绑        $("div").off();    &lt;/script&gt;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="one-方法"><a href="#one-方法" class="headerlink" title="one()方法"></a>one()方法</h5><p>  元素只触发一次</p><pre class="line-numbers language-none"><code class="language-none">$("p").one("click",function(){        alert("被单击了");    });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="6-触发事件"><a href="#6-触发事件" class="headerlink" title="6.触发事件"></a>6.触发事件</h4><h5 id="1-调用事件方法"><a href="#1-调用事件方法" class="headerlink" title="1.调用事件方法"></a>1.调用事件方法</h5><pre class="line-numbers language-none"><code class="language-none">//绑定事件$("div").click(function(){    alert("hello");});//触发$("div").click();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-通过-trigger-方法触发事件"><a href="#2-通过-trigger-方法触发事件" class="headerlink" title="2.通过 trigger()方法触发事件"></a>2.通过 trigger()方法触发事件</h5><pre class="line-numbers language-none"><code class="language-none">//绑定事件$("div").click(function(){    alert("hello");});//触发$("div").trigger("click");       //调用 trigger()方法，参数click单击事件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-通过-triggerHandler-方法触发事件-不会执行元素的默认行为"><a href="#3-通过-triggerHandler-方法触发事件-不会执行元素的默认行为" class="headerlink" title="3.通过 triggerHandler()方法触发事件 (不会执行元素的默认行为)"></a>3.通过 triggerHandler()方法触发事件 (不会执行元素的默认行为)</h5><pre class="line-numbers language-none"><code class="language-none">&lt;input type="text"&gt;&lt;script&gt;    $("input").on("focus",function(){        $(this).val("你好吗？");    });    $("input").triggerHandler("focus");      //触发事件   文本框不会聚焦选中    $("input").focus();        // 文本框聚焦选中&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-事件对象"><a href="#7-事件对象" class="headerlink" title="7.事件对象"></a>7.事件对象</h4><pre><code>阻止事件冒泡和默认行为</code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;a href="173/173.html"&gt;链接&lt;/a&gt;&lt;script&gt;        $(document).on("click",function(){        console.log("单击document");    });    $("a").on("click",function(event){        event.preventDefault();        //阻止事件默认行为      不会跳转页面        event.stopPropagation();      //阻止事件冒泡        只输出 “ 单击了a”        console.log("单击了a");    });&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-对象成员扩展"><a href="#8-对象成员扩展" class="headerlink" title="8.对象成员扩展"></a>8.对象成员扩展</h4><pre><code>    $.extend([deep],target,Object1....)        // deep  拷贝深度  false/true         // target 要拷贝的对象        // 带拷贝的对象</code></pre><h5 id="1-浅拷贝"><a href="#1-浅拷贝" class="headerlink" title="1.浅拷贝"></a>1.浅拷贝</h5><pre><code>    当一个对象包含复杂成分数据类型的成员时，引用地址会拷贝给目标对象。 类似于赋值 "="</code></pre><pre class="line-numbers language-none"><code class="language-none">$.extend(targetObj,obj);        console.log(targetObj);    //{id:1,msg:{age:18},name:"andy"}        targetObj.msg.age = 20;        console.log(obj.msg.age);  // 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-深拷贝"><a href="#2-深拷贝" class="headerlink" title="2.深拷贝"></a>2.深拷贝</h5><pre class="line-numbers language-none"><code class="language-none">$.extend(true,targetObj,obj);        console.log(targetObj);    //{id:1,msg:{age:18},name:"andy"}        targetObj.msg.age = 20;            // targetObj.msg 和  obj.msg 对象不同        console.log(obj.msg.age);  // 18<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-获取服务器响应结果-ajax"><a href="#9-获取服务器响应结果-ajax" class="headerlink" title="9.获取服务器响应结果 ($.ajax())"></a>9.获取服务器响应结果 ($.ajax())</h4><pre class="line-numbers language-none"><code class="language-none">&lt;script src="jquery-3.6.0.js"&gt;&lt;/script&gt;    &lt;script&gt;        $.ajax({            type: 'GET',                        url: 'server.html',            //请求地址            data: {id:2,name:'hello'},                success: function(msg){        //成功后执行的函数                console.log(msg);            }        });    &lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Ajax-使用"><a href="#Ajax-使用" class="headerlink" title="Ajax 使用"></a>Ajax 使用</h5><h6 id="1-高级应用"><a href="#1-高级应用" class="headerlink" title="1.高级应用"></a>1.高级应用</h6><pre><code>$.get(URL[,data][,fn][,type])        $.post(URL[,data][,fn][,type])$.getJSON(URL[,data][,fn])                //通过 http get 载入 JSON 信息$.getScript(URL[,fn])                    // 载入并执行一个 javaScript文件对象.load(URL[,data][,fn])                //载入远程HTML文件代码并插入至DOM中</code></pre><h6 id="2-底层应用"><a href="#2-底层应用" class="headerlink" title="2.底层应用"></a>2.底层应用</h6><pre><code>$.ajax(URL[,Options])                    //通过HTTP 请求加载远程数据$.ajaxSetup(Options)                    //设置全局Ajax默认选项</code></pre><h3 id="9-正则表达式-x2F-a-zA-Z0-9-n-m-x2F"><a href="#9-正则表达式-x2F-a-zA-Z0-9-n-m-x2F" class="headerlink" title="9.正则表达式  (/^[a-zA-Z0-9_-]{n,m}$/)"></a>9.正则表达式  (/^[a-zA-Z0-9_-]{n,m}$/)</h3><h4 id="1-使用"><a href="#1-使用" class="headerlink" title="1.使用"></a>1.使用</h4><pre class="line-numbers language-none"><code class="language-none">var str = '123';var reg2 = /abc/;                //字面量方式var reg1 = new RegExp(/123/);    //RegExp构造函数方式console.log(reg1.test(str));       //匹配结果  trueconsole.log(reg2.test(str));    //匹配结果  false//通用正则表达式var reg = /^[a-zA-Z0-9_-]{n,m}$/;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-模式修饰符"><a href="#2-模式修饰符" class="headerlink" title="2.模式修饰符"></a>2.模式修饰符</h4><h5 id="语法格式：-x2F-表达式-x2F-switch"><a href="#语法格式：-x2F-表达式-x2F-switch" class="headerlink" title="语法格式： /表达式/[switch]"></a>语法格式： /表达式/[switch]</h5><p>模式符            说明<br>    g                用于在目标字符串中实现全局匹配<br>    i                忽略大小写<br>    m                实现多行匹配<br>    u                以Unicode编码执行正则表达式<br>    y                黏性匹配，仅匹配目标字符中此正则表达式的lastIndex属性指示的索引</p><h4 id="3-特殊字符"><a href="#3-特殊字符" class="headerlink" title="3.特殊字符"></a>3.特殊字符</h4><pre><code>    一个正则表达式有简单和特殊字符组合。如 /ab*c/  ,特殊字符被称为元字符，是具有特殊意义的专用符号。        有 ^ , . , $ , * 等。</code></pre><h5 id="1-边界符"><a href="#1-边界符" class="headerlink" title="(1)边界符"></a>(1)边界符</h5><pre><code>原来提示字符所处的位置</code></pre><pre class="line-numbers language-none"><code class="language-none">边界符    ^        匹配行首文本    $        匹配行尾文本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-预定义类"><a href="#2-预定义类" class="headerlink" title="(2)预定义类  . \"></a>(2)预定义类  . \</h5><h6 id="1-常见模式的简写方式"><a href="#1-常见模式的简写方式" class="headerlink" title="1.常见模式的简写方式"></a>1.常见模式的简写方式</h6><pre class="line-numbers language-none"><code class="language-none">预定义字符            含义                                    其他写法        .            匹配除 \n 之外的任何单位字符                        \d            匹配 0-9 任意一个数字                        [0-9]        \D            匹配 0-9 之外的字符                            [^0-9]        \w            匹配 任意的字母，数字和下划线                 [a-zA-Z0-9_]        \W            匹配 特殊字符                                [^a-zA-Z0-9_]        \s            匹配 空格(换行，制表，空格)                     [\t\r\n\v\f]        \S            匹配 非空格                                    [^\t\r\n\v\f]        \f            匹配 换页符(form-feed)                    \b            匹配 单词分界符    (例："\bg", "best grade",输出"g")             \B            匹配非单词分界符 (例： "\Bade", 输出"ade")        \t            匹配 水平制表符(tab)        \n            匹配 换行符(linefeed)        \xhh        匹配 ISO-8859-1值为 hh (2个16进制数字)的字符 (例： "\x61"  表示 "a")        \r            匹配 回车符         \v            匹配 垂直制表符(vertical tab)        \uhhhh        匹配 Unicode 值为 hhhh (4个16进制数字)的字符 (例： "\u597d"  表示 "好")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-转译特殊字符"><a href="#2-转译特殊字符" class="headerlink" title="2.转译特殊字符"></a>2.转译特殊字符</h6><p>正则表达式中使用 “" 转译特殊字符。<br>    选择符 “|” 为 “或” ， 多条件查询。<br>        str 的 “"  需要 “\“ 去匹配。 </p><pre class="line-numbers language-none"><code class="language-none">var str = '^abc\\1.23*edf$';var reg = /\.|\$|\*|\^|\\/gi;str.match(reg);                        // 输出结果： (5)[ "^", "\" , "." , "*" , "$" ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-字符类"><a href="#3-字符类" class="headerlink" title="(3)字符类 []"></a>(3)字符类 []</h5><p>当有字符匹配 字符类中的字符，则匹配成功。</p><pre class="line-numbers language-none"><code class="language-none">pattern(模式)        含义    [ab]                    匹配字符类中的任意一个字符    [^ab]    [A-Z]    [^a-z]    [a-zA-Z0-9]    [\4e00-\u9fa5]            匹配任意一个中文字符    例：        var reg = /[abc]/;        console.log(reg.test('red'));         // false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-取反符"><a href="#4-取反符" class="headerlink" title="(4)取反符  ^[]"></a>(4)取反符  ^[]</h5><p>字符类和元字符一起使用，被称为 取反符</p><pre class="line-numbers language-none"><code class="language-none">var reg = /^[^a-z]$/;console.log(rg.test('a'));        //  falseconsole.log(rg.test('A'));        //  true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-量词符与括号字符"><a href="#4-量词符与括号字符" class="headerlink" title="4.量词符与括号字符"></a>4.量词符与括号字符</h4><h5 id="1-量词符-、-、-、"><a href="#1-量词符-、-、-、" class="headerlink" title="1.量词符        ? 、+ 、* 、{}"></a>1.量词符        ? 、+ 、* 、{}</h5><pre><code>设置某个模式出现的次数，通过量词（ ? 、+ 、* 、{} ）</code></pre><p>字符                说明                                示列                结果<br>    ?                    匹配 ? 前面的字符零次或一次            hi?t                可以匹配 ht 和 hit<br>    +                    匹配 + 前面的字符一次或多次            bre+ad                匹配范围 bread 到 bre…ad<br>    *                    匹配 * 前的字符零次或多次            ro*se                可以匹配 res 到 ro…se<br>    {n}                    匹配 {}    前面的字符n次                hit{2}er            匹配 hitter<br>    {n,}                匹配 {} 前面的字符最少n次            hit{2}er<br>    {n,m}                匹配 {} 前面的字符最少n次，最多m次     fe{0,2}l</p><h5 id="2-括号字符"><a href="#2-括号字符" class="headerlink" title="2.括号字符    ()"></a>2.括号字符    ()</h5><h6 id="1-改变限定符的作用范围"><a href="#1-改变限定符的作用范围" class="headerlink" title="1.改变限定符的作用范围"></a>1.改变限定符的作用范围</h6><pre class="line-numbers language-none"><code class="language-none">//作用范围    catch | er            catch er//作用范围    cat ( ch | er )        catch cater<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="2-分组"><a href="#2-分组" class="headerlink" title="2.分组"></a>2.分组</h6><p>当小括号后面有量词符，表示对整个组进行操作</p><pre class="line-numbers language-none"><code class="language-none">//作用范围    abc(2)                abcc//作用范围    a(bc){2}            abcbc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3-捕获和非捕获"><a href="#3-捕获和非捕获" class="headerlink" title="3.捕获和非捕获"></a>3.捕获和非捕获</h6><ol><li><p>match()捕获</p><pre class="line-numbers language-none"><code class="language-none">var reg = '1234'.match(/(\d)(\d)(\d)(\d)/);console.log(reg);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>replace()捕获  (String对象 利用$n 方式捕获)</p><pre class="line-numbers language-none"><code class="language-none">颠倒字符串顺序var str = 'Regular' Capture';var reg = /(\w+)\s(\w+)/gi;var newstr = str.replace(reg,'$2 $1');console.log(newstr);        //顺序调换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>(?:x)非捕获    (不存入系统缓存)<br>例：</p><pre class="line-numbers language-none"><code class="language-none">//非捕获var reg = /(?:J)(?:S)/;var res = 'JS'.replace(reg,'$2 $1');    //res      输出为        '$2 $1'   //捕获var reg = /(J)(S)/;var res = 'JS'.replaxe(reg,'$2 $1');    //res     输出为        'S J'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h6 id="4-贪婪与懒惰匹配"><a href="#4-贪婪与懒惰匹配" class="headerlink" title="4.贪婪与懒惰匹配"></a>4.贪婪与懒惰匹配</h6><p>   解释：当点字符(.)和量词符连用时，可匹配指定数量范围的任意字符。</p><pre class="line-numbers language-none"><code class="language-none">var str = 'webWEBWebwEB';var reg1 = /w.*b/gi;            //贪婪console.log(reg1.exec(str));    // 结果 webWEBWebwEBvar reg2 = /w.*?b/gi;            //懒惰console.log(reg2.exec(str));    // 结果 web<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="5-反向应用"><a href="#5-反向应用" class="headerlink" title="5.反向应用"></a>5.反向应用</h6><p>解释：在正则表达式中获取存放在缓存区内子表达式的捕获内容。<br>用法：用 “\n” 的方式引用。( “\1” 表示第1个子表达式的捕获内容)</p><pre class="line-numbers language-none"><code class="language-none">var str = '13335 12345 56668';var reg = /(\d)\1\1/gi;            // \d 匹配 一个0-9的数字，添加"()"可以反向引用获取捕获的内容。 var match = str.match(reg);console.log(match);              //结果  (2)["333","666"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="6-零宽断言"><a href="#6-零宽断言" class="headerlink" title="6.零宽断言"></a>6.零宽断言</h6><p>解释：零宽度的子表达式匹配。<br>用途：查找子表达式匹配的内容之前或之后是否有特定的字符集。<br>用法：正向预查和反向预查。<br>        正向预查：匹配含有或不含有捕获内容之前的数据，匹配的结果中不含捕获内容。<br>        反向预查：略(暂时)<br>字符            说明                                    实例<br>    x(?=y)            仅当 x 后面紧跟着 y 时，才匹配 x        Countr(?=y|ies)  匹配 Country Countries Countr<br>    x(?!y)            仅当 x 后面不紧跟着 y 时，才匹配 x        Countr(?!y|ies)  仅匹配 Countr</p><h4 id="5-正则表达式优先级"><a href="#5-正则表达式优先级" class="headerlink" title="5.正则表达式优先级"></a>5.正则表达式优先级</h4><p>符号                        说明<br>    \                            转义符<br>    (),(?:),(?=),[]                圆括号和中括号<br>    *,+,?,{n},{n,},{n,m}        限定符<br>    ^,$,\ (元字符和字符)         定位符<br>    |                            “或” 操作</p><h4 id="6-String类中的方法"><a href="#6-String类中的方法" class="headerlink" title="6.String类中的方法"></a>6.String类中的方法</h4><ol><li>match()方法<br>用途：<ol><li>在字符串内检索指定的值</li><li>在目标字符串中根据正则匹配出所有符合要求的内容，匹配成功或将其保存到数组中，匹配失败返回null。<pre class="line-numbers language-none"><code class="language-none">var str = "It`s is the shorthand of it is";var reg1 = /it/gi;str.match(reg1);        //匹配结果： (2)["It","it"]var reg2 = /^it/gi;str.match(reg2);        //匹配结果： ["It"]var reg3 = /s/gi;str.match(reg3);        //匹配结果： (4)["s","s","s","s"]var reg4 = /s$/gi;str.match(reg4);        //匹配结果： ["s"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li>search()方法<br>用途：返回指定模式的子串在字符串首出现的位置。<pre class="line-numbers language-none"><code class="language-none">var  str = '123*abc.456';console.log(str.search('.*));        //输出：0console.log(str.search(/[\.\*]/));  //输出：3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p>非正则表达<br>new EwgExp(参数)   返回任意字符在字符串str首次出现的位置</p><ol start="3"><li>split()方法<br>用途：根据指定的分隔符将一个字符串分割成字符串数组，不包括分割符。当分隔符不止一个时，定义正则对象完成字符串的分割操作</li><li>按照规则分割<pre class="line-numbers language-none"><code class="language-none">"@"和"."两种分隔符进行分割操作var str = 'test@123.com";var reg = /[@\.]/;var split_res = str.split(reg);console.log(split_res);                // 输出结果：(3)["test","123","com"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>指定分割次数 <pre class="line-numbers language-none"><code class="language-none">var str = 'We  are a family';var reg =/\s/;var split_res = str.split(reg,2);console.log(split_res);                //输出结果：(2)["We","are"]    当指定的次数小于实际字符串的次数时，最后返回结果会忽略其他的分割结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>rplace()方法<br>用途：替换字符串<pre class="line-numbers language-none"><code class="language-none">var str = 'Regular Capture';var reg = /(\w+)\s(\w+)/gi;var newstr = str.replace(reg,'$2 $1');console.log(newstr);        //    Capture Regular<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> jQuery </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOS配置</title>
      <link href="/2023/01/02/IOS%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/01/02/IOS%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、路由器配置"><a href="#一、路由器配置" class="headerlink" title="一、路由器配置"></a>一、路由器配置</h2><h3 id="客户机配置"><a href="#客户机配置" class="headerlink" title="客户机配置"></a>客户机配置</h3><h4 id="R1配置"><a href="#R1配置" class="headerlink" title="R1配置"></a>R1配置</h4><pre class="line-numbers language-none"><code class="language-none">noenable conf ter hostname R1inter g0/0no shutdown ip add 192.168.10.1 255.255.255.0inter g0/1ip add 192.168.30.1 255.255.255.0no shutdown exitroute ripversion 2network 192.168.10.0network 192.168.30.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="R2配置"><a href="#R2配置" class="headerlink" title="R2配置"></a>R2配置</h4><pre class="line-numbers language-none"><code class="language-none">noenable conf ter hostname R2inter g0/0no shutdown ip add 192.168.20.1 255.255.255.0inter g0/1ip add 192.168.30.1 255.255.255.0no shutdown exitroute ripversion 2network 192.168.20.0network 192.168.30.0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、交换机初始化"><a href="#二、交换机初始化" class="headerlink" title="二、交换机初始化"></a>二、交换机初始化</h2><h3 id="配置虚拟终端登录（全局配置）"><a href="#配置虚拟终端登录（全局配置）" class="headerlink" title="配置虚拟终端登录（全局配置）"></a>配置虚拟终端登录（全局配置）</h3><pre class="line-numbers language-none"><code class="language-none">enable secret PASSWORDline vty 0 4password 123login enable secret PASSWORD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-MS1配置"><a href="#1-MS1配置" class="headerlink" title="1.MS1配置"></a>1.MS1配置</h3><pre class="line-numbers language-none"><code class="language-none">enable conf ter hostname MS1vlan 10name test10exitvlan 20name test20exitinterface vlan 10ip add IP_ADDRinterface vlan 20 ip add IP_ADDinter fa0/1switchport mode accessswitchport access vlan 10inter fa0/2switchport mode accessswitchport access vlan 20exitip routing <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-设置主机IP地址及网关地址（涉及到多个网络即多个不同的局域网）"><a href="#2-设置主机IP地址及网关地址（涉及到多个网络即多个不同的局域网）" class="headerlink" title="2.设置主机IP地址及网关地址（涉及到多个网络即多个不同的局域网）"></a>2.设置主机IP地址及网关地址（涉及到多个网络即多个不同的局域网）</h3><h3 id="3-路由器设备"><a href="#3-路由器设备" class="headerlink" title="3.路由器设备"></a>3.路由器设备</h3><h4 id="R1配置-1"><a href="#R1配置-1" class="headerlink" title="R1配置"></a>R1配置</h4><pre class="line-numbers language-none"><code class="language-none">enbaleconf ter hostname R1inter g0/0no shutdownip add 192.168.3.1 255.255.255.0inter g0/1no shutdownip add 192.168.1.1 255.255.255.0exitroute ripversion 2network 192.168.1.0network 192.168.3.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="R2配置-1"><a href="#R2配置-1" class="headerlink" title="R2配置"></a>R2配置</h4><pre class="line-numbers language-none"><code class="language-none">enbaleconf ter hostname R2inter g0/0no shutdownip add 192.168.3.2 255.255.255.0inter g0/1no shutdownip add 192.168.2.1 255.255.255.0exitroute ripversion 2network 192.168.2.0network 192.168.3.0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="IP地址计算"><a href="#IP地址计算" class="headerlink" title="IP地址计算"></a>IP地址计算</h2><h3 id="给定IP地址-192-55-12-120-子网掩码-255-255-255-240"><a href="#给定IP地址-192-55-12-120-子网掩码-255-255-255-240" class="headerlink" title="给定IP地址: 192.55.12.120      子网掩码:255.255.255.240"></a>给定IP地址: 192.55.12.120      子网掩码:255.255.255.240</h3><h3 id="第一题-求子网号"><a href="#第一题-求子网号" class="headerlink" title="第一题:求子网号"></a>第一题:求子网号</h3><h4 id="第一步-将IP地址-子网掩码的十进制地址转换为二进制"><a href="#第一步-将IP地址-子网掩码的十进制地址转换为二进制" class="headerlink" title="第一步,将IP地址,子网掩码的十进制地址转换为二进制"></a>第一步,将IP地址,子网掩码的十进制地址转换为二进制</h4><pre><code>    (PS: 网络地址 的 1 和 255 为特殊位被保留,所以有效计算的数为 254个)                                               最后8位分开,是因为C类网址(可以从子网掩码最后四位的 1111 0000 做理解)最后四位做主机号,以作区别.</code></pre><pre class="line-numbers language-none"><code class="language-none">192.55.12.120        11000000  00110111  00001100  0111 1000 255.255.255.240      11111111  11111111  11111111  1111 0000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="第二步-进行二进制个个位数的逐步-比较-A-x3D-B-1-0"><a href="#第二步-进行二进制个个位数的逐步-比较-A-x3D-B-1-0" class="headerlink" title="第二步,进行二进制个个位数的逐步 比较( A=B?1:0 )"></a>第二步,进行二进制个个位数的逐步 比较( A=B?1:0 )</h4><p>(PS:最后四位为主机号,不需要对比 因此为 0000)</p><pre class="line-numbers language-none"><code class="language-none">                     11000000  00110111  00001100  0111 0000                     192.55.12.112```                      ### 第二题:求主机号#### 由IP地址做十进制转换为二进制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>192.55.12.120        11000000  00110111  00001100  0111 1000</p><pre class="line-numbers language-none"><code class="language-none">将主机号分到的位数(子网掩码没有占用的段落 再转换为十进制 就是该主机在本地址的主机号)可得主机号:0.0.0.8### 第三题:直接广播地址直接广播地址(解释:有效的网络号 + 全为1 的主机号) 因此,由题目做给的IP地址,结合第一题信息                        (主机号)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>192.55.12.120  ==&gt;   11000000  00110111  00001100  0111 1000                                    </code></pre><pre class="line-numbers language-none"><code class="language-none">可得                                                      (主机号转变为) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>192.55.12.127   &lt;==   11000000  00110111  00001100  0111 1111</code></pre><pre class="line-numbers language-none"><code class="language-none">### 第四题:如果主机地址的头十位用于子网,那么184.231.138.239的子网屏蔽码是多少由题可知为B类网址(16+16)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>                转换</code></pre><p>184.231.138.239     ==&gt;    10111000  11100111  10001010  11 101111</p><pre class="line-numbers language-none"><code class="language-none">因为 主机的头十位用于子网 (解释:主机号的16中,前十位被子网占用)所以 子网掩码如下:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>                转换</code></pre><p>255.255.255.192     &lt;==    11111111  11111111  11111111  11 000000</p><pre class="line-numbers language-none"><code class="language-none">### 第五题:如果子网屏蔽码是  255.255.192.0,那么不需要经由路由器通信和主机129.23.144.16的是哪一类网络号相同的主机可以直接相连,不同的主机通过路由器相连.### 主机:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>129.23.144.16         10000001  00010111  10010000  00010000</p><pre class="line-numbers language-none"><code class="language-none">### 子网掩码:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>255.255.192.0         11111111  11111111  11000000  00000000</p><pre class="line-numbers language-none"><code class="language-none">从子网掩码可知,将主机号的前两位占用 所以在此将主机显示时,如下就可以明显的观察区别:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>129.23.144.16         10000001  00010111  10 010000  00010000</p><p>```</p><h3 id="可得信息"><a href="#可得信息" class="headerlink" title="可得信息:"></a>可得信息:</h3><p>当第三字节 前两位 被占用得主机号<br>以 10 ~ 11 (范围在128`192,不包括192)开头的数值范围,可以相互通信. </p>]]></content>
      
      
      <categories>
          
          <category> 网络运维 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 网络运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb 基础</title>
      <link href="/2023/01/02/JavaWeb-%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/01/02/JavaWeb-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-JSP标签"><a href="#1-JSP标签" class="headerlink" title="1.JSP标签"></a>1.JSP标签</h1><h3 id="1-java-变量转-jsp"><a href="#1-java-变量转-jsp" class="headerlink" title="1.java 变量转 jsp"></a>1.java 变量转 jsp</h3><pre class="line-numbers language-none"><code class="language-none">&lt;/pre&gt;1.java 变量转 jsp&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre code_snippet_id="1800145" snippet_file_name="blog_20160801_2_2452946" name="code" class="html"&gt;&lt;% String value = request.getParameter("key");%&gt;  &lt;label&gt;&lt;%=value %&gt;&lt;/label&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-jsp-变量转-js"><a href="#2-jsp-变量转-js" class="headerlink" title="2.jsp 变量转 js"></a>2.jsp 变量转 js</h3><pre class="line-numbers language-none"><code class="language-none">&lt;input type="text" name="firstname"&gt;test&lt;/input&gt;  &lt;script&gt;  var test = document.getElementById("firstname");  &lt;/script&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-js-转-Java"><a href="#3-js-转-Java" class="headerlink" title="3.js 转 Java"></a>3.js 转 Java</h3><pre class="line-numbers language-none"><code class="language-none">//虚拟表单提交  var temp = document.createElement("form");  temp.action = URL;//提交的地址  temp.method = "post";//也可指定为get  temp.style.display = "none";  var opt = document.createElement("textarea");  opt.name = key;  opt.value = value;  temp.appendChild(opt);  document.body.appendChild(temp);  temp.submit();    //java 代码    String var = request.getParameter("key");//此时var的值就是value  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-jsp转Java"><a href="#4-jsp转Java" class="headerlink" title="4.jsp转Java"></a>4.jsp转Java</h3><pre class="line-numbers language-none"><code class="language-none">String var = request.getParameter("key");//jsp表单提交了，就可以从request中获取。也可以虚拟表单提交。  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-js转jsp"><a href="#5-js转jsp" class="headerlink" title="5.js转jsp"></a>5.js转jsp</h3><pre class="line-numbers language-none"><code class="language-none">var test = "test";  document.getElementById("demo").innerHTML=test;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-java-转-js"><a href="#6-java-转-js" class="headerlink" title="6.java 转 js"></a>6.java 转 js</h3><pre class="line-numbers language-none"><code class="language-none">&lt;% String temp = request.getParameter("key");%&gt;  &lt;label name="test" hidden="hidden"&gt;&lt;%=temp %&gt;&lt;/label&gt;  &lt;script&gt;  var temp = document.createElement("test");  &lt;/script&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-JSP内置对象"><a href="#2-JSP内置对象" class="headerlink" title="2.JSP内置对象"></a>2.JSP内置对象</h1><h3 id="JSP提供9个内置对象"><a href="#JSP提供9个内置对象" class="headerlink" title="JSP提供9个内置对象:"></a>JSP提供9个内置对象:</h3><pre><code> 对象名称         衍生类     功能简述</code></pre><p>(1)requestJavax.servelet.ServletRequest.HttpServletRequest 取得客户端与系统的信息</p><p>(2)responseJavax.servlet.Servlet Request.HTTP Servlet.Response响应客户端信息</p><p>(3)applicationJavax,servlet.ServletContext记录和处理上线者共享的数据</p><p>(4)sessionJavax.servlet.Http.Session记录和处理上线者的个别数据</p><p>(5)outJavax.servlet.jsp.writer控制数据输出的操作</p><p>(6)configJavax.servlet.servletConfig取得JSP编译后Servlet信息</p><p>(7)PageContextJavax.servlet.jsp.PageContext存储和处理系统运行时的各种信息</p><p>(8)pageJavax.lang.Object代表目前的这个JSP网页对象</p><p>(9)exceptionJavax.lang.Throwable异常处理机制</p><h3 id="内置对象生命周期"><a href="#内置对象生命周期" class="headerlink" title="内置对象生命周期"></a>内置对象生命周期</h3><p>  application &gt; session &gt; page &gt; request</p><h3 id="Request内置对象"><a href="#Request内置对象" class="headerlink" title="Request内置对象:"></a>Request内置对象:</h3><h4 id="一-Request内置对象的常用方法"><a href="#一-Request内置对象的常用方法" class="headerlink" title="一:Request内置对象的常用方法"></a>一:Request内置对象的常用方法</h4><pre><code>    方法                               说明     (1)  getAttribute( String name)       返回 name 所指的值     (2) setAttribute( String name , Object obj)  设定name所指定的属性为 obj     (3) removeAttribute( String name)       删除name所指定的属性     (4) getAttributeNames()       返回request对象所有的属性名称集合     (5) getParameter( String name)       从客户端获取name所指定的参数     (6) getParameter Names()       从客户端获取所有参数名称     (7) getParameterValues( String name)       从客户端获取所指定参数的所有值     (8) setCharacterEncoding( String encoding)设定请求正文中所使用的字符编码(只支持post提交的数据)</code></pre><h5 id="Request内置对象应用实例"><a href="#Request内置对象应用实例" class="headerlink" title="Request内置对象应用实例"></a>Request内置对象应用实例</h5><pre class="line-numbers language-none"><code class="language-none">       &lt;% Enumeration enu = request.getParameterNames(); //page标签导入 import="Java.util.*" while(enu.hasMoreElements()){ String parameterName = (String) enu.nextElement(); String parameterValue = request.getParameter(parameterName); out.print("参数名称:"+parameterName); out.print("\t参数内容:"+parameterValue);}   %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二-Response内置对象"><a href="#二-Response内置对象" class="headerlink" title="二:Response内置对象"></a>二:Response内置对象</h3><pre><code>方法说明    (1) setContentType( String type)       动态响应content Type属性    (2) setHeader( String name,String value)     设置HTTP应答报文的首部字段和值及自动更新    (3) setRedirect( String redirectURL)       将客户端重定向到指定URL     (4) setStatus( int n)       设定HTTP返回的状态值    (5) addCookie( Cookie cookie)       添加一个Cookie对象 </code></pre><h1 id="3-JSP语法"><a href="#3-JSP语法" class="headerlink" title="3.JSP语法"></a>3.JSP语法</h1><h3 id="一、JSP脚本标记"><a href="#一、JSP脚本标记" class="headerlink" title="一、JSP脚本标记"></a>一、JSP脚本标记</h3><h4 id="1-脚本段"><a href="#1-脚本段" class="headerlink" title="1.脚本段"></a>1.脚本段</h4><pre><code>    &lt;% Java程序段 %&gt;</code></pre><h4 id="2-JSP声明"><a href="#2-JSP声明" class="headerlink" title="2.JSP声明"></a>2.JSP声明</h4><pre><code>    &lt;%! 声明1;声明2; %&gt;    PS: 1.可以在 &lt;%@ page %&gt;直接使用已经声明的变量和方法        2.多个页面声明，写成单独的一个文件用             &lt;%@ include %&gt;/&lt;jsp:include&gt;</code></pre><h4 id="3-JSP表达式"><a href="#3-JSP表达式" class="headerlink" title="3.JSP表达式"></a>3.JSP表达式</h4><pre><code>    &lt;%= 变量/表达式 %&gt;</code></pre><h4 id="4-JSP注释"><a href="#4-JSP注释" class="headerlink" title="4.JSP注释"></a>4.JSP注释</h4><pre><code>    &lt;%--  --%&gt;</code></pre><h3 id="二、JSP指令标记"><a href="#二、JSP指令标记" class="headerlink" title="二、JSP指令标记"></a>二、JSP指令标记</h3><h4 id="1-page页面指令标记"><a href="#1-page页面指令标记" class="headerlink" title="1.page页面指令标记:"></a>1.page页面指令标记:</h4><pre><code>　　&lt;%@ page 属性1="value1" 属性2="value2“ %&gt;    属性（每次一个属性）:       (1)language: 脚本语言 Java        (2)import  在程序中导入的类和包        (3)session: true / false  设定HTTP Session        (4)autoFlash: true / false  设置缓冲区填满时 缓冲自动刷新        (5)isThreadSafe: true / false  设置JSP　页面支持多线程        (6)isErrorPage: false / true 　　指定当前页面作为另一页面的错误处理页码        (7)errorPage　　指定当前网页的错误处理页码的ＵＲＬ        (8)contentType: text/html;charset=gb2312                        页面响应的MIME类型；指定字符编码</code></pre><h4 id="２-include静态包含指令标记："><a href="#２-include静态包含指令标记：" class="headerlink" title="２.include静态包含指令标记："></a>２.include静态包含指令标记：</h4><pre><code>    &lt;%@　include file＝＂相对位置＂%&gt;    相同文件夹下   建议以 .jspf(jps fragment)(PS: 由于键值对,除import,pageEncoding,不可以引入其他相同属性)</code></pre><h4 id="3-taglib指令标记"><a href="#3-taglib指令标记" class="headerlink" title="3.taglib指令标记"></a>3.taglib指令标记</h4><pre><code>    &lt;%@taglib  url="标签库url"  prefix="自定义标签前缀" %&gt;    &lt;publi:loop&gt;        ...    &lt;/publi:loop&gt;</code></pre><h3 id="三、JSP动作标记"><a href="#三、JSP动作标记" class="headerlink" title="三、JSP动作标记"></a>三、JSP动作标记</h3><h4 id="1-jsp-include-传参详列-Page-25"><a href="#1-jsp-include-传参详列-Page-25" class="headerlink" title="1.jsp:include:(传参详列:Page 25)"></a>1.<a href="jsp:include">jsp:include</a>:(传参详列:Page 25)</h4><pre><code>    不带参数：&lt;jsp:include page="相对url" flush="true/false"/&gt;       带参数：&lt;jsp:include page="相对url" flush="true/false"/&gt;                          &lt;jsp:param name="属性名" value="属性值"/&gt;    // 传递多个参数给动态文件                         &lt;jsp:param...&gt;                   &lt;/jsp:include&gt;        </code></pre><h4 id="2-jsp-forward-服务器端跳转-浏览器地址栏不做变化"><a href="#2-jsp-forward-服务器端跳转-浏览器地址栏不做变化" class="headerlink" title="2.jsp:forward:(服务器端跳转,浏览器地址栏不做变化)"></a>2.<a href="jsp:forward">jsp:forward</a>:(服务器端跳转,浏览器地址栏不做变化)</h4><pre><code>     不带参数:  &lt;jsp:forward page="URL"&gt;        带参数:   &lt;jsp:forward page="URL"&gt;     &lt;jsp:param name="属性名" value="属性名"/&gt;      ...           &lt;/jsp:forward&gt;</code></pre><h4 id="3-jsp-param"><a href="#3-jsp-param" class="headerlink" title="3.jsp:param:"></a>3.<a href="jsp:param">jsp:param</a>:</h4><pre><code>      &lt;jsp:aram name="参数名"  value="参数值"/&lt;%=表达式%&gt;  /&gt;传递的参数通过request.getParameter("属性名")获取参数的值.单独使用&lt;jsp:param&gt;没有意义</code></pre><h4 id="4-jsp-plugin"><a href="#4-jsp-plugin" class="headerlink" title="4.jsp:plugin:"></a>4.<a href="jsp:plugin">jsp:plugin</a>:</h4><pre><code>&lt;jsp:plugin&gt;动作用于jsp网页加载Java Applet 或 JavaBean 程序组件,       与HTML的&lt;Applet&gt;和&lt;Object&gt;标签有类似的功能.常用属性表:       (1)  type:加载Java程序类型,可设置值Applet,Bean       (2)  code:加载Java程序编译后的类名称, showpic.class       (3)  codebase:  编译后Java程序类所在的目录,可设置绝对值路径或相对路径.  默认执行当前网页的目录默认值.       (4)  name:  用来加载Java Applet 和 JavaBean程序设置一个用以识别的名称.       (5)   align:  设置加载的程序在窗口的对齐方式,可设置由bottom,top,middle,left,right.       (6)  height:  加载程序在窗口中显示的高度       (7)  width:  加载程序在窗口中显示的宽度       (8)  hspace:  加载程序的显示器和网页其他内容的水平间距       (9)  vspace:  加载程序的显示区与网页其他内容的垂直距离       (10)  &lt;jsp:params&gt;:  将参数传递给加载程序,必须在&lt;jsp:params&gt;  &lt;/jsp/params&gt;中使用 &lt;jsp:param&gt; 来设置.</code></pre><h4 id="5-jsp-userBean-jsp-setProperty-和-jsp-getProperty动作标记"><a href="#5-jsp-userBean-jsp-setProperty-和-jsp-getProperty动作标记" class="headerlink" title="5.jsp:userBean jsp:setProperty 和 jsp:getProperty动作标记"></a>5.<a href="jsp:userBean">jsp:userBean</a> <a href="jsp:setProperty">jsp:setProperty</a> 和 <a href="jsp:getProperty">jsp:getProperty</a>动作标记</h4><pre><code>&lt;jsp:userBean&gt;动作标记用来加载JSP页面中使用的JavaBean    &lt;jsp:userBean id="Java Bean实列名称" scope"page / request / session / application"  class="package.class"&gt;    属性:            (1) id:  JavaBean实列名称            (2) scope:  指定该Bean变量的有效范围.            (3) class:  导入的Java包 例如:需求时间 导入 Java.util.Date       &lt;jsp:setProperty&gt;动作标记用于设置已经实列化的Bean对象属性</code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;jsp:setProperty name="JavaBean实列名称" {  property="*"  / property="属性名"  [param="参数"] / property="属性名'  value"{String&lt;%=表达式%&gt;" }/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>(PS:  &lt;jsp:setProerty&gt;中 name值 必须和 &lt;jsp:useBean&gt;中 id值相同, 且大小写敏感.&lt;jsp:getProerty&gt;动作标记可获得Bean的著性质,用于页面中显示.    &lt;jsp:getProerty name="JavaBean实列名称" property="属性名"/&gt;</code></pre><h1 id="数据库导入"><a href="#数据库导入" class="headerlink" title="数据库导入"></a>数据库导入</h1><h2 id="1-cn-com-Dao"><a href="#1-cn-com-Dao" class="headerlink" title="1.cn.com.Dao"></a>1.cn.com.Dao</h2><ol><li><p>cn.com.Dao.JDBCUtils</p><pre class="line-numbers language-none"><code class="language-none">package cn.com.Dao;import java.sql.*;public class JDBCUtils { //连接数据库，关闭数据库 接口 private static String url="jdbc:mysql://localhost:3306/student?serverTimezone=UTC"; private static String user="root"; private static String pwd="root"; // JDBC 驱动器 public static Connection getConnection() {  Connection conn = null;  try {   Class.forName("com.mysql.cj.jdbc.Driver");   conn=DriverManager.getConnection(url,user,pwd);  } catch (Exception e) {   // TODO Auto-generated catch block   e.printStackTrace();  }  return conn; } // 验证链接是否正常 public static void CloseAll(Connection conn,PreparedStatement prestmt,Statement stmt,ResultSet rs) {  if(rs!=null) {   try {    rs.close();    if(stmt!=null) {     stmt.close();    }    if(prestmt!=null) {     prestmt.close();    }    if(conn!=null) {     conn.close();    }   }    catch (SQLException e) {    e.printStackTrace();   }  } }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>cn.com.Dao.UserDAO</p><pre class="line-numbers language-none"><code class="language-none">package cn.com.Dao;import java.sql.*;import java.util.ArrayList;import java.util.List;import org.omg.CORBA.Request;import java.sql.Date;import java.text.SimpleDateFormat;import cn.com.JavaBean.User;public class UserDAO { /*  * 数据库查询  *   */ public List&lt;User&gt; findAllUsers(){  // 初始化数据  Connection conn=null;  Statement stmt=null;  List&lt;User&gt; users=null;  ResultSet rs=null;    try {  // 链接驱动器   conn =JDBCUtils.getConnection();  // 读取执行数据库操作命令   stmt=conn.createStatement();   String sql="select * from user2";   rs=stmt.executeQuery(sql);    // 创建对象储存数据   users=new ArrayList&lt;User&gt;();  // next() 一行行的执行数据   while(rs.next()) {        User u=new User();   // 用数据库的列名，准确性，可读性较高    u.setID(rs.getInt("ID"));    u.setName(rs.getString("Name"));    u.setPwd(rs.getString("Pwd"));    u.setEmail(rs.getString("Email"));    u.setSex(rs.getString("Sex"));    u.setBirthday(rs.getDate("Birthday"));   // 利用List数据的方法存入链数组    users.add(u);   }  } catch (SQLException e) {   e.printStackTrace();  }finally {   // 关闭数据库   JDBCUtils.CloseAll(conn, null, stmt, rs);  }  return users;   } /*  * 数据库删除  *   */ public boolean DeleteUserByID(int id) {  Connection conn=null;  PreparedStatement prestmt=null;  ResultSet rs=null;    try {   conn =JDBCUtils.getConnection();   String sql="delete from user2 where ID = ?";   prestmt=conn.prepareStatement(sql);   prestmt.setInt(1, id);   int row=prestmt.executeUpdate();   if(row&gt;0) {    return true;   }   return false;  } catch (SQLException e) {   e.printStackTrace();  }finally {   JDBCUtils.CloseAll(conn, prestmt, null, rs);  }  return false; } /*  * 数据库增加  *   */ public boolean InsertUserByID(User user) {  Connection conn=null;  PreparedStatement prestmt=null;  ResultSet rs=null;    try {   conn =JDBCUtils.getConnection();   String sql="insert into 'user' (Name,password,Email,sex,date) values (?,?,?,?)" ;   prestmt=conn.prepareStatement(sql);   prestmt.setString(1, user.getName());   prestmt.setString(2, user.getPassword());   prestmt.setString(3, user.getEmail());   prestmt.setString(4, user.getDate());   int row=prestmt.executeUpdate();   if(row&gt;0) {    return true;   }   return false;  } catch (SQLException e) {   e.printStackTrace();  }finally {   JDBCUtils.CloseAll(conn, prestmt, null, rs);  }  return false; }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="2-cn-com-JavaBean"><a href="#2-cn-com-JavaBean" class="headerlink" title="2.cn.com.JavaBean"></a>2.cn.com.JavaBean</h2><ol><li>cn.com.JavaBean.User<pre class="line-numbers language-none"><code class="language-none">package cn.com.JavaBean;import java.util.Date;/* * 创建 对象 对映数据库的数据  * 作为接口用于读取和写入的操作 */public class User { private int ID; private String Name; private String Pwd; private String Email; private Date Birthday; private String Sex; public int getID() {  return ID; } public void setID(int iD) {  ID = iD; } public String getName() {  return Name; } public void setName(String name) {  Name = name; } public String getPwd() {  return Pwd; } public void setPwd(String pwd) {  Pwd = pwd; } public String getEmail() {  return Email; } public void setEmail(String email) {  Email = email; } public Date getBirthday() {  return Birthday; } public void setBirthday(Date birthday) {  Birthday = birthday; } public String getSex() {  return Sex; } public void setSex(String sex) {  Sex = sex; } public User() {  super(); } @Override public String toString() {  return "User [ID=" + ID + ", Name=" + Name + ", Pwd=" + Pwd + ", Email=" + Email + ", Birthday=" + Birthday    + ", Sex=" + Sex + "]"; } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="3-cn-com-Impl"><a href="#3-cn-com-Impl" class="headerlink" title="3.cn.com.Impl"></a>3.cn.com.Impl</h2><p>1. </p><pre class="line-numbers language-none"><code class="language-none">package cn.com.lmpl;import cn.com.JavaBean.*;import java.util.List;import cn.com.Dao.*;/* * 数据封装 调用方法函数 */public class UserImpi { public List&lt;User&gt; findAllUsers(){  UserDAO ud = new UserDAO();  return ud.findAllUsers(); } public boolean DeleteUserByID(int id) {  UserDAO ud=new UserDAO();  return ud.DeleteUserByID(id); } public boolean InsertUser(User user){  return ud.InsertUser(user); }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-cn-com-Servlet"><a href="#4-cn-com-Servlet" class="headerlink" title="4.cn.com.Servlet"></a>4.cn.com.Servlet</h2><ol><li><p>cn.com.Servlet.DeleteUserByServlet</p><pre class="line-numbers language-none"><code class="language-none">package cn.com.Servlet;import jakarta.servlet.RequestDispatcher;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.List;import cn.com.JavaBean.User;import cn.com.lmpl.UserImpi;/** * Servlet implementation class DeleteUserByServlet */public class DeleteUserByServlet extends HttpServlet { private static final long serialVersionUID = 1L;           /**     * @see HttpServlet#HttpServlet()     */    public DeleteUserByServlet() {        super();    } /**  * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)  */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {  response.setCharacterEncoding("utf-8");  response.setContentType("text/html; charset=utf-8");  // 调用实现方法的对象  UserImpi ui =new UserImpi();    // 将前端的请求数据 获取并传入方法  int id =Integer.parseInt(request.getParameter("id")) ;    // 获取方法返回的数据，判断结果  boolean f=ui.DeleteUserByID( id);  if(f) {   response.getWriter().write("删除成功");  }else  {   response.getWriter().write("删除失败");  }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>cn.com.Servlet.InsertUserByServlet</p><pre class="line-numbers language-none"><code class="language-none">package cn.com.Servlet;import jakarta.servlet.RequestDispatcher;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.List;import cn.com.JavaBean.User;import cn.com.lmpl.UserImpi;/** * Servlet implementation class DeleteUserByServlet */public class InsertUserByServlet extends HttpServlet { private static final long serialVersionUID = 1L;           /**     * @see HttpServlet#HttpServlet()     */    public DeleteUserByServlet() {        super();    } /**  * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)  */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {  response.setCharacterEncoding("utf-8");  response.setContentType("text/html; charset=utf-8");            String name = requset.getParameter("Name");            String password = requset.getParameter("password");            String Email = requset.getParameter("Email");            String sex =  requset.getParameter("sex");            // String  date = requset.getParameter("date");            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");   String birthday = request.getParameter("birthday");    Date date = null;            try{                dat = new Date(sdf.parse(birthday));            }catch(ParseException e){                e.printStackTrace();            }            UserImpi ui = new UserImpi();            User u  = new User();            u.setName(name);            boolean flag = ui.InsertUser(u);            if(flag){                response.getWriter.write("成功");            }else{                response.getWriter.write("失败");            }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>cn.com.Servlet.ShowAllUserByServlet</p><pre class="line-numbers language-none"><code class="language-none">package cn.com.Servlet;import jakarta.servlet.RequestDispatcher;import jakarta.servlet.ServletException;import jakarta.servlet.annotation.WebServlet;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.List;import cn.com.JavaBean.User;import cn.com.lmpl.UserImpi;/**  * Servlet implementation class ShowAllUsersServlet */public class ShowAllUsersServlet extends HttpServlet { private static final long serialVersionUID = 1L;           /**     * @see HttpServlet#HttpServlet()     */    public ShowAllUsersServlet() {        super();    } /**  * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)  */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {  // 调用方法实现的对象  UserImpi ui =new UserImpi();  // 将从数据库获取的对象传入 List 数组  List&lt;User&gt; users=ui.findAllUsers();  // 创建服务器对象,缓存数据对象  request.setAttribute("users", users);  // 实现页面跳转  显示结果  RequestDispatcher rd = request.getRequestDispatcher("ShowUsers.jsp");  rd.forward(request, response);   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="5-InsertUser"><a href="#5-InsertUser" class="headerlink" title="5. InsertUser"></a>5. InsertUser</h2><pre class="line-numbers language-none"><code class="language-none">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"    pageEncoding="UTF-8"%&gt;   &lt;%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %&gt;   &lt;%@page import="cn.com.JavaBean.*,java.util.*" %&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;title&gt;数据库插入页面&lt;/title&gt;&lt;style type="text/css"&gt;table { border-collapse:collapse;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;     &lt;table&gt;        &lt;tr&gt;            &lt;td&gt;用户名&lt;/td&gt;            &lt;td&gt;&lt;input type="text" name="Name"&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;密码&lt;/td&gt;            &lt;td&gt;&lt;input type="text" name="password"&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;邮箱&lt;/td&gt;            &lt;td&gt;&lt;input type="text" name="Email"&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;性别&lt;/td&gt;            &lt;td&gt;                &lt;input type="radio" value="1" name="sex" checked&gt;                &lt;input type="radio" value="0" name="sex"&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;出生日期&lt;/td&gt;            &lt;td&gt;                &lt;input type="date" name="date"&gt;&lt;/input&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;&lt;td colspan="2"&gt;&lt;input type="submit" value="插入"&gt;&lt;/td&gt;&lt;/tr&gt;    &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础</title>
      <link href="/2023/01/02/JavaScript-%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/01/02/JavaScript-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-文字样式"><a href="#1-文字样式" class="headerlink" title="1.文字样式"></a>1.文字样式</h1><h2 id="CSS文件样式编辑"><a href="#CSS文件样式编辑" class="headerlink" title="CSS文件样式编辑"></a>CSS文件样式编辑</h2><pre class="line-numbers language-none"><code class="language-none">.class #id {  font-size: ;/* //字体大小 */  font-family: ; /* //字体 */  font-weight: ;/* //字体粗细 */  font-style: ;/* /字体风格 */  font: ;/* 综合设置字体 */} @font-face{ font-family: ; /* 字体名称 */; src: ; /* 字体路径 */}/* CSS文本外观属性 */*{ color: ;/* 文本颜色 */ letter-spacing:;/* 字间距 */ word-spacing:;/* 单词间距 */ line-height:;/* 行间距 */ text-transform:;/* 文本转换 */ none 默认;capitalized 首字符大写;uppercase 全部字符转换为大写;lowercase 全部字母转换为小写; text-decoration:;/* 文本装饰 */none 默认;underline 下划线;overline 上划线;line-through 删除线; text-align:;/* 水平对齐方式 */left  right  center (仅适用于块级元素) text-indent:;/* 首行缩进 */ white-space:;/* 空白符处理 */normal 空白无效化(仅一个空格); pre 预格式化; nowrap 空白无效化(一行,无视字数量); text-shadow:;/* 阴影效果 */h-shadow 水平阴影距离; v-shadow 垂直到阴影的距离; blur 模糊半径; color 阴影颜色; text-overflow:;/* 表示对象内溢出文本 */ clip 修剪溢出文本,不显示省略标签; ellipsis 用省略标签"..."替代; word-wrap:;/* 实现长单词或者URL地址(统一资源定位器)的自动换行 */break-word 内部换行(保持文本在ui设计面板内部);}/* CSS复合选择器 */一,以标签为选择的1 标签选择器p{}2 后代选择器p strong{}3 并集选择器(较特殊,各种都可以并集)h2 h3 p .class{}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链接伪类控制超链接"><a href="#链接伪类控制超链接" class="headerlink" title="链接伪类控制超链接"></a>链接伪类控制超链接</h2><pre class="line-numbers language-none"><code class="language-none">a:link{    /* 默认格式 */}a:visited{    /* 被访问之后的样式 */}a:hover{    /* 鼠标指针经过，悬停时超链接的样式 */}a:active{    /* 鼠标点击不放时的样式 */}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-选择器关系"><a href="#2-选择器关系" class="headerlink" title="2.选择器关系"></a>2.选择器关系</h1><h3 id="一、属性选择器"><a href="#一、属性选择器" class="headerlink" title="一、属性选择器"></a>一、属性选择器</h3><pre><code>1.只要 P 元素 id 属性以 "one" 开头就会被选中p[id^="one"]{ }2.匹配包含 id 属性,且 id 属性值是 "section" 结尾的 div 元素div[id$="section"]{ }3.匹配包含 id 属性,且 id 属性值包含 "section" 字符串的任意 div 元素div[id*="section"]{ }</code></pre><h3 id="二、关系选择器"><a href="#二、关系选择器" class="headerlink" title="二、关系选择器"></a>二、关系选择器</h3><pre><code>1.子选择器      /* 当子元素只做某个父元素的子类时生效 */h1&gt;strong{ }2.兄弟选择器/* 在某个元素选择器后触发 */    (1)临近选择器       /*  在位于同一父级元素; 第二个元素 紧跟着 第一个元素 */    p+h2{ }    (2)普通兄弟选择器    /*  在位于同一父级元素; 第二个元素 不必跟着 第一个元素 */    p~h2{ }</code></pre><h3 id="三、结构化伪类选择器"><a href="#三、结构化伪类选择器" class="headerlink" title="三、结构化伪类选择器"></a>三、结构化伪类选择器</h3><pre><code>1.:root选择器     /* 用于匹配文档根标签 ，全局设定 */:root{ } == *{ }2.:not选择器    /* 排除 父结构元素 下 子结构元素 该功能的继承效果 */body *:not(h2){ }3.:only-child选择器      /* 用于匹配 父元素 有且仅有一个 子元素 才生效的 */strong:only-child{ }4.:first-child 和 :last-child 选择器      /* 和 :only-child选择器 条件类似 */p:first-child{ } / p:last-child{ } 5.:nth-child(n) 和 :nth-last-child(n) 选择器    /* 两者的关系是 顺数 或 倒数 */  6.:nth-of-type(n) 和 :nth-last-of-type(n) 选择器     /* 匹配 标签本身 的顺序 */h2:nth-of-type(odd){ }   匹配 h2 的奇数行h2:nth-of-type(even){ }  匹配 h2 的偶数行p:nth-last-of-type(2){ } 匹配 p 倒数的第二数行7.:empty选择器     /* 匹配 没有 子元素 或 文本内容为空 所有元素 */:empty{ }</code></pre><h3 id="四、伪元素选择器-x2F-这对已经定义好的伪元素使用的选择器-x2F"><a href="#四、伪元素选择器-x2F-这对已经定义好的伪元素使用的选择器-x2F" class="headerlink" title="四、伪元素选择器     /* 这对已经定义好的伪元素使用的选择器 */"></a>四、伪元素选择器     /* 这对已经定义好的伪元素使用的选择器 */</h3><pre><code>1.:before伪元素选择器  必须配合 content 属性指定要插入的内容p:before{content: " ";}2.:after为元素选择器p:after{content: " ";}</code></pre><h1 id="3-表格-表单"><a href="#3-表格-表单" class="headerlink" title="3.表格 表单"></a>3.表格 表单</h1><h3 id="网页底部信息版本"><a href="#网页底部信息版本" class="headerlink" title="网页底部信息版本"></a>网页底部信息版本</h3><pre class="line-numbers language-none"><code class="language-none">&lt;caption&gt; &lt;/caption&gt;    定义表格的标题&lt;table border="" (表格边框)&gt;     &lt;tr&gt;        &lt;td&gt;        &lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建表格："><a href="#创建表格：" class="headerlink" title="创建表格："></a>创建表格：</h3><h4 id="一、table标签属性"><a href="#一、table标签属性" class="headerlink" title="一、table标签属性"></a>一、table标签属性</h4><pre><code>1.border：表格边框      border-collapse：collapse;  边框合并。         1.HTML设置cellspacing属性无效 2.tr 无border属性2.cellspacing：单元格间距离3.cellpadding：单元格内容与单元格边缘距离4.withd：宽5.height：高6.align：left，center，right 表格在网页的对齐方式7.bgcolor：背景颜色8.background：url（）设置表格背景图像</code></pre><h4 id="二、tr标签属性"><a href="#二、tr标签属性" class="headerlink" title="二、tr标签属性"></a>二、tr标签属性</h4><pre><code>1.height：高2.align：left，center，right  一行内容水平对齐方向3.valign： 一行内容的垂直对齐方向4.bgcolor：背景行颜色5.background：url() 设置行背景图片</code></pre><h4 id="三、td标签属性"><a href="#三、td标签属性" class="headerlink" title="三、td标签属性"></a>三、td标签属性</h4><pre><code>1.height：高2.align：left，center，right  一行内容水平对齐方向3.valign： 一行内容的垂直对齐方向4.bgcolor：背景行颜色5.background：url() 设置行背景图片6.colspan：单元格横跨列数7.rowspan：单元格纵跨列数</code></pre><h4 id="四、th-和-td-相同"><a href="#四、th-和-td-相同" class="headerlink" title="四、th 和 td 相同"></a>四、th 和 td 相同</h4><pre><code>但用于定义表头单元格，默认加粗，居中显示</code></pre><h4 id="五、表格结构"><a href="#五、表格结构" class="headerlink" title="五、表格结构"></a>五、表格结构</h4><pre><code>1.thead：定义表格头部，包含网页logo和导航头部信息2.tfoot：定义表格页脚，位于 thead 标签后，包含网页底部的企业信息3.tbody：定义表格的主体，位于 tfoot 标签后，包含其他内容</code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;form action="url地址" method="提交方式" name="调单名称"&gt;&lt;/form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建表单："><a href="#创建表单：" class="headerlink" title="创建表单："></a>创建表单：</h3><h4 id="一、action属性"><a href="#一、action属性" class="headerlink" title="一、action属性"></a>一、action属性</h4><pre><code>1.当提交表单时，数据会传送到 名为 ” “的页面2.可以是相对路径或者绝对路径。  列如： action=mailto：htmlcss@163.com</code></pre><h4 id="二、method属性"><a href="#二、method属性" class="headerlink" title="二、method属性"></a>二、method属性</h4><pre><code>&lt;form action="form_action.asp" method="get / post" name="调单名称"&gt;用于指明表单处理服务器数据的方法1.get：保密差，数据量有限制2.post：保密好，数据量无限制</code></pre><h4 id="三、name属性"><a href="#三、name属性" class="headerlink" title="三、name属性"></a>三、name属性</h4><pre><code>用于指定表单名称，表单控件中具有name属性的元素会将用户填写的内容交给服务器</code></pre><h4 id="四、autocomplete属性"><a href="#四、autocomplete属性" class="headerlink" title="四、autocomplete属性"></a>四、autocomplete属性</h4><pre><code>指定表单是否有自动完成功，将表单控件输入的内容记录下来1.on2.off</code></pre><h4 id="五、novalidate属性"><a href="#五、novalidate属性" class="headerlink" title="五、novalidate属性"></a>五、novalidate属性</h4><pre><code>指定在提交表单时取消对表单进行有效的检查1.novalidate="novalidate”</code></pre><h3 id="lt-input-gt-表单控件"><a href="#lt-input-gt-表单控件" class="headerlink" title="< input >表单控件"></a>&lt; input &gt;表单控件</h3><h4 id="一、input控件"><a href="#一、input控件" class="headerlink" title="一、input控件"></a>一、input控件</h4><p>  (1)type属性<br>    1.text<br>    2.password<br>    3.radio：单选按钮<br>    4.checkbox：复选框<br>    5.button：普通按钮<br>    6.submit：提交按钮<br>    7.reset：重置按钮<br>    8.image：图像形式的提交按钮<br>    9.hidden：隐藏域<br>    10.file：文件域<br>  (2)name属性：控件名称<br>  (3)value属性:默认文本值<br>  (4)size属性：input控件在页面的显示宽度<br>  (5)readonly属性：只读无法修改<br>  (6)disabled属性：禁用该控件<br>  (7)checked属性：定义选择控件默认被选中<br>  (8)maxlength属性：控件允许输入的最多字符</p><p>  (9)email类型<br>  </p><pre class="line-numbers language-none"><code class="language-none">&lt;input type="email"/&gt;    专门用于验证Email输入框的内容的邮件格式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  (10)url类型<br>  <pre class="line-numbers language-none"><code class="language-none">&lt;input type="url"/&gt;    专门用于验证输入框的内容是url地址格式的文本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  (11)tel类型<br>  <pre class="line-numbers language-none"><code class="language-none">&lt;input type="tel"/&gt;    专门用于提供输入电话号码的文本框，配合 pattern 属性使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  (12)search类型<br>  <pre class="line-numbers language-none"><code class="language-none">&lt;input type="search"/&gt;    专门用于输入搜素关键词的文本框，在用户输入内容后，右侧会附带一个删除图标<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  (13)color类型<br>  <pre class="line-numbers language-none"><code class="language-none">&lt;input type="color"/&gt;    用于设置颜色的文本框，通过 value属性值 改变默认颜色<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  (14)number类型<br>  <pre class="line-numbers language-none"><code class="language-none">&lt; input type="number"/&gt;    专门用于验证文本框内容是否是数字或在限定范围内    1.value：    2.max：    3.min：    4.step：输入域合法的间隔的升降值，默认值1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>  (15)range类型<br>  <pre class="line-numbers language-none"><code class="language-none">&lt;input type="range"/&gt;用于提供一定范围内的输入范围<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  (16)Date pickers类型<br>  <pre class="line-numbers language-none"><code class="language-none">&lt;input type=Date，month，week /&gt; 1.Date 2.month 3.week 4.time 5.datetime 6.datetime-local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>  (17)autofocus属性<br>        用于指定页面加载后是否自动获取焦点<br>        1.true<br>        2.off<br>  (18)form属性<br>        1.可以在form表外进行操作<br>        2.在指定form属性为表单的id，所以该输入框任然属于表单的一部分<br>  (19)list属性<br>     <pre class="line-numbers language-none"><code class="language-none">例如：    &lt;from action="#" method="post"&gt;    请输入网址：&lt;input  type="url" list="url_list" name="weburl" /&gt;    &lt;datalist id="url_list"&gt;        &lt;option lable="百度" value="htpp://www.baidu.com"&gt;&lt;/option&gt;    &lt;/datalist&gt;    &lt;input type="submit" value="提交" /&gt;    &lt;/form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>  (20)multiple属性<br>        适用Email类型和file类型，可以多个内容段<br>  (21)placeholder属性<br>        输入框提供相关提示<br>  (22)required属性<br>        用于判断用户是否在表单输入框中输入内容，表单内容为空时，不允许用户提交表单<br>    <pre class="line-numbers language-none"><code class="language-none">&lt;input required="required"/&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><h3 id="二、textarea控件"><a href="#二、textarea控件" class="headerlink" title="二、textarea控件"></a>二、textarea控件</h3><pre><code>（1）name属性（2）readonly属性：只读无法修改（3）disabled属性：禁用该控件</code></pre><h3 id="三、select控件"><a href="#三、select控件" class="headerlink" title="三、select控件"></a>三、select控件</h3><h4 id="（1）select属性"><a href="#（1）select属性" class="headerlink" title="（1）select属性"></a>（1）select属性</h4><pre><code>    1.size：下拉菜单可见选项数    2.multiple：定义 multiple="multiple" 具有多选择功能</code></pre><h4 id="（2）option属性"><a href="#（2）option属性" class="headerlink" title="（2）option属性"></a>（2）option属性</h4><pre><code>    1.selected：定义 selected="selected" 默认选定</code></pre><h4 id="（3）optgroup属性"><a href="#（3）optgroup属性" class="headerlink" title="（3）optgroup属性"></a>（3）optgroup属性</h4><p> / 选项分组的方法和效果 /<br>例如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;from action="#" method="post"&gt;    &lt;select&gt;        &lt;optgroup lable="北京"&gt;            &lt;option&gt; &lt;/option&gt;            &lt;option&gt; &lt;/option&gt;        &lt;/optgroup&gt;         &lt;optgroup lable="上海"&gt;            &lt;option&gt; &lt;/option&gt;            &lt;option&gt; &lt;/option&gt;        &lt;/optgroup&gt;    &lt;/select&gt;&lt;/form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（4）keygen"><a href="#（4）keygen" class="headerlink" title="（4）keygen"></a>（4）keygen</h4><h4 id="（5）datalist属性"><a href="#（5）datalist属性" class="headerlink" title="（5）datalist属性"></a>（5）datalist属性</h4><pre><code>    1.自行输入内容，指定输入框绑定的datalist元素</code></pre><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;from action="#" method="post"&gt;请输入用户名：&lt;input  type="text" list="namelist" /&gt;&lt;datalist id="namelist"&gt;    &lt;option&gt;admin&lt;/option&gt;&lt;/datalist&gt;&lt;input type="submit" value="提交" /&gt;&lt;/form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-布局"><a href="#4-布局" class="headerlink" title="4.布局"></a>4.布局</h1><h3 id="一、浮动"><a href="#一、浮动" class="headerlink" title="一、浮动"></a>一、浮动</h3><pre><code>选择器{float：left，right，none}</code></pre><h3 id="二、清除浮动"><a href="#二、清除浮动" class="headerlink" title="二、清除浮动"></a>二、清除浮动</h3><pre><code>选择器{clear:left,right，none，both}选择器{overflow：hidden}    消除子标签对父标签的影响选择器:after{必须设置 height:0 样式；必须设置 content:"".}</code></pre><h3 id="三、定位属性"><a href="#三、定位属性" class="headerlink" title="三、定位属性"></a>三、定位属性</h3><h4 id="1-定位模式"><a href="#1-定位模式" class="headerlink" title="(1)定位模式"></a>(1)定位模式</h4><pre><code>    选择器{position:属性值}    1.static:自动定位    2.relative:相对定位，相对于自身在同级文档流的移动    3.absolute：绝对定位，相对于父标签进行定位    4，fixed：固定定位，相对于浏览器进行定位</code></pre><h4 id="2-边偏移"><a href="#2-边偏移" class="headerlink" title="(2)边偏移"></a>(2)边偏移</h4><pre><code>    1.top    2.bottom    3.left    4.right </code></pre><h3 id="四、文本内容溢出"><a href="#四、文本内容溢出" class="headerlink" title="四、文本内容溢出"></a>四、文本内容溢出</h3><pre><code>选择器{overflow：属性值}1.visible：内容不会剪切，会呈现在标签框外2.hidden：溢出内容被剪切，且不可见3.auto：在需要时产生滚动条，自适应4.scroll：溢出内容会被修剪，浏览器会始终显示滚动条</code></pre><h3 id="五、标签顺序"><a href="#五、标签顺序" class="headerlink" title="五、标签顺序"></a>五、标签顺序</h3><pre><code>选择器{z-index：0}  数字越大优先级越高</code></pre><h1 id="5-过度、变形和动画"><a href="#5-过度、变形和动画" class="headerlink" title="5.过度、变形和动画"></a>5.过度、变形和动画</h1><h3 id="一、过度"><a href="#一、过度" class="headerlink" title="一、过度"></a>一、过度</h3><h4 id="1、transition-property属性"><a href="#1、transition-property属性" class="headerlink" title="1、transition-property属性"></a>1、transition-property属性</h4><pre><code>    功能:渐隐，渐显，速度变化（设置应用过度的CSS属性）    (1)none    (2)all    (3)property：定义应用过渡效果  // transition-property:background-color;    版本私有前缀：    -webkit-transition-property： 谷歌    -moz-transition-property：  火狐    -o-transition-property：    IE    -ms-transition-property：   欧朋</code></pre><h4 id="2、transition-duration属性"><a href="#2、transition-duration属性" class="headerlink" title="2、transition-duration属性"></a>2、transition-duration属性</h4><pre><code>    定义过渡效果持续时间    transition-duration：5s；</code></pre><h4 id="3、transition-timing-function属性"><a href="#3、transition-timing-function属性" class="headerlink" title="3、transition-timing-function属性"></a>3、transition-timing-function属性</h4><pre><code>    规定过渡效果的速度曲线    (1)liner:相同速度开始至结束的过渡效果，等同于 cubic-bezier(0,0,1,1);    (2)ease:以慢速开始，然后加快，最后慢慢结束的过渡效果，等同于 cubic-bezier(0。25,0.1,0.25,1);    (3)ease-in:以慢速开始，然后逐渐加快的过渡效果，等同于 cubic-bezier(0.42,0,1,1);    (4)ease-out:以慢速结束的过渡效果，等同于 cubic-bezier(0,0,0.58,1);    (5)ease-in-out:以慢速开始和结束的过渡效果，等同于 cubic-bezier(0.42,0,0.58,1);    (6)cubic-bezier(n,n,n,n):用于定义加速或者减速的贝塞尔曲线的形状（0~1值）。</code></pre><h4 id="4、transition-delay属性"><a href="#4、transition-delay属性" class="headerlink" title="4、transition-delay属性"></a>4、transition-delay属性</h4><pre><code>    规定过渡效果的开始时间    (1)transition-delay: time;</code></pre><h4 id="5、transition属性"><a href="#5、transition属性" class="headerlink" title="5、transition属性"></a>5、transition属性</h4><pre><code>    复合属性    transition：border-radius 5s ease-in-out 2s,                border-radius 5s ease-in-out 2s</code></pre><h3 id="二、变形"><a href="#二、变形" class="headerlink" title="二、变形"></a>二、变形</h3><h4 id="1、transform属性"><a href="#1、transform属性" class="headerlink" title="1、transform属性"></a>1、transform属性</h4><pre><code>    功能:平移、缩放、倾斜、旋转    (1)translate(): 移动元素，基于X，Y重新定位元素    (2)scale(): 缩放元素对象，使元素对象尺寸变化    (3)skew(): 倾斜元素对象，取值为度数值    (4)rotate(): 旋转元素对象，取值为度数值 </code></pre><h4 id="2、2D变形"><a href="#2、2D变形" class="headerlink" title="2、2D变形"></a>2、2D变形</h4><pre><code>    (1)平移        transform:translate(X,Y);    (2)缩放        transform:scale(X,Y);        第一值:负数(翻转)，0~1(缩小)，1(增大)        第二值:可以省略    (3)倾斜        transform:skew(X,Y);        单位值:deg，取值正负值，        第二值:默认0    (4)旋转        transform:rotate(angle);        单位值:deg，取值正值(顺时)，负值(逆时)    (5)更爱变换的中心        transform:X,Y,Z</code></pre><h4 id="3、3D变形"><a href="#3、3D变形" class="headerlink" title="3、3D变形"></a>3、3D变形</h4><pre><code>    (1)transform:rotateX(a);    (2)transform:rotateY(a);    (3)transform:rotated3d(1,1,0,45deg);</code></pre><h4 id="4、perspective属性"><a href="#4、perspective属性" class="headerlink" title="4、perspective属性"></a>4、perspective属性</h4><pre><code>    为呈现良好视距，3D视距旋转    (1)transform-style: 用于保存元素的3D空间        flat：子元素将不保留3D位置        preserve-3d：子元素将保留3D位置    (2)backface-visibility: 定义元素在屏幕时是否可见        visible:背面是可见        hidden:背面是不可见的</code></pre><h3 id="三、动画"><a href="#三、动画" class="headerlink" title="三、动画"></a>三、动画</h3><h4 id="1、-keyframes-规则"><a href="#1、-keyframes-规则" class="headerlink" title="1、@keyframes 规则"></a>1、@keyframes 规则</h4><pre><code>    (1)animationname: 表示当前动画的名称，他将作为引用的唯一标识，不为空    (2)keyframes-selector: 关键帧选择器，值可以是百分比，from（0%）或to（100%）    (3)css-styles: 定义执行到当前关键帧时对应的动画状态，有css样式属性进行定义，可多个属性，不能为空        语法格式:    <pre class="line-numbers language-none"><code class="language-none">@keyframes animationname {    keyframes-selector {        css-styles;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>    例如：    <pre class="line-numbers language-none"><code class="language-none">淡出动画@keyframes appear {    0%{ opacity:0; }    100%{ opacity:1; }}@keyframes appear {    from{ opacity:0; }    to{ opacity:1; }}@keyframes appear {    from to{ opacity:0; }    20% 80%{ opacity:1; }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h4 id="2、animation-name属性"><a href="#2、animation-name属性" class="headerlink" title="2、animation-name属性"></a>2、animation-name属性</h4><pre><code>    定义应用的动画名称    animationname-name: name;</code></pre><h4 id="3、animation-duration属性"><a href="#3、animation-duration属性" class="headerlink" title="3、animation-duration属性"></a>3、animation-duration属性</h4><pre><code>    定义整个动画效果完成效果所需要的时间    animation-duration:time;</code></pre><h4 id="4、animation-timing-function属性"><a href="#4、animation-timing-function属性" class="headerlink" title="4、animation-timing-function属性"></a>4、animation-timing-function属性</h4><pre><code>    规定动画的速度曲线</code></pre><h4 id="5、animation-delay属性"><a href="#5、animation-delay属性" class="headerlink" title="5、animation-delay属性"></a>5、animation-delay属性</h4><pre><code>    定义执行动画效果延迟的时间</code></pre><h4 id="6、animation-iteration-count属性"><a href="#6、animation-iteration-count属性" class="headerlink" title="6、animation-iteration-count属性"></a>6、animation-iteration-count属性</h4><pre><code>    定义动画的播放次数</code></pre><h4 id="7、animation-deraction属性"><a href="#7、animation-deraction属性" class="headerlink" title="7、animation-deraction属性"></a>7、animation-deraction属性</h4><pre><code>    定义当前动画播放的方向    (1)normal    (2)alternate:奇数正常，偶数逆向播放</code></pre><h4 id="8、animation属性"><a href="#8、animation属性" class="headerlink" title="8、animation属性"></a>8、animation属性</h4><pre><code>     复合属性        animation: mymove 5s linear 2s 3 alternate;</code></pre><h1 id="6-少见的标签功能"><a href="#6-少见的标签功能" class="headerlink" title="6.少见的标签功能"></a>6.少见的标签功能</h1><h4 id="1-nav标签"><a href="#1-nav标签" class="headerlink" title="1.nav标签"></a>1.nav标签</h4><pre><code>    定义导航链接</code></pre><h4 id="2-footer标签"><a href="#2-footer标签" class="headerlink" title="2.footer标签"></a>2.footer标签</h4><pre><code>    定义一个页面或者区域的底部</code></pre><h4 id="3-article标签"><a href="#3-article标签" class="headerlink" title="3.article标签"></a>3.article标签</h4><pre><code>    定义一篇日志，一条新闻或用户评论（代表文档、页面或者应用程序中与上下文不相关的独立部分）</code></pre><h4 id="4-section标签"><a href="#4-section标签" class="headerlink" title="4.section标签"></a>4.section标签</h4><pre><code>    小标题，</code></pre><h4 id="5-aside标签"><a href="#5-aside标签" class="headerlink" title="5.aside标签"></a>5.aside标签</h4><pre><code>    定义当前页面或者文章的附属信息部分</code></pre><h4 id="6-video-x2F-x2F-可以使用网站资源"><a href="#6-video-x2F-x2F-可以使用网站资源" class="headerlink" title="6.video  //可以使用网站资源"></a>6.video  //可以使用网站资源</h4><pre class="line-numbers language-none"><code class="language-none">&lt;video src="video.mp4" controls="controls"&gt;&lt;/video&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>    1.autoplay:页面加载完后自动播放视频    2.loop：视频结束时重现开始播放    3.preload：  // 在页面加载时进行加载        (1)auto:        (2)meta:        (3)none:    4.poster：        (1)URL:当视频缓冲不足时，该属性值链接一个图像，并将图像按一定比例显示出来    5.muted：嵌入的视频静音播放例如：</code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;video controls="controls"&gt;    &lt;source src="video.mp4" type="video/mp4"&gt;    &lt;source src="video.ogg" type="video/ogg"&gt;    &lt;source src="video.webm" type="video/webm"&gt;&lt;/video&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-audio"><a href="#7-audio" class="headerlink" title="7.audio"></a>7.audio</h4><pre class="line-numbers language-none"><code class="language-none">&lt;audio src="audio.mp3" controls="controls"&gt;&lt;/audio&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>    1.autoplay:页面加载完后自动播放音频    2.loop：音频结束时重现开始播放    3.preload：  // 在页面加载时进行加载        (1)auto:        (2)meta:        (3)none:例如：</code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;audio controls="controls"&gt;    &lt;source src="audio.mp3" type="audio/mp3"&gt;    &lt;source src="audio.ogg" type="audio/ogg"&gt;    &lt;source src="audio.wav" type="audio/wav"&gt;&lt;/audio&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-画布"><a href="#7-画布" class="headerlink" title="7.画布"></a>7.画布</h1><h3 id="一、画布使用"><a href="#一、画布使用" class="headerlink" title="一、画布使用"></a>一、画布使用</h3><h4 id="1-创建画布"><a href="#1-创建画布" class="headerlink" title="1.创建画布"></a>1.创建画布</h4><pre class="line-numbers language-none"><code class="language-none">&lt; canvas id="cavs" width=" " height=" "&gt; &lt;/canvas&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-获取画布"><a href="#2-获取画布" class="headerlink" title="2.获取画布"></a>2.获取画布</h4><pre class="line-numbers language-none"><code class="language-none">var canvas = ducument.getElementById('cavs');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-准备画笔"><a href="#3-准备画笔" class="headerlink" title="3.准备画笔"></a>3.准备画笔</h4><pre class="line-numbers language-none"><code class="language-none">canvas.getContext('2d'); // 如果三维画制造图片--webgl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="二、绘制线"><a href="#二、绘制线" class="headerlink" title="二、绘制线"></a>二、绘制线</h3><h4 id="1-初始位置"><a href="#1-初始位置" class="headerlink" title="1.初始位置"></a>1.初始位置</h4><pre class="line-numbers language-none"><code class="language-none">var cas = ducument.getElementById('cas');var context cas.getContext('2d');context.moveTo(100,100);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-连接端点"><a href="#2-连接端点" class="headerlink" title="2.连接端点"></a>2.连接端点</h4><pre class="line-numbers language-none"><code class="language-none">context.lineTo(100,100);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-描边"><a href="#3-描边" class="headerlink" title="3.描边"></a>3.描边</h4><pre class="line-numbers language-none"><code class="language-none">context.stroke();连接初始位置和连线端点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-绘制圆"><a href="#4-绘制圆" class="headerlink" title="4.绘制圆"></a>4.绘制圆</h4><pre class="line-numbers language-none"><code class="language-none">        arc(X,Y,Z,开始角度,结束角度,方向)```                例如:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>        context.arc(150,25,100,0.05*Math.PI,0.95*Math.PI);</code></pre><pre class="line-numbers language-none"><code class="language-none">####    5.线的样式        (1)宽度:context.lineWidth='10';        (2)描边颜色:context.strokeStyle='red / #f00';        (3)断电形状:lineCap='属性值'            [1]butt:默认直线方形边缘            [2]round:显示圆形端点            [3]square:显示方形端点### 三、线的路径####    1.重置路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>    context.beginPath();</code></pre><pre class="line-numbers language-none"><code class="language-none">####    2.闭合路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>    context.colsePath();    </code></pre><pre class="line-numbers language-none"><code class="language-none">####    3.填充路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>    context.fill();</code></pre><pre class="line-numbers language-none"><code class="language-none"># 8.DOM文档对象模型### 一、####    (1)获取元素        1. ducument.getElementById('自定义名')        2. ducument.getElementsByTagName('标签名') //集合 不能用push()等方法        3. element.getElementsByTagName('标签名')          4.document.getElementsByName('Name名')        5.document.getElementsByClassName('ClassName名')        6.document.querySelector('.box / #box / li')    ####    (2)document 对象属性        1.document.body        2.document.title        3.document.documentElement        4.document.forms        5.document.images####    (3)操作元素内容        1.element.innerHTML        2.element.innerText        3,element.textContent####    (4)操作元素属性        1.img元素            img.src / img.title         2.表单input元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>        &lt;button&gt;按钮&lt;/button&gt;        &lt;input type="text" value="输出内容"&gt;            &lt;script&gt;                var btn = document.querySelector('button');                var input = document.querySelector('input');                btn.onclick = function(){                    input.value = '被点击了！';                    this.disabled = true;                };            &lt;/script&gt;    <pre class="line-numbers language-none"><code class="language-none">####    (5)操作元素样式        1.style属性            background            backgroundColor            display            fontSize            height            left            listStyleType            overflow            textAlign            textDecoration            textIndent            transform####    (6)操作className属性####    (7)获取焦点 onfocus 失去焦点 onblur####    (8)排他思想        两层循环####    (9)鼠标指针经过时背景变色        table / thead tr th / tbody tr td ####    (10)        1.获取属性：div.getAttribute('id');        2.设置属性：div.setAttribute('index',2);        3.移除属性：div.removeAttribute('id');####    (11)节点层级        1.父节点            先建立document.querySelector('.child');                  child.parentNode;        2.子节点            childNodes            console.log(ul.childNodes[0].nodeType);# 9.常用命令规则{% tabs html文件 %}&lt;!-- tab html文件 --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><p>头  header<br>导航    nav<br>侧栏    siderbar<br>左，右，中间    left，right，center<br>标志    logo<br>页面主体    main<br>新闻    news<br>子导航  subnav<br>子菜单  submenu<br>内容    content / container<br>尾  footer<br>栏目    column<br>登录条  loinbar<br>广告    banner<br>热点    hot<br>下载    download<br>菜单    menu<br>搜索    search<br>友情链接    friedlink<br>滚动    scroll<br>文章列表    list<br>小技巧  tips<br>加入    joinus<br>服务    service<br>状态    status<br>合作伙伴    partner<br>版权    copyright<br>标签页  tab<br>提示信息    msg<br>栏目标题    title<br>指南    guild<br>注册    register<br>投票    vote</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- endtab --&gt;&lt;!-- tab CSS文件 --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>主要样式    master<br>模块样式    module<br>基本样式    base<br>版本样式    layout<br>专栏    columns<br>表单    forms<br>主题    themes<br>文字    font<br>打印    print</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- endtab --&gt;{% endtabs %}# 10. AJAX Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）不是新的编程语言，而是一种使用现有标准的新方法。AJAX 是与服务器交换数据并更新部分网页的技术，在不重新加载整个页面的情况下。用于创建快速动态网页的技术（通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新）。- 传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。- 有很多使用 AJAX 的应用程序案例：新浪微博、Google 地图、开心网等等。## 1. AJAX 应用### 1. AJAX 基于 Internet 标准- 运用 XHTML+CSS 来表达资讯；- 运用 JavaScript 操作 DOM（Document Object Model）来执行动态效果；- 运用 XML 和 XSLT 操作资料;- 运用 XMLHttpRequest 或新的 Fetch API 与网页服务器进行异步资料交换；注意：AJAX 与 Flash、Silverlight 和 Java Applet 等 RIA 技术是有区分的。AJAX是基于现有的Internet标准，并且联合使用它们：- XMLHttpRequest 对象 (异步的与服务器交换数据)- JavaScript/DOM (信息显示/交互)- CSS (给数据定义样式)- XML (作为转换数据的格式)### 2. AJAX 工作原理![AJAX 原理](https://www.runoob.com/wp-content/uploads/2013/09/ajax-yl.png)#### 1. 实例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><meta charset="utf-8"><script>function loadXMLDoc(){    // 1. 创建 XMLHttpRequest 对象    var xmlhttp;    if (window.XMLHttpRequest)    {   //  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码        xmlhttp=new XMLHttpRequest();}    else    {   // IE6, IE5 浏览器执行代码        xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");    }    // 2. 向服务器发送请求 和 服务器交换数据    xmlhttp.onreadystatechange=function(){        if (xmlhttp.readyState==4 && xmlhttp.status==200)        {            document.getElementById("myDiv").innerHTML=xmlhttp.responseText;        }    }    xmlhttp.open("GET","/try/ajax/ajax_info.txt",true);    xmlhttp.send();}</script><div id="myDiv"><h2>使用 AJAX 修改该文本内容</h2></div><button type="button" onclick="loadXMLDoc()">修改内容</button><pre class="line-numbers language-none"><code class="language-none">#### 1. AJAX - 创建 XMLHttpRequest 对象- XMLHttpRequest 是 AJAX 的基础。- 所有现代浏览器均支持 XMLHttpRequest 对象（IE5 和 IE6 使用 ActiveXObject）。XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。创建 XMLHttpRequest 对象的语法：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>variable=new XMLHttpRequest();<pre class="line-numbers language-none"><code class="language-none">老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>variable=new ActiveXObject("Microsoft.XMLHTTP");<pre class="line-numbers language-none"><code class="language-none">#### 2. AJAX - 向服务器发送请求- XMLHttpRequest 对象用于和服务器交换数据。向服务器发送请求如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的 open() 和 send() 方法：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>xmlhttp.open("GET","ajax_info.txt",true);xmlhttp.send();<pre class="line-numbers language-none"><code class="language-none">方法                 描述open(method,url,async) 规定请求的类型、URL 以及是否异步处理请求。                        -  method：请求的类型；GET 或 POST                        -  url：文件在服务器上的位置                        -  async：true（异步）或 false（同步）                        -  send(string)string：                仅用于 POST 请求                                -  将请求发送到服务器。setRequestHeader(header,value)      向请求添加 HTTP 头。                                    -  header: 规定头的名称                                    -  value: 规定头的值                        与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。然而，在以下情况中，请[使用 POST 请求](https://www.runoob.com/ajax/ajax-xmlhttprequest-send.html)：- 不愿使用缓存文件（更新服务器上的文件或数据库）- 向服务器发送大量数据（POST 没有数据量限制）- 发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠           ##### 1. Post如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>xmlhttp.open("POST","/try/ajax/demo_post2.php",true);xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");xmlhttp.send("fname=Henry&amp;lname=Ford");<pre class="line-numbers language-none"><code class="language-none">##### 2. Async1. 当使用 async=true 时，请规定在响应处于 onreadystatechange 事件中的就绪状态时执行的函数：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>xmlhttp.onreadystatechange=function(){    if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)    {        document.getElementById("myDiv").innerHTML=xmlhttp.responseText;    }}xmlhttp.open("GET","/try/ajax/ajax_info.txt",true);xmlhttp.send();<pre class="line-numbers language-none"><code class="language-none">2. 如需使用 async=false，请将 open() 方法中的第三个参数改为 false：我们不推荐使用 async=false，但是对于一些小型的请求，也是可以的。请记住，JavaScript 会等到服务器响应就绪才继续执行。如果服务器繁忙或缓慢，应用程序会挂起或停止。注意：当您使用 async=false 时，请不要编写 onreadystatechange 函数 - 把代码放到 send() 语句后面即可：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>xmlhttp.open("GET","/try/ajax/ajax_info.txt",false);xmlhttp.send();document.getElementById("myDiv").innerHTML=xmlhttp.responseText;<pre class="line-numbers language-none"><code class="language-none">#### 3. AJAX - 服务器响应如需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。属性        描述responseText获得字符串形式的响应数据。responseXML    获得 XML 形式的响应数据。##### 1. responseText 属性如果来自服务器的响应并非 XML，请使用 responseText 属性responseText 属性返回字符串形式的响应<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>document.getElementById("myDiv").innerHTML=xmlhttp.responseText;<pre class="line-numbers language-none"><code class="language-none">##### 2. responseXML 属性如果来自服务器的响应是 XML，而且需要作为 XML 对象进行解析<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>xmlDoc=xmlhttp.responseXML;txt="";x=xmlDoc.getElementsByTagName("ARTIST");for (i=0;i<x.length;i++) {="" txt="txt" +="" x[i].childnodes[0].nodevalue="" "<br="">";}document.getElementById("myDiv").innerHTML=txt;<pre class="line-numbers language-none"><code class="language-none">#### 4.  AJAX - onreadystatechange 事件当请求被发送到服务器时，我们需要执行一些基于响应的任务。每当 readyState 改变时，就会触发 onreadystatechange 事件。readyState 属性存有 XMLHttpRequest 的状态信息。下面是 XMLHttpRequest 对象的三个重要的属性：属性                 描述onreadystatechange    存储函数（或函数名）                        每当 readyState 属性改变时，就会调用该函数。readyState              存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。                        - 0: 请求未初始化                        - 1: 服务器连接已建立                        - 2: 请求已接收                        - 3: 请求处理中                        - 4: 请求已完成，且响应已就绪                 status                  200: "OK"                        404: 未找到页面在 onreadystatechange 事件中，我们规定当服务器响应已做好被处理的准备时所执行的任务。当 readyState 等于 4 且状态为 200 时，表示响应已就绪：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>xmlhttp.onreadystatechange=function(){    if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)    {        document.getElementById("myDiv").innerHTML=xmlhttp.responseText;    }}<pre class="line-numbers language-none"><code class="language-none">##### 1. 使用回调函数回调函数是一种以参数形式传递给另一个函数的函数。如果您的网站上存在多个 AJAX 任务，那么您应该为创建 XMLHttpRequest 对象编写一个标准的函数，并为每个 AJAX 任务调用该函数。该函数调用应该包含 URL 以及发生 onreadystatechange 事件时执行的任务（每次调用可能不尽相同）：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>function myFunction(){    loadXMLDoc("/try/ajax/ajax_info.txt",function()    {        if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)        {            document.getElementById("myDiv").innerHTML=xmlhttp.responseText;        }    });}<pre class="line-numbers language-none"><code class="language-none">#### 5. AJAX XML 实例当用户点击上面的"获取我收藏的 CD"这个按钮，就会执行 loadXMLDoc() 函数。loadXMLDoc() 函数创建 XMLHttpRequest 对象，添加当服务器响应就绪时执行的函数，并将请求发送到服务器。当服务器响应就绪时，会构建一个 HTML 表格，从 XML 文件中提取节点（元素），最后使用 XML 数据的 填充 id="demo" 的表格元素：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><meta charset="utf-8"><style>table,th,td {  border : 1px solid black;  border-collapse: collapse;}th,td {  padding: 5px;}</style><h1>XMLHttpRequest 对象</h1><p><button type="button" onclick="loadXMLDoc()">获取我收藏的 CD</button><br><br><br></p><table id="demo"></table><script>function loadXMLDoc() {  var xhttp = new XMLHttpRequest();  xhttp.onreadystatechange = function() {    if (this.readyState == 4 && this.status == 200) {      myFunction(this);    }  };  xhttp.open("GET", "cd_catalog.xml", true);  xhttp.send();}function myFunction(xml) {  var i;  var xmlDoc = xml.responseXML;  var table="<tr><th>Artist</th><th>Title</th></tr>";  var x = xmlDoc.getElementsByTagName("CD");  for (i = 0; i <x.length; i++) {    table += "<tr><td>" +    x[i].getElementsByTagName("ARTIST")[0].childNodes[0].nodeValue +    "</td><td>" +    x[i].getElementsByTagName("TITLE")[0].childNodes[0].nodeValue +    "</td></tr>";  }  document.getElementById("demo").innerHTML = table;}</script><pre class="line-numbers language-none"><code class="language-none">#### 6. AJAX JSON1. loadXMLDoc() 函数当用户点击上面的"获取课程数据"这个按钮，就会执行 loadXMLDoc() 函数。loadXMLDoc() 函数创建 XMLHttpRequest 对象，添加当服务器响应就绪时执行的函数，并将请求发送到服务器。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>function loadXMLDoc(){  var xmlhttp;  if (window.XMLHttpRequest)  {    // IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码    xmlhttp=new XMLHttpRequest();  }  else  {    // IE6, IE5 浏览器执行代码    xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");  }  xmlhttp.onreadystatechange=function()  {    if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)    {      var myArr = JSON.parse(this.responseText);      myFunction(myArr)    }  }  xmlhttp.open("GET","/try/ajax/json_ajax.json",true);  xmlhttp.setRequestHeader("Content-Type", "application/json;charset=UTF-8");  xmlhttp.send();}function myFunction(arr) {  var out = "";  var i;  for(i = 0; i &lt; arr.length; i++) {    out += '<a href="' + arr[i].url + '">' +     arr[i].title + '</a><br>';  } document.getElementById("myDiv").innerHTML=out;}<pre class="line-numbers language-none"><code class="language-none">当服务器响应就绪时，我们就使用 JSON.parse() 方法将数据转换为 JavaScript 对象。：2. AJAX 服务器页面上面这个例子中使用的服务器页面实际上是一个名为 "json_ajax.json" JSON 文件。JSON 数据如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>[  {    "title": "JavaScript 教程",    "url": "https://www.runoob.com/js/"  },  {    "title": "HTML 教程",    "url": "https://www.runoob.com/html/"  },  {    "title": "CSS 教程",    "url": "https://www.runoob.com/css/"  }]<pre class="line-numbers language-none"><code class="language-none">发送 JSON 数据：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>xmlhttp.send(JSON.stringify({ "email": "admin@runoob.com", "response": { "name": "runoob" } }));<pre class="line-numbers language-none"><code class="language-none">##### 1. 源代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><meta charset="utf-8"><script>function loadXMLDoc(){  var xmlhttp;  if (window.XMLHttpRequest)  {    // IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码    xmlhttp=new XMLHttpRequest();  }  else  {    // IE6, IE5 浏览器执行代码    xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");  }  xmlhttp.onreadystatechange=function()  {    if (xmlhttp.readyState==4 && xmlhttp.status==200)    {      var myArr = JSON.parse(this.responseText);      myFunction(myArr)    }  }  xmlhttp.open("GET","/try/ajax/json_ajax.json",true);  xmlhttp.setRequestHeader("Content-Type", "application/json;charset=UTF-8");  xmlhttp.send();}function myFunction(arr) {  var out = "";  var i;  for(i = 0; i < arr.length; i++) {    out += '<a href="' + arr[i].url + '">' +     arr[i].title + '</a><br>';  } document.getElementById("myDiv").innerHTML=out;}</script><h2>AJAX JSON</h2><button type="button" onclick="loadXMLDoc()">请求 JSON 数据</button><div id="myDiv"></div> ```</x.length;i++)>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData-词频统计编程</title>
      <link href="/2023/01/02/BigData-%E8%AF%8D%E9%A2%91%E7%BB%9F%E8%AE%A1%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/01/02/BigData-%E8%AF%8D%E9%A2%91%E7%BB%9F%E8%AE%A1%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="BigData-Hadoop-词频统计编程"><a href="#BigData-Hadoop-词频统计编程" class="headerlink" title="BigData Hadoop 词频统计编程"></a>BigData Hadoop 词频统计编程</h2><h4 id="1-编译WordCount-java-程序-将程序在Hadoop-集中运行"><a href="#1-编译WordCount-java-程序-将程序在Hadoop-集中运行" class="headerlink" title="1.编译WordCount.java 程序,将程序在Hadoop 集中运行"></a>1.编译WordCount.java 程序,将程序在Hadoop 集中运行</h4><h4 id="2-在HDFS中处理文件-进行上传"><a href="#2-在HDFS中处理文件-进行上传" class="headerlink" title="2.在HDFS中处理文件 进行上传"></a>2.在HDFS中处理文件 进行上传</h4><h4 id="3-运行-Word-Count-java"><a href="#3-运行-Word-Count-java" class="headerlink" title="3.运行 Word Count.java"></a>3.运行 Word Count.java</h4><p>1.文件上传到 /home/hadoop/data/wordcount<br>2.切换到该目录下<br>3.Hadoop集群上运行 MapReduce的程序WordCount.java</p><pre class="line-numbers language-none"><code class="language-none">gedit WordCount.java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.在本地创建 wordcount_classes :</p><pre class="line-numbers language-none"><code class="language-none">mkdir wordcount_classes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.编译 WordCount.java. 输入下面的命令编译 WordCount.java 程序并设置正确的路径及输出目录.<br>    用 -d (directory,目录)选择指定编译结果的 .class文件的存放目录:</p><pre class="line-numbers language-none"><code class="language-none">javac -cp /home/hadoop/hadoop-2.9.0/share/hadoop/*   -d  wordcount_class WordCount.java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.为编译的 wordcount目录创建一个.jar 文件.  因为需要将该 .jar 发送到集群的其他节点同时运行.</p><pre class="line-numbers language-none"><code class="language-none">jar -cvf WordCount.jar -C wordcount_classes/ .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.创建Map Reduce 输入文件 /tmp/MR-WordCount,上传到 YouTube 数据集当作 WordCount程序的输入文件.</p><pre class="line-numbers language-none"><code class="language-none">Hadoop fs -mkdir /tmp/MR-WordCount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8.使用Hadoop的put命令把 YouTupe 数据集从本地系统的 /home/hadoop/data/wordcount 复制到HDFS 的 /tmp/MR-WrodCount目录:</p><pre class="line-numbers language-none"><code class="language-none">hadoop fs -put YoutubeDataSets.txt  /tmp/MR-WordCount/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9.查看文件是否上传成功,命令如下:</p><pre class="line-numbers language-none"><code class="language-none">hadoop fs -ls /tmp/MR-WordCount/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10.运行MapReduce</p><pre class="line-numbers language-none"><code class="language-none">hadoop jar WordCount.jar  cn.hust.book.bigdata.ch04.WordCount /tmp/MR-WordCount/YoutubeDataSets.txt /tmp/MR-WordCount/output  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="WordCount-java"><a href="#WordCount-java" class="headerlink" title="WordCount.java"></a>WordCount.java</h3><pre class="line-numbers language-none"><code class="language-none">import java.awt.JobAttributes;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.lang.module.Configuration;import java.net.URI;import java.nio.file.FileSystem;import java.nio.file.LinkOption;import java.nio.file.Path;import java.nio.file.WatchKey;import java.nio.file.WatchService;import java.nio.file.WatchEvent.Kind;import java.nio.file.WatchEvent.Modifier;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.Scanner;import java.util.StringTokenizer;import javax.naming.Context;import org.w3c.dom.Text;public class WordCount { public static class MyMapper extends Mapper&lt;Object,Text,Text,IntWritable&gt;{  private final static IntWritable one = new IntWritable(1);  private Text word = new Text();  public void map(Object key,Text value,Context context) throws IOException,InterruptedException{   StringTokenizer itr = new     StringTokenizer(value.toString(),"\t"); //以制表符分隔一行文本    while(itr.hasMoreTokens()) {     word.set(itr.hasMoreTokens());     context.write(word,one);    }  } } public static class MyReducer extends Reducer&lt;Text,IntWritable,Text,IntWritable&gt;{ public void reduce(Text Key,Iterable&lt;IntWritable&gt;values,Context context) throws IOException,InterruptedException  {  int sum = 0;  for(IntWritable value: values) { // 相同Key累计计数   sum += value.get();  }  countext.write(key,new IntWritable(sum)); }} public static void main(String[] args) {   Configuration conf = new Configuration();   String[] otherArgs = new GenericOptionsParser(conf,args).getRemainingArgs();   Job job = new Job(conf,"WordCount");   job.setJarByClass(WordCount.class);   job.setMapperClass(MyMapper.class);   job.setReducerClass(MyReducer.class);   job.setOutputKeyClass(Text.class);   job.setOutputValueClass(InyWritable.class);   FileInputStream.addInputPath(job,new Pathath(otherArgs[0]));   FileOutputStream.setPutputPath(job,new Path(otherArgs[1]));   System.out.println(job,waitForCompletion(true) ? 0:1 ); }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> BigData </category>
          
          <category> 词频统计编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> BigData </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础命令</title>
      <link href="/2023/01/02/BigData-HDFS%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/01/02/BigData-HDFS%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="启动Hadoop"><a href="#启动Hadoop" class="headerlink" title="启动Hadoop"></a>启动Hadoop</h3><pre class="line-numbers language-none"><code class="language-none">cd / -name hadoopsbin/start-all.shjpsbin/hadoop dfsadmin -report初始化：bin/hadoop namenod -format集群启动：sbin/start-all.sh集群停止：sbin/stop-all.sh查看日志：ll logs/   cat logs/hadoop-hadoop-namenode-master.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看HDFS的命令：hadoop-fs"><a href="#查看HDFS的命令：hadoop-fs" class="headerlink" title="查看HDFS的命令：hadoop fs"></a>查看HDFS的命令：hadoop fs</h3><pre class="line-numbers language-none"><code class="language-none">Hadoop fs -ls   -mkdir   -copyFromLocal newtest  /home/user   -put /home/user  /user/hadoop   -copyToLocal /user/hadoop /home/hadoop   -get /user/hadoop /home/user   -chmod 777 /user/hadoop   -rm  -r text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="负载均衡：hdfs-balancer"><a href="#负载均衡：hdfs-balancer" class="headerlink" title="负载均衡：hdfs balancer"></a>负载均衡：hdfs balancer</h3><pre class="line-numbers language-none"><code class="language-none">hdfs balancer -threshold ```  ### HDFS API使用方法1.get（）方法实现 static FileSystem get(Configuration conf);2.获取具体的封装 opertor(){  获取Configuration对象  获取FileSystem对象  对文件进行相应操作 }###1.上传本地文件：  具体实现：CopyFile.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>    package com.hafs;    import org.apache.hadoop.conf.Configuration;    import org.apache.hadoop.fs.FileStatus;    import org.apache.hadoop.fs.FileSystem;    impory org.apache.hadoop.fs.Path;    public class CopyFile{        public static void main(String[] args) throws Excerion{            Configuration conf = new Configuration();            FileSystemhdfs = FileSystem.get(conf);            //本地文件            Path src = new Path("/home/hadoop/CopyFile.text");            //HDFS的指定位置            Path dst = new Path("/");            hdfs.copyFromLocalFile(src,dst);            System.out.print("Upload to"+conf.get("fs.default.name"));            FileStatus files[] = hdfs.listStatus(dst);            for(FileStstus file:files){                System.out.print(file.getPath());            }        }    }</code></pre><pre class="line-numbers language-none"><code class="language-none">  导出为CopyFile.jar文件，上传到集群中并文件所在位置执行命令：```   Hadoop jar CopyFile.jar com.hdfs.CopyFile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-创建HDFS文件"><a href="#2-创建HDFS文件" class="headerlink" title="2.创建HDFS文件"></a>2.创建HDFS文件</h3><pre><code>    Public FSDateOutputStream create (Path f)    具体实现：CreateFile.jar</code></pre><pre class="line-numbers language-none"><code class="language-none">Package com.hdfs;import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.fs.FSDataOutputStream;import org.apache.hadoop.fs.FileSysteam;import org.apache.hadoop.fs.Path;public class CreateFile{ public static void main (String[] args) throws Exception{  Configuration conf = new Configuration();  FileSysteamhdfs = FileSyteam.get(conf);   byte[] buff = "hello hadoop world!\n".getByets();   Path dfs = new Path("/test");   FSDataOutputStream outputStream = hdfs.create(dfs);//调用create（）方法，创建文件   outputStream.write(buff,0,buff.length);  } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>    导出为CreatFile.jar文件，上传到集群中并文件所在位置执行命令：</code></pre><pre class="line-numbers language-none"><code class="language-none">hadoop jar CreateFile.jar comhdfs.CreateFile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-创建HDFS目录"><a href="#3-创建HDFS目录" class="headerlink" title="3.创建HDFS目录"></a>3.创建HDFS目录</h3><pre><code>    public boolean mkdirs(Path f)    具体实现：CreateDir.jar</code></pre><pre class="line-numbers language-none"><code class="language-none">package com.hdfs;import org.apache.hadoop.conf.Configuration;improt org.apache.hadoop.fs.FileSysteam;import org.apache.hadoop.fs.Path;public class CreateDir{ public static void main (String[] args) throws Exception{  Configuration conf = new Configuration();  FileSyateamhdfs = FileSyateam.get(conf);  Path dfs = new Path("/TestDir");  //调用mkdir（）方法，创建目录  hdfs.mkdirs(dfs); }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>    导出CreateDir.jar文件，上传到集群中并文件所在位置执行命令：</code></pre><pre class="line-numbers language-none"><code class="language-none">hadoop jar CreateDir.jar com.hdfs.CreateDir;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> BigData </category>
          
          <category> HDFS基础命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> BigData </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础命令</title>
      <link href="/2023/01/02/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/01/02/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-1-1-用户和用户组"><a href="#1-1-1-用户和用户组" class="headerlink" title="1.1.1 用户和用户组"></a>1.1.1 用户和用户组</h2><h3 id="用户创建"><a href="#用户创建" class="headerlink" title="用户创建"></a>用户创建</h3><p>1.useradd<br>2.passwd</p><h3 id="1-创建用户组"><a href="#1-创建用户组" class="headerlink" title="1.创建用户组"></a>1.创建用户组</h3><p>1.groupadd testgroup</p><h3 id="2-创建用户组同时增加用户组"><a href="#2-创建用户组同时增加用户组" class="headerlink" title="2.创建用户组同时增加用户组"></a>2.创建用户组同时增加用户组</h3><p>1.useradd  -g testgroup test</p><h3 id="3-已有用户增加用户组"><a href="#3-已有用户增加用户组" class="headerlink" title="3.已有用户增加用户组"></a>3.已有用户增加用户组</h3><p>1.usermod -G groupname username</p><h3 id="4-永久删除用户和用户组"><a href="#4-永久删除用户和用户组" class="headerlink" title="4.永久删除用户和用户组"></a>4.永久删除用户和用户组</h3><p>1.userdel test<br>2.userdel -r test<br>3.groupdel testgroup</p><h2 id="1-1-2-文件与目录"><a href="#1-1-2-文件与目录" class="headerlink" title="1.1.2 文件与目录"></a>1.1.2 文件与目录</h2><h3 id="1-切换"><a href="#1-切换" class="headerlink" title="1.切换"></a>1.切换</h3><p>1.cd /home<br>2.cd %返回上级<br>3.cd ../..<br>4.pwd   %显示当前目录名称</p><h3 id="2-查看目录文件信息"><a href="#2-查看目录文件信息" class="headerlink" title="2.查看目录文件信息"></a>2.查看目录文件信息</h3><p>1.ls -a %所有文件<br>2.ls -al%详细信息<br>3.ls -alrt%按时间（l：详细列表 r:反向序列  t:按时间）</p><h3 id="3-文件目录复制"><a href="#3-文件目录复制" class="headerlink" title="3.文件目录复制"></a>3.文件目录复制</h3><p>1.cp file1<br>2.cp -a dir1%目录<br>3.cp -a tem/dir1 .%复制目录到当前目录</p><h3 id="4-文件目录的创建、移动、删除"><a href="#4-文件目录的创建、移动、删除" class="headerlink" title="4.文件目录的创建、移动、删除"></a>4.文件目录的创建、移动、删除</h3><p>1.mkdir dir1<br>2.mkdir -p /tmp/dir1/dir2<br>3.mv dir1  dir2%重命名<br>4.rm -f file1%删除文件名为file1 文件<br>5.rm -rf dir2 %删除dir2 目录和子目录内容</p><h3 id="5-查看文件内容"><a href="#5-查看文件内容" class="headerlink" title="5.查看文件内容"></a>5.查看文件内容</h3><p>1.cat file<br>2.tac file<br>3.more file%查看长文件内容</p><h3 id="6-文本内容处理"><a href="#6-文本内容处理" class="headerlink" title="6.文本内容处理"></a>6.文本内容处理</h3><p>1.grep str /tmp/test<br>2.grep ^str /tmp/test%str 开始的文件<br>3.grep [0-9] /tmp/test%包含数字的<br>4.grep str -r /tmp/*%在目录 tmp以及子目录查找<br>5.diff file1 file2%文本间不同的<br>6.sdiff file1 file2%一对比的方式显示不同</p><h3 id="7-Vim文件编辑器"><a href="#7-Vim文件编辑器" class="headerlink" title="7.Vim文件编辑器"></a>7.Vim文件编辑器</h3><p>1.vim test.txt<br>2.按 i 键 进入</p><h3 id="8-查询"><a href="#8-查询" class="headerlink" title="8.查询"></a>8.查询</h3><p>1.find / -name file1<br>2.find / -user user1<br>3.find /home/user1 -name *.bin %查询扩展名 .bin 文件</p><h3 id="9-压缩、解压"><a href="#9-压缩、解压" class="headerlink" title="9.压缩、解压"></a>9.压缩、解压</h3><p>1.tar -cvf archive.tar file %文件file压缩成archive.tar<br>    （C:建立压缩文档 V：显示所有过程  F显示档案名称）<br>2.tar -tf archive.tar%显示一个包的内容<br>3.tar -xvf archive.tar%解压一个包<br>4.tar -xavf archive.tar.gz%解压.tar.gz压缩包<br>    （X:解压  tar.gz:压缩/解压的为tar.gz 文件）<br>5.tar -xjvf archive.tar.bz2 -C /tmp<br>                %把压缩包解压到 /tmp 目录下</p><h3 id="10-修改文件目录权限"><a href="#10-修改文件目录权限" class="headerlink" title="10.修改文件目录权限"></a>10.修改文件目录权限</h3><p>1.chmod 777 test %test文件修改为EveryOne可用<br>2.chmod a+rwx test%同上<br>    （a：所有用户 g:同组用户 o:其他用户r:读w:写x：执行 ）<br>3.chgrp student /opt/book%把/opt/book用户组修改为 student<br>4.chown zhangsan /opt/book% /opt/book文件所有者修改为  zhangsan</p><p>2.1.3 主机名</p><h3 id="11-查找主机名"><a href="#11-查找主机名" class="headerlink" title="11.查找主机名"></a>11.查找主机名</h3><p>1.hostname </p><h3 id="12-永久修改主机名"><a href="#12-永久修改主机名" class="headerlink" title="12.永久修改主机名"></a>12.永久修改主机名</h3><p>1.hostnamectl set-hostname hadoop<br>  cat /etc/hostname<br>2.vim /etc/hosts<br>  cat /etc/hosts</p><h2 id="1-1-4分区管理"><a href="#1-1-4分区管理" class="headerlink" title="1.1.4分区管理"></a>1.1.4分区管理</h2><h3 id="1-查看硬盘使用状况"><a href="#1-查看硬盘使用状况" class="headerlink" title="1.查看硬盘使用状况"></a>1.查看硬盘使用状况</h3><p>1.df -h %-h:显示为易读格式</p><h3 id="2-硬盘分区"><a href="#2-硬盘分区" class="headerlink" title="2.硬盘分区"></a>2.硬盘分区</h3><p>1.fdisk -l%查看分区<br>2.fdisk /dev/sda3%使用fdisk管理分区</p><h3 id="3-挂载硬盘"><a href="#3-挂载硬盘" class="headerlink" title="3.挂载硬盘"></a>3.挂载硬盘</h3><p>1.mkdir /mnt/vcdrom<br>2.mount</p><h2 id="1-1-5文件目录访问权限"><a href="#1-1-5文件目录访问权限" class="headerlink" title="1.1.5文件目录访问权限"></a>1.1.5文件目录访问权限</h2><h3 id="1-查看文件和目录访问权限"><a href="#1-查看文件和目录访问权限" class="headerlink" title="1.查看文件和目录访问权限"></a>1.查看文件和目录访问权限</h3><pre><code>    ls  -l /boot</code></pre><h3 id="2-修改文件和目录访问权限"><a href="#2-修改文件和目录访问权限" class="headerlink" title="2.修改文件和目录访问权限"></a>2.修改文件和目录访问权限</h3><pre><code>    chown [选项] 属主[.属主] &lt;文件名&gt;    -c文件更改后显示动作信息（历史）     -R 对目录以及子目录，文件递归设置    -v输出详细内容        chgrp [选项] 属主[.属主] &lt;文件名&gt;    -c     -R    chmod [选项] 属主[.属主] &lt;文件名&gt;    -c    -R    -v    -help        u        g        o        a        操作模式：+,-,=        权限组合：r,w,x        例题：增加文件/root/first.sh的属性可执行权限，              增加文件/root/file1.txt的属组可写权限            chmod u+x /root/first.sh            chmod g+w /root/file1.txt         例题：用数字赋予/root/student1.txt仅有属主可读写权限            chmod 600 /root/test.sh</code></pre><h2 id="1-1-6用户命令管理用户"><a href="#1-1-6用户命令管理用户" class="headerlink" title="1.1.6用户命令管理用户"></a>1.1.6用户命令管理用户</h2><h3 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1.创建用户"></a>1.创建用户</h3><pre><code>    useradd [选项] &lt;用户&gt;    -c comment注释信息     -g group主群组    -G group附加组    -d home主目录路径    -s shell登录Shell环境/bin/bash    -u UID用户ID    -e expire过期日期，默认null xxxx-xx-xx    -f inactive过期后可用天数</code></pre><h3 id="2-删除用户"><a href="#2-删除用户" class="headerlink" title="2.删除用户"></a>2.删除用户</h3><pre><code>    userdel [选项] &lt;用户&gt;    -r删除时是否删除主目录    rm -r userA</code></pre><h3 id="3-密码设置与修改"><a href="#3-密码设置与修改" class="headerlink" title="3.密码设置与修改"></a>3.密码设置与修改</h3><pre><code>    passwd [选项] &lt;用户&gt;    -l name锁住普通用户    -u name 解锁普通用户    -x dayMax使用时间    -n dayMin使用时间    -d 删除用户密码</code></pre><h3 id="4-用户属性修改"><a href="#4-用户属性修改" class="headerlink" title="4.用户属性修改"></a>4.用户属性修改</h3><pre><code>    usermod [选项] &lt;用户&gt;    -c comment修改用户注释    -g group修改用户主组    -G group修改用户附加组    -l name修改用户账号名    -L 锁定用户    -U解锁用户    -u UID修改用户ID值    -d home修改用户主目录路径    -p passwd修改用户密码</code></pre><h3 id="5-显示当前用户"><a href="#5-显示当前用户" class="headerlink" title="5.显示当前用户"></a>5.显示当前用户</h3><pre><code>    whoami6.显示用户信息    id [选项] &lt;用户&gt;    -u显示id    -g显示主群组id    -G显示附加群组id    </code></pre><h2 id="1-1-7使用命令管理用户组"><a href="#1-1-7使用命令管理用户组" class="headerlink" title="1.1.7使用命令管理用户组"></a>1.1.7使用命令管理用户组</h2><h3 id="1-创建用户组-1"><a href="#1-创建用户组-1" class="headerlink" title="1.创建用户组"></a>1.创建用户组</h3><pre><code>    groupadd [选项] &lt;用户&gt;    -g gid 用户组id    -r 建立系统组</code></pre><h3 id="2-删除用户组"><a href="#2-删除用户组" class="headerlink" title="2.删除用户组"></a>2.删除用户组</h3><pre><code>    groupdel &lt;用户组名&gt;需要删除所有在内用户</code></pre><h3 id="3-修改用户组"><a href="#3-修改用户组" class="headerlink" title="3.修改用户组"></a>3.修改用户组</h3><pre><code>    groupmod [选项] &lt;用户&gt;    -g id 修改用户组中添加用户    -n name用户组中删除用户</code></pre><h3 id="4-用户组成员添加-x2F-删除"><a href="#4-用户组成员添加-x2F-删除" class="headerlink" title="4.用户组成员添加/删除"></a>4.用户组成员添加/删除</h3><pre><code>    gpasswd [选项] &lt;用户&gt;    -a name向用户组添加用户    -d name从用户组删除用户</code></pre><h3 id="5-用户组查询"><a href="#5-用户组查询" class="headerlink" title="5.用户组查询"></a>5.用户组查询</h3><pre><code>    groups [用户名]    groups userA第一个为主组</code></pre><h2 id="1-1-8使用fdisk命令分区"><a href="#1-1-8使用fdisk命令分区" class="headerlink" title="1.1.8使用fdisk命令分区"></a>1.1.8使用fdisk命令分区</h2><pre><code>fdisk [选项] [磁盘设备文件]fdisk -l例题：在磁盘/dev/sdb 创建3分区，1扩展分区。（1区10GB，2,3分区8GB，其余为扩展分区）</code></pre><h3 id="1-执行分区命令"><a href="#1-执行分区命令" class="headerlink" title="1.执行分区命令"></a>1.执行分区命令</h3><pre><code>    fdisk /dev/sdb</code></pre><h3 id="2-查询帮助信息"><a href="#2-查询帮助信息" class="headerlink" title="2.查询帮助信息"></a>2.查询帮助信息</h3><pre><code>    m</code></pre><h3 id="3-创建第1个主分区"><a href="#3-创建第1个主分区" class="headerlink" title="3.创建第1个主分区"></a>3.创建第1个主分区</h3><pre><code>    n    p    Enter</code></pre><h3 id="4-创建扩展分区"><a href="#4-创建扩展分区" class="headerlink" title="4.创建扩展分区"></a>4.创建扩展分区</h3><pre><code>    n    e    Enter</code></pre><h3 id="5-显示分区信息"><a href="#5-显示分区信息" class="headerlink" title="5.显示分区信息"></a>5.显示分区信息</h3><pre><code>    p</code></pre><h3 id="6-结束创建分区"><a href="#6-结束创建分区" class="headerlink" title="6.结束创建分区"></a>6.结束创建分区</h3><pre><code>    w</code></pre><pre class="line-numbers language-none"><code class="language-none">1.例题在扩展分区建立2逻辑分区，第1个逻辑分区8G，其余为第2个逻辑分区（1）执行分区命令 fdisk /dev/sdb（2）创建第1个逻辑分区 n Enter（3）创建第2个逻辑分区 n Enter（4）显示分区结果 p（5）结束创建分区 w2.例题删除第2逻辑分区（1）对指定磁盘/dev/sdb执行分区命令 fdisk /dev/sdb（2）输入d 进入删除分区子命令 d（3）输入要删除的分区代码 6（4）显示分区信息 p（5）保存当前分区信息并退出分区命令 w<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 基础命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java, the world&#39;s best programming language</title>
      <link href="/2022/12/25/Java-the-best-langage-at-the-World/"/>
      <url>/2022/12/25/Java-the-best-langage-at-the-World/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-Java基础"><a href="#1-Java基础" class="headerlink" title="1.Java基础"></a>1.Java基础</h2><h3 id="1-关键词"><a href="#1-关键词" class="headerlink" title="1.关键词"></a>1.关键词</h3><h4 id="1-return"><a href="#1-return" class="headerlink" title="1.return"></a>1.return</h4><p>Java中return 用法小结</p><pre class="line-numbers language-none"><code class="language-none">package test;return：必须放在方法中//return的主要作用有两点：//1.返回方法指定类型值//2.用于方法结束的标志,return 后面的语句不会被执行public class Test001 {   public static void main(String[] args) {       int i;       System.out.println("return语句之前"+getInfo());       for (i = 0; i &lt; 5; i++) {           if(i==3){               return;//无返回类型，用于方法的结束           }           System.out.println(String.format("i=%d",i));       }       //return 之后的语句将不会被执行       System.out.println("return语句之后"+getInfo());   }   public static int getInfo(){       return 1;//有返回类型，返回方法指定类型的返回值   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-进制转换"><a href="#2-进制转换" class="headerlink" title="2.进制转换"></a>2.进制转换</h4><pre class="line-numbers language-none"><code class="language-none">10进制转化其他进制对应的方法,参数:n(原10进制数据),r(进制),返回值10进制转2进制Integer.toBinaryString(n);一个二进制字符串.10进制转8进制Integer.toOctalString(n);一个八进制字符串10进制转16进制Integer.toHexString(n);一个16进制字符串10进制转 r 进制Integer.toString(100, 16);一个r进制字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-数组"><a href="#2-数组" class="headerlink" title="2.数组"></a>2.数组</h3><h4 id="1-List"><a href="#1-List" class="headerlink" title="1.List"></a>1.List</h4><h5 id="1-List数据的指定修改"><a href="#1-List数据的指定修改" class="headerlink" title="1.List数据的指定修改"></a>1.List数据的指定修改</h5><pre class="line-numbers language-none"><code class="language-none">package ArrayForiter;import java.util.*;import java.util.stream.*;import org.junit.jupiter.api.Test;public class ListItemRemoveTests { public List&lt;String&gt; initList = Arrays.asList("360","aliyun","baidu","bilibili","amazon","bytedance","Tencent"); /*  * 增强for循环删除 ConcurrentModificationException  */ public void test1() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  for(String element : list) {   if(element.startsWith("b")) {    list.remove(element);   }  }  System.out.println(list); } @Test public void test1_1() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  list.forEach ((e) -&gt; {   if(e.startsWith("b")) {    list.remove(e);   }  });  System.out.println(list);   }  /* 低级for size, 删除不全。（功能不完善的 bug */ public void test2() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  for (int i = 0; i &lt; list.size(); i++) {   String str = list.get(i);   if(str.startsWith("b")) {    list.remove(i);   }  }  System.out.println(list); }  /*   * 角标越界  * 无法阻止 for的i增大  */ public void test3() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  int size = list.size();  for (int i = 0; i &lt; size; i++) {   String str = list.get(i);   if(str.startsWith("b")) {    list.remove(i);   }  }  System.out.println(list); } /*  * 逆序删除   * 从后面开始，可以改变 for 增大导致的角标越界  */ public void test4() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  for(int i=list.size()-1;i&gt;0;i--) {   String str = list.get(i);   if(str.startsWith("b")) {    list.remove(i);   }  }  System.out.println(list); } /*  * 调用 iteration 提供的方法  */ public void test5() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  for(Iterator&lt;String&gt; iterator = list.iterator();iterator.hasNext();) {   String str = iterator.next();   if(str.startsWith("b")) {    iterator.remove();   }  }  System.out.println(list); }  public void test5_1() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  for(Iterator&lt;String&gt; iterator = list.iterator();iterator.hasNext();) {   String str = iterator.next();   if(str.startsWith("b")) {    list.remove(str);  // 用的 iterat 方法 但没在关键点用iterator.remove();   }  }  System.out.println(list); } /*  * filter 过滤   * 得到一定量的反向元素  */ public void test6() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  list = list.stream().filter(e -&gt; !e.startsWith("b")).collect(Collectors.toList());  System.out.println(list); }   public static void main(String[] s) {  ListItemRemoveTests a = new ListItemRemoveTests();    /*   * 原因： Iterator迭代时不能remove。    * 是同步操作问题  两者修改次数不一致   */  //a.test1();  //a.test1_1();    //a.test2();  //a.test3();    a.test4();  a.test5();    /*   * 用的 iterat 方法 但没在关键点用iterator.remove();   */  //a.test5_1();    a.test6(); }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Java策略模式"><a href="#2-Java策略模式" class="headerlink" title="2.Java策略模式"></a>2.Java策略模式</h2><p>IStack.java</p><pre class="line-numbers language-none"><code class="language-none">public interface IStack&lt;T&gt; {  /**  * 初始化栈  * @param maxSize: 数组的最大长度。栈的最大长度。  */ public void initStack(int maxSize);  /**  * 销毁栈  */ public void destroyStack();  /**  * 添加数据，进栈。  * @param data 要被添加的数据.类型不确定，所以用泛型。  */ public void push(T data);  /**  * 删除栈顶元素  */ public void pop(); /**  * 判断栈是否为空  * @return true or false.  */ public boolean isEmpty();  /**  * 获取栈顶元素  * @return 栈顶数据元素。数据元素的类型不确定，所以是泛型。  */ public T getTop();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Stack.java</p><pre class="line-numbers language-none"><code class="language-none">public class Stack&lt;T&gt; implements IStack&lt;T&gt; { private int length;// 元素个数。栈的长度。 private T arr[];// 用于存放数据的数组。因为是顺序栈，所以用数组。数组取值是用角标 arr[0] arr[1] ... private int maxSize; /**  * 构造函数  *   * @param maxSize  *            数组的最大长度  */ public Stack(int maxSize) {  this.maxSize = maxSize;  initStack(maxSize); } @Override public void initStack(int maxSize) {  this.maxSize = maxSize;  // 初始化数组。为什么要初始化数组，因为数组不初始化，就没有分配内存空间，是一个空对象，也就是空指针。  arr = (T[]) new Object[maxSize]; } @Override public void destroyStack() {  // TODO Auto-generated method stub } // 添加值 1判断 原有数值长度 是否 已满于最大数组长 // 2 数值 赋予 原有数组末，数组长增加 @Override public void push(T data) {  if(this.length &gt;= this.maxSize){   System.out.println("已满");   return;  }  arr[this.length] = data;  this.length++; } // 添加值 1判断 原有数值长度 是否 为零 // 2 数值 赋予 原有数组 次末，数组长减少 @Override public void pop() {  if(this.length == 0){   System.out.println("已经到底，无法pop");   return;  }  arr[this.length-1] = null;  this.length--; } // 指针 1判断长度 如果为零返回 否则 返回数组 次长度 @Override public T getTop() {  if(this.length == 0){   return null;   }  return this.arr[this.length-1];     } @Override public boolean isEmpty() {  return this.length == 0; }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Test.java</p><pre class="line-numbers language-none"><code class="language-none">public class Test {  public static void main(String[] args) {  Stack&lt;Integer&gt; s = new Stack&lt;&gt;(1024); // 指定栈的长度最大值是1024.      s.push(1);  s.push(2);  s.push(3);    s.pop();  s.pop();    Integer top = s.getTop();  System.out.println(top); }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构 </category>
          
          <category> 策略模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 策略模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
