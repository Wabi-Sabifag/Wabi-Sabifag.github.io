<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MockingBir</title>
      <link href="/2023/02/06/MockingBir/"/>
      <url>/2023/02/06/MockingBir/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MockingBir的部署"><a href="#MockingBir的部署" class="headerlink" title="MockingBir的部署"></a>MockingBir的部署</h1><h6 id="开源作者：babysor"><a href="#开源作者：babysor" class="headerlink" title="开源作者：babysor"></a>开源作者：babysor</h6><p>操作系统：Win10</p><p>硬件：cpu</p><p>2.安装</p><blockquote><p>如果已经确认安装过，请忽略该步骤</p></blockquote><ul><li><p>获取<a href="https://github.com/babysor/MockingBird">GitHub开源代码库</a></p></li><li><p>安装Anacodna， Python 3.8 或更高，参考<a href="https://zhuanlan.zhihu.com/p/348120084">中文教程</a>，在Anaconda中创建并切换到独立虚拟环境后，进行以下步骤。</p></li><li><p>安装 PyTorch， 直接<a href="https://pytorch.org/get-started/locally/">官网下载</a>。</p></li></ul><blockquote><p>验证本步骤是否成功：在系统任意路径下运行python，进入交互式编程界面后输入&nbsp;<code>import torch;</code>, 回车，&nbsp;<code>torch.cuda.is_available()</code>, 回车。如果都是成功的话，可以进行下一步。</p></blockquote><p><img src="https://github.com/babysor/MockingBird/wiki/imgs/torch1.png" alt="torch1"></p><ul><li><p>安装 ffmpeg。 1）<a href="http://ffmpeg.org/download.html#build-windows">下载</a>&nbsp;选择点击打开链接Windows对应的版本下载 2）解压 ffmpeg-xxxx.zip 文件到指定目录； 3）将解压后的文件目录中 bin 目录（包含 ffmpeg.exe ）添加进 path 环境变量中； 4）进入 cmd，输入 ffmpeg -version，可验证当前系统是否识别 ffmpeg 以及查看 ffmpeg 的版本</p></li><li><p>运行pip install -r requirements.txt 来安装剩余的必要包。</p></li></ul><blockquote><p>确保本步骤不报错</p></blockquote><ul><li>安装 webrtcvad 用 pip install webrtcvad-wheels。</li></ul><blockquote><p>确保本步骤不报错</p></blockquote><p>3.下载社区训练好的模型</p><p>在以下选择中下载模型</p><table><thead><tr><th>作者</th><th>下载链接</th></tr></thead><tbody><tr><td>@miven</td><td><a href="https://pan.baidu.com/s/1PI-hM3sn5wbeChRryX-RCQ">百度网盘 请输入提取码</a>&nbsp;提取码：2021</td></tr></tbody></table><blockquote><p>该模型与最新代码有兼容性问题 请查阅&nbsp;<a href="https://github.com/babysor/MockingBird/issues/37">https://github.com/babysor/MockingBird/issues/37</a>&nbsp;解决</p></blockquote><p>下载完成后，确保&nbsp;<code>xxx.pt</code>&nbsp;格式的文件放在代码库的&nbsp;<code>synthesizer\saved_models</code>文件夹下，<code>saved_models</code>如不存在请新建</p><p>4.运行demo_toolbox</p><p>在代码库路径下，运行&nbsp;<code>python demo_toolbox.py -d .\samples</code>&nbsp;尝试使用工具箱, 由于没有下载任何数据集，这里的功能比较简单：</p><ol><li><p>确保界面左边中间的&nbsp;<code>synthesizer</code>&nbsp;选择了上一步中&nbsp;<code>xxx.pt</code>&nbsp;文件对应的模型。</p></li><li><p>点击<code>Record</code>录入你的5秒语音</p></li><li><p>输入任意文字</p></li><li><p>点击&nbsp;<code>Synthesizer and vocode</code>&nbsp;等待效果输出较简单：</p></li><li><p>确保界面左边中间的&nbsp;<code>synthesizer</code>&nbsp;选择了上一步中&nbsp;<code>xxx.pt</code>&nbsp;文件对应的模型。</p></li><li><p>点击<code>Record</code>录入你的5秒语音</p></li><li><p>输入任意文字</p></li><li><p>点击&nbsp;<code>Synthesizer and vocode</code>&nbsp;等待效果输出</p></li></ol><h1 id="5-遇到的问题总结"><a href="#5-遇到的问题总结" class="headerlink" title="5.遇到的问题总结"></a>5.遇到的问题总结</h1><p>1.元数据流报错:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在CSDN找到下面的方式无法解决问题。</p><pre><code>pip install setuptools==57.5.0 -i https://pypi.tuna.tsinghua.edu.cn/simple </code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解决：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在对比开源作者的文件时，发现作者main主支内容和本地文件不一致，在其他分支有完整的项目。</p><p>2.&nbsp;&nbsp;报错：</p><p>&nbsp;&nbsp;&nbsp;&nbsp; cpu硬件没有运行，以及文件的训练数据无法找到。</p><pre><code>Arguments:    datasets_root:    None    enc_models_dir:   encoder\saved_models    syn_models_dir:   synthesizer\saved_models    voc_models_dir:   vocoder\saved_models    cpu:              False    seed:             None    no_mp3_support:   FalseWarning: you did not pass a root directory for datasets as argument.The recognized datasets are:        LibriSpeech/dev-clean</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解决：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将 开发者提供的云盘资料下级文件全部导入该项目的主项目下，不用像作者要求的创建文件夹。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我自行创建文件夹同时将所有文件放在 /saved_models 下，反而导致文件的路径出错。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> GitHub-Openner </category>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python网页获取</title>
      <link href="/2023/01/24/Python%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96/"/>
      <url>/2023/01/24/Python%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Python-的网络资源获取"><a href="#Python-的网络资源获取" class="headerlink" title="Python 的网络资源获取"></a>Python 的网络资源获取</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>编辑器：PyCharm<br>库：requests BeautifulSoup4<br>###</p><pre class="line-numbers language-none"><code class="language-none">1.requests 网页下载库    requests.get/post(url,params,data,headers,timeout,verify,allow_redirects,cookies)url：下载的网页目标urlparams：字典形式，设置URL后面的参数，比如？id=123&amp;name=bilibilidata：字典或字符串，一般用于POST方法时提交数据headers：设置user-agent，refer请求头timeout：超时时间，sverify:True/False，是否进行HTTPS证书验证allow_redirects:True/False是否让requests做重定向处理cookies:附带本地cookies数据2.接收response响应    r = requests.get/post(url)    r.status_code       网页状态    r.encoding      设置编码规则    r.text      网页内容    r.headers           r.url    r.content       字节形式返回    r.cookies       导入本地cookies3.网页解析器  1.创建BeautifulSoup对象    from bs4 import BeautifulSoup    #根据HTML网页字符串创建 BeautifulSoup 对象    soup = beautifulSoup(        html_doc,                               #HTML文档字符串        'html.parser',                          #HTML解析器        from_encoding='utf8                     #HTML文档编码    ) 2.搜索节点 (find_all,find)    find_all(name,attrs,string)    比如：        soup.find_all('div',class_='abc,string'Python',href='/view/123.html')            #查找所有为 div标签 ，class为abc，文字为Python，连接符合/view/123.html的节点 3.访问节点信息    node.name   #标签名字    node['href']  # 元素属性    node.get_text()     #查找到的节点的链接文字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-网页"><a href="#2-网页" class="headerlink" title="2.网页"></a>2.网页</h2><pre class="line-numbers language-none"><code class="language-none">import requestsfrom bs4 import BeautifulSoupimport selectorsclass UrlManager():    '''    Url管理器    '''    def __init__(self):        self.new_urls = set()        self.old_urls = set()    def add_new_url(self,url):        if url is None or len(url) == 0:            return        if url in self.new_urls or url in self.old_urls:            return        self.new_urls.add(url)    def add_new_urls(self,urls):        if urls is None or len(urls) == 0:            return        for url in urls:            self.add_new_url(url)    def get_url(self):        if self.has_new_url():            url = self.new_urls.pop()            self.old_urls.add(url)            return url        else:            return None    def has_new_url(self):        return len(self.new_urls) &gt; 0#---------------------------------------------if __name__ == "__main__":    url_manager = UrlManager()    url_manager.add_new_url("url1")    url_manager.add_new_url("url2")    url_manager.add_new_url("url3")    print(url_manager.new_urls,url_manager.old_urls)    print("#"*30)    new_url = url_manager.get_url()    print(url_manager.new_urls, url_manager.old_urls)    print("#" * 30)    new_url = url_manager.get_url()    print(url_manager.new_urls, url_manager.old_urls)    print("-"*30)    print(url_manager.has_new_url())    print(new_url)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-获取页面文本内容"><a href="#3-获取页面文本内容" class="headerlink" title="3.获取页面文本内容"></a>3.获取页面文本内容</h2><pre class="line-numbers language-none"><code class="language-none">import requestsfrom bs4 import BeautifulSoupimport selectorsurl = "https://www.wabisabifag.top/"r = requests.get(url)print(f'{r.status_code}\n '      # f'{r.headers}\n '      f'{r.encoding}\n')for (index,value) in enumerate(r.text):    print(value,end='')    if 0 == index%120: print()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-获取网页标签内容"><a href="#4-获取网页标签内容" class="headerlink" title="4.获取网页标签内容"></a>4.获取网页标签内容</h2><pre class="line-numbers language-none"><code class="language-none">import  requestsfrom bs4 import  BeautifulSoupdef get_novel_chapters():    root_url = "http://www.89wxw.cn/0_9/"      # 网页无效了    r = requests.get(root_url)    r.encoding="gbk"    soup = BeautifulSoup(r.text,"html.parser")    for dd in soup.find_all("dd"):        link = dd.find("a")        if not link:            continue        print(link)get_novel_chapters()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-正则表达式"><a href="#5-正则表达式" class="headerlink" title="5.正则表达式"></a>5.正则表达式</h2><pre class="line-numbers language-none"><code class="language-none">url1 = "http://www.bilibili.com"url2 = "http://www.bilibili.com/123.html#comments"url3 = "http://www.baidu.com"import  repattern = r'^http://www.bilibili.com$'print(re.match(pattern,url1)) #okprint(re.match(pattern,url2))print(re.match(pattern,url3))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-验证网页是否有效并导入本地"><a href="#6-验证网页是否有效并导入本地" class="headerlink" title="6.验证网页是否有效并导入本地"></a>6.验证网页是否有效并导入本地</h2><pre class="line-numbers language-none"><code class="language-none">from utils import url_managerfrom bs4 import BeautifulSoupimport requestsimport reroot_url = "https://www.bilibili.com/"urls = url_manager.UrlManager()urls.add_new_url(root_url)fout = open("craw_all_pages.txt", "w")while urls.has_new_url():    curr_url = urls.get_url()    r = requests.get(curr_url, timeout=10)    if r.status_code!= 200:        print("error.retrun status_code is over 200", curr_url)        continue    soup = BeautifulSoup(r.text, "html.parser")    title = soup.title.string    fout.write("%s\t%s\n" % (curr_url, title))    fout.flush()    print("成功:%s,%s,%d" % (curr_url, title, len(urls.new_urls)))    links = soup.find_all("a")    for link in links:        href = link["href"]        pattern = r'^https://www.bilibili.com/\d+.html$'        if re.match(pattern, href):            urls.add_new_url()fout.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-获取豆瓣页面网址"><a href="#7-获取豆瓣页面网址" class="headerlink" title="7.获取豆瓣页面网址"></a>7.获取豆瓣页面网址</h2><pre class="line-numbers language-none"><code class="language-none">from turtle import pdimport requestsfrom bs4 import BeautifulSoupimport pprintimport jsonimport pdb# 构造分页数字列表page_indexs = range(0, 250, 25)list(page_indexs)def download_all_htmls():  # 获取HTML的page信息    htmls = []    for idx in page_indexs:        print(idx)        url = f"https://movie.douban.com/top250?start={idx}&amp;filter="        print("craw html:", url)        r = requests.get(url)        # if r.status_code != 200:        #     raise Exception("error")        htmls.append(r.text)    return htmlshtmls = download_all_htmls()# 解析数据def parse_single_html(html):    soup = BeautifulSoup(html, "html.parser")    article_items = (        soup.find("div", class_="article")        .find("ol", class_="grid_view")        .find_all("div", class_="item")    )    datas = []    for article_item in article_items:        rank = article_item.find("div", class_="pic").find("em").get_text()        info = article_item.find("div", class_="info")        title = info.find("div", class_="hd").find("span", class_="title").get_text()        # print(title)        stars = (            info.find("div", class_="bd")            .find("div", class_="star")            .find_all("span")        )        rating_star = stars[0]["class"][0]        rating_num = stars[1].get_text()        comments = stars[3].get_text()        datas.append({            "rank": rank,            "title": title,            "rating_star": rating_star.replace("rating", "").replace("-t", ""),            "rating_num": rating_num,            "comments": comments.replace("评价人数:", "")        })    return dataspprint.pprint(parse_single_html(htmls[0]))all_datas = []for html in htmls:    all_datas.extend(parse_single_html((html)))print(all_datas)print(len(all_datas))#导入表格df =pd.DataFrame(all_datas)print(df)df.to_eccel("豆瓣电影TOP250.xlsx")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>31，59有报错没有修改，可能是获取标签问题，也可能是代码自生的错误。</code></pre><p>报错：Traceback (most recent call last):<br>  File “C:\Users\WabiSabifag\PycharmProjects\web_crawler\douban_test\goline.py”, line 59, in <module><br>    pprint.pprint(parse_single_html(htmls[0]))<br>  File “C:\Users\WabiSabifag\PycharmProjects\web_crawler\douban_test\goline.py”, line 31, in parse_single_html<br>    soup.find(“div”, class_=”article”)<br>AttributeError: ‘NoneType’ object has no attribute ‘find’</module></p><pre class="line-numbers language-none"><code class="language-none">#封装import requestsfrom bs4 import BeautifulSoupimport pprintimport jsonfrom douban_test.goline import download_all_htmls,parse_single_htmlhtmls = download_all_htmls()for i in  range(len(htmls[0])):    print(i)pprint.pprint(parse_single_html(htmls[0]))all_datas = []for html in htmls:    all_datas.extend(parse_single_html((html)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-网页图片获取"><a href="#8-网页图片获取" class="headerlink" title="8.网页图片获取"></a>8.网页图片获取</h2><pre class="line-numbers language-none"><code class="language-none">coding = 'utf-8'import requestsfrom bs4 import BeautifulSoupimport osurl = "https://pic.netbian.com/4kmeinv/"def craw_html(url):    resp = requests.get(url)    resp.encoding = 'gbk'    print(f"获取网页状态:{resp.status_code}")    html = resp.text        #得到页面    return  htmldef parse_and_download(html):    soup = BeautifulSoup(html, "html.parser")    imgs = soup.find_all("img")    for img in imgs:        src = img['src']        if '/uploads/' not in src:            continue        src = f"https://pic.netbian.com{src}"        filename = os.path.basename(src)        with open(f"img/{filename}", "wb") as f:            resp_img = requests.get(src)            f.write(resp_img.content)# 如果页面有规律  循环获取页面urls = ["https://pic.netbian.com/4kmeinv/"]+[    f"https://pic.netbian.com/4kmeinv/index_{i}.html"    for i in range(2,4)]for url in urls:    html = craw_html(url)    parse_and_download(html)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="本地图片文件的重命名"><a href="#本地图片文件的重命名" class="headerlink" title="本地图片文件的重命名"></a>本地图片文件的重命名</h1><pre class="line-numbers language-none"><code class="language-none"># coding=utf-8import ospath_name = os.path.join(os.getcwd(), r'C:\Users\11111\Desktop\1')''' 获取图片所在文件夹的地址 可修改为文件的相对路径，比如：  path_name = D:\Documents\GitHub\my_OpenCV\models-master\research\my_data\myimages)'''num = 3323 # 图片命名的序号（从num开始）for item in os.listdir(path_name):#进入到文件夹内，对每个文件进行循环遍历    #re_name=str(num)+'.jpg'    re_name = '图片_'+str(num)+'.jpg' # 重命名图片文件的格式（从num开始）    os.rename(os.path.join(path_name,item),os.path.join(path_name,re_name))    num+=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOS配置</title>
      <link href="/2023/01/02/IOS%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/01/02/IOS%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、路由器配置"><a href="#一、路由器配置" class="headerlink" title="一、路由器配置"></a>一、路由器配置</h2><h3 id="客户机配置"><a href="#客户机配置" class="headerlink" title="客户机配置"></a>客户机配置</h3><h4 id="R1配置"><a href="#R1配置" class="headerlink" title="R1配置"></a>R1配置</h4><pre class="line-numbers language-none"><code class="language-none">noenable conf ter hostname R1inter g0/0no shutdown ip add 192.168.10.1 255.255.255.0inter g0/1ip add 192.168.30.1 255.255.255.0no shutdown exitroute ripversion 2network 192.168.10.0network 192.168.30.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="R2配置"><a href="#R2配置" class="headerlink" title="R2配置"></a>R2配置</h4><pre class="line-numbers language-none"><code class="language-none">noenable conf ter hostname R2inter g0/0no shutdown ip add 192.168.20.1 255.255.255.0inter g0/1ip add 192.168.30.1 255.255.255.0no shutdown exitroute ripversion 2network 192.168.20.0network 192.168.30.0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、交换机初始化"><a href="#二、交换机初始化" class="headerlink" title="二、交换机初始化"></a>二、交换机初始化</h2><h3 id="配置虚拟终端登录（全局配置）"><a href="#配置虚拟终端登录（全局配置）" class="headerlink" title="配置虚拟终端登录（全局配置）"></a>配置虚拟终端登录（全局配置）</h3><pre class="line-numbers language-none"><code class="language-none">enable secret PASSWORDline vty 0 4password 123login enable secret PASSWORD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-MS1配置"><a href="#1-MS1配置" class="headerlink" title="1.MS1配置"></a>1.MS1配置</h3><pre class="line-numbers language-none"><code class="language-none">enable conf ter hostname MS1vlan 10name test10exitvlan 20name test20exitinterface vlan 10ip add IP_ADDRinterface vlan 20 ip add IP_ADDinter fa0/1switchport mode accessswitchport access vlan 10inter fa0/2switchport mode accessswitchport access vlan 20exitip routing <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-设置主机IP地址及网关地址（涉及到多个网络即多个不同的局域网）"><a href="#2-设置主机IP地址及网关地址（涉及到多个网络即多个不同的局域网）" class="headerlink" title="2.设置主机IP地址及网关地址（涉及到多个网络即多个不同的局域网）"></a>2.设置主机IP地址及网关地址（涉及到多个网络即多个不同的局域网）</h3><h3 id="3-路由器设备"><a href="#3-路由器设备" class="headerlink" title="3.路由器设备"></a>3.路由器设备</h3><h4 id="R1配置-1"><a href="#R1配置-1" class="headerlink" title="R1配置"></a>R1配置</h4><pre class="line-numbers language-none"><code class="language-none">enbaleconf ter hostname R1inter g0/0no shutdownip add 192.168.3.1 255.255.255.0inter g0/1no shutdownip add 192.168.1.1 255.255.255.0exitroute ripversion 2network 192.168.1.0network 192.168.3.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="R2配置-1"><a href="#R2配置-1" class="headerlink" title="R2配置"></a>R2配置</h4><pre class="line-numbers language-none"><code class="language-none">enbaleconf ter hostname R2inter g0/0no shutdownip add 192.168.3.2 255.255.255.0inter g0/1no shutdownip add 192.168.2.1 255.255.255.0exitroute ripversion 2network 192.168.2.0network 192.168.3.0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="IP地址计算"><a href="#IP地址计算" class="headerlink" title="IP地址计算"></a>IP地址计算</h2><h3 id="给定IP地址-192-55-12-120-子网掩码-255-255-255-240"><a href="#给定IP地址-192-55-12-120-子网掩码-255-255-255-240" class="headerlink" title="给定IP地址: 192.55.12.120      子网掩码:255.255.255.240"></a>给定IP地址: 192.55.12.120      子网掩码:255.255.255.240</h3><h3 id="第一题-求子网号"><a href="#第一题-求子网号" class="headerlink" title="第一题:求子网号"></a>第一题:求子网号</h3><h4 id="第一步-将IP地址-子网掩码的十进制地址转换为二进制"><a href="#第一步-将IP地址-子网掩码的十进制地址转换为二进制" class="headerlink" title="第一步,将IP地址,子网掩码的十进制地址转换为二进制"></a>第一步,将IP地址,子网掩码的十进制地址转换为二进制</h4><pre><code>    (PS: 网络地址 的 1 和 255 为特殊位被保留,所以有效计算的数为 254个)                                               最后8位分开,是因为C类网址(可以从子网掩码最后四位的 1111 0000 做理解)最后四位做主机号,以作区别.</code></pre><pre class="line-numbers language-none"><code class="language-none">192.55.12.120        11000000  00110111  00001100  0111 1000 255.255.255.240      11111111  11111111  11111111  1111 0000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="第二步-进行二进制个个位数的逐步-比较-A-x3D-B-1-0"><a href="#第二步-进行二进制个个位数的逐步-比较-A-x3D-B-1-0" class="headerlink" title="第二步,进行二进制个个位数的逐步 比较( A=B?1:0 )"></a>第二步,进行二进制个个位数的逐步 比较( A=B?1:0 )</h4><p>(PS:最后四位为主机号,不需要对比 因此为 0000)</p><pre class="line-numbers language-none"><code class="language-none">                     11000000  00110111  00001100  0111 0000                     192.55.12.112```                      ### 第二题:求主机号#### 由IP地址做十进制转换为二进制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>192.55.12.120        11000000  00110111  00001100  0111 1000</p><pre class="line-numbers language-none"><code class="language-none">将主机号分到的位数(子网掩码没有占用的段落 再转换为十进制 就是该主机在本地址的主机号)可得主机号:0.0.0.8### 第三题:直接广播地址直接广播地址(解释:有效的网络号 + 全为1 的主机号) 因此,由题目做给的IP地址,结合第一题信息                        (主机号)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>192.55.12.120  ==&gt;   11000000  00110111  00001100  0111 1000                                    </code></pre><pre class="line-numbers language-none"><code class="language-none">可得                                                      (主机号转变为) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>192.55.12.127   &lt;==   11000000  00110111  00001100  0111 1111</code></pre><pre class="line-numbers language-none"><code class="language-none">### 第四题:如果主机地址的头十位用于子网,那么184.231.138.239的子网屏蔽码是多少由题可知为B类网址(16+16)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>                转换</code></pre><p>184.231.138.239     ==&gt;    10111000  11100111  10001010  11 101111</p><pre class="line-numbers language-none"><code class="language-none">因为 主机的头十位用于子网 (解释:主机号的16中,前十位被子网占用)所以 子网掩码如下:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>                转换</code></pre><p>255.255.255.192     &lt;==    11111111  11111111  11111111  11 000000</p><pre class="line-numbers language-none"><code class="language-none">### 第五题:如果子网屏蔽码是  255.255.192.0,那么不需要经由路由器通信和主机129.23.144.16的是哪一类网络号相同的主机可以直接相连,不同的主机通过路由器相连.### 主机:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>129.23.144.16         10000001  00010111  10010000  00010000</p><pre class="line-numbers language-none"><code class="language-none">### 子网掩码:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>255.255.192.0         11111111  11111111  11000000  00000000</p><pre class="line-numbers language-none"><code class="language-none">从子网掩码可知,将主机号的前两位占用 所以在此将主机显示时,如下就可以明显的观察区别:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>129.23.144.16         10000001  00010111  10 010000  00010000</p><p>```</p><h3 id="可得信息"><a href="#可得信息" class="headerlink" title="可得信息:"></a>可得信息:</h3><p>当第三字节 前两位 被占用得主机号<br>以 10 ~ 11 (范围在128`192,不包括192)开头的数值范围,可以相互通信. </p>]]></content>
      
      
      <categories>
          
          <category> 网络运维 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 网络运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb 基础</title>
      <link href="/2023/01/02/JavaWeb-%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/01/02/JavaWeb-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-JSP标签"><a href="#1-JSP标签" class="headerlink" title="1.JSP标签"></a>1.JSP标签</h1><h3 id="1-java-变量转-jsp"><a href="#1-java-变量转-jsp" class="headerlink" title="1.java 变量转 jsp"></a>1.java 变量转 jsp</h3><pre class="line-numbers language-none"><code class="language-none">&lt;/pre&gt;1.java 变量转 jsp&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre code_snippet_id="1800145" snippet_file_name="blog_20160801_2_2452946" name="code" class="html"&gt;&lt;% String value = request.getParameter("key");%&gt;  &lt;label&gt;&lt;%=value %&gt;&lt;/label&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-jsp-变量转-js"><a href="#2-jsp-变量转-js" class="headerlink" title="2.jsp 变量转 js"></a>2.jsp 变量转 js</h3><pre class="line-numbers language-none"><code class="language-none">&lt;input type="text" name="firstname"&gt;test&lt;/input&gt;  &lt;script&gt;  var test = document.getElementById("firstname");  &lt;/script&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-js-转-Java"><a href="#3-js-转-Java" class="headerlink" title="3.js 转 Java"></a>3.js 转 Java</h3><pre class="line-numbers language-none"><code class="language-none">//虚拟表单提交  var temp = document.createElement("form");  temp.action = URL;//提交的地址  temp.method = "post";//也可指定为get  temp.style.display = "none";  var opt = document.createElement("textarea");  opt.name = key;  opt.value = value;  temp.appendChild(opt);  document.body.appendChild(temp);  temp.submit();    //java 代码    String var = request.getParameter("key");//此时var的值就是value  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-jsp转Java"><a href="#4-jsp转Java" class="headerlink" title="4.jsp转Java"></a>4.jsp转Java</h3><pre class="line-numbers language-none"><code class="language-none">String var = request.getParameter("key");//jsp表单提交了，就可以从request中获取。也可以虚拟表单提交。  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-js转jsp"><a href="#5-js转jsp" class="headerlink" title="5.js转jsp"></a>5.js转jsp</h3><pre class="line-numbers language-none"><code class="language-none">var test = "test";  document.getElementById("demo").innerHTML=test;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-java-转-js"><a href="#6-java-转-js" class="headerlink" title="6.java 转 js"></a>6.java 转 js</h3><pre class="line-numbers language-none"><code class="language-none">&lt;% String temp = request.getParameter("key");%&gt;  &lt;label name="test" hidden="hidden"&gt;&lt;%=temp %&gt;&lt;/label&gt;  &lt;script&gt;  var temp = document.createElement("test");  &lt;/script&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-JSP内置对象"><a href="#2-JSP内置对象" class="headerlink" title="2.JSP内置对象"></a>2.JSP内置对象</h1><h3 id="JSP提供9个内置对象"><a href="#JSP提供9个内置对象" class="headerlink" title="JSP提供9个内置对象:"></a>JSP提供9个内置对象:</h3><pre><code> 对象名称         衍生类     功能简述</code></pre><p>(1)requestJavax.servelet.ServletRequest.HttpServletRequest 取得客户端与系统的信息</p><p>(2)responseJavax.servlet.Servlet Request.HTTP Servlet.Response响应客户端信息</p><p>(3)applicationJavax,servlet.ServletContext记录和处理上线者共享的数据</p><p>(4)sessionJavax.servlet.Http.Session记录和处理上线者的个别数据</p><p>(5)outJavax.servlet.jsp.writer控制数据输出的操作</p><p>(6)configJavax.servlet.servletConfig取得JSP编译后Servlet信息</p><p>(7)PageContextJavax.servlet.jsp.PageContext存储和处理系统运行时的各种信息</p><p>(8)pageJavax.lang.Object代表目前的这个JSP网页对象</p><p>(9)exceptionJavax.lang.Throwable异常处理机制</p><h3 id="内置对象生命周期"><a href="#内置对象生命周期" class="headerlink" title="内置对象生命周期"></a>内置对象生命周期</h3><p>  application &gt; session &gt; page &gt; request</p><h3 id="Request内置对象"><a href="#Request内置对象" class="headerlink" title="Request内置对象:"></a>Request内置对象:</h3><h4 id="一-Request内置对象的常用方法"><a href="#一-Request内置对象的常用方法" class="headerlink" title="一:Request内置对象的常用方法"></a>一:Request内置对象的常用方法</h4><pre><code>    方法                               说明     (1)  getAttribute( String name)       返回 name 所指的值     (2) setAttribute( String name , Object obj)  设定name所指定的属性为 obj     (3) removeAttribute( String name)       删除name所指定的属性     (4) getAttributeNames()       返回request对象所有的属性名称集合     (5) getParameter( String name)       从客户端获取name所指定的参数     (6) getParameter Names()       从客户端获取所有参数名称     (7) getParameterValues( String name)       从客户端获取所指定参数的所有值     (8) setCharacterEncoding( String encoding)设定请求正文中所使用的字符编码(只支持post提交的数据)</code></pre><h5 id="Request内置对象应用实例"><a href="#Request内置对象应用实例" class="headerlink" title="Request内置对象应用实例"></a>Request内置对象应用实例</h5><pre class="line-numbers language-none"><code class="language-none">       &lt;% Enumeration enu = request.getParameterNames(); //page标签导入 import="Java.util.*" while(enu.hasMoreElements()){ String parameterName = (String) enu.nextElement(); String parameterValue = request.getParameter(parameterName); out.print("参数名称:"+parameterName); out.print("\t参数内容:"+parameterValue);}   %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二-Response内置对象"><a href="#二-Response内置对象" class="headerlink" title="二:Response内置对象"></a>二:Response内置对象</h3><pre><code>方法说明    (1) setContentType( String type)       动态响应content Type属性    (2) setHeader( String name,String value)     设置HTTP应答报文的首部字段和值及自动更新    (3) setRedirect( String redirectURL)       将客户端重定向到指定URL     (4) setStatus( int n)       设定HTTP返回的状态值    (5) addCookie( Cookie cookie)       添加一个Cookie对象 </code></pre><h1 id="3-JSP语法"><a href="#3-JSP语法" class="headerlink" title="3.JSP语法"></a>3.JSP语法</h1><h3 id="一、JSP脚本标记"><a href="#一、JSP脚本标记" class="headerlink" title="一、JSP脚本标记"></a>一、JSP脚本标记</h3><h4 id="1-脚本段"><a href="#1-脚本段" class="headerlink" title="1.脚本段"></a>1.脚本段</h4><pre><code>    &lt;% Java程序段 %&gt;</code></pre><h4 id="2-JSP声明"><a href="#2-JSP声明" class="headerlink" title="2.JSP声明"></a>2.JSP声明</h4><pre><code>    &lt;%! 声明1;声明2; %&gt;    PS: 1.可以在 &lt;%@ page %&gt;直接使用已经声明的变量和方法        2.多个页面声明，写成单独的一个文件用             &lt;%@ include %&gt;/&lt;jsp:include&gt;</code></pre><h4 id="3-JSP表达式"><a href="#3-JSP表达式" class="headerlink" title="3.JSP表达式"></a>3.JSP表达式</h4><pre><code>    &lt;%= 变量/表达式 %&gt;</code></pre><h4 id="4-JSP注释"><a href="#4-JSP注释" class="headerlink" title="4.JSP注释"></a>4.JSP注释</h4><pre><code>    &lt;%--  --%&gt;</code></pre><h3 id="二、JSP指令标记"><a href="#二、JSP指令标记" class="headerlink" title="二、JSP指令标记"></a>二、JSP指令标记</h3><h4 id="1-page页面指令标记"><a href="#1-page页面指令标记" class="headerlink" title="1.page页面指令标记:"></a>1.page页面指令标记:</h4><pre><code>　　&lt;%@ page 属性1="value1" 属性2="value2“ %&gt;    属性（每次一个属性）:       (1)language: 脚本语言 Java        (2)import  在程序中导入的类和包        (3)session: true / false  设定HTTP Session        (4)autoFlash: true / false  设置缓冲区填满时 缓冲自动刷新        (5)isThreadSafe: true / false  设置JSP　页面支持多线程        (6)isErrorPage: false / true 　　指定当前页面作为另一页面的错误处理页码        (7)errorPage　　指定当前网页的错误处理页码的ＵＲＬ        (8)contentType: text/html;charset=gb2312                        页面响应的MIME类型；指定字符编码</code></pre><h4 id="２-include静态包含指令标记："><a href="#２-include静态包含指令标记：" class="headerlink" title="２.include静态包含指令标记："></a>２.include静态包含指令标记：</h4><pre><code>    &lt;%@　include file＝＂相对位置＂%&gt;    相同文件夹下   建议以 .jspf(jps fragment)(PS: 由于键值对,除import,pageEncoding,不可以引入其他相同属性)</code></pre><h4 id="3-taglib指令标记"><a href="#3-taglib指令标记" class="headerlink" title="3.taglib指令标记"></a>3.taglib指令标记</h4><pre><code>    &lt;%@taglib  url="标签库url"  prefix="自定义标签前缀" %&gt;    &lt;publi:loop&gt;        ...    &lt;/publi:loop&gt;</code></pre><h3 id="三、JSP动作标记"><a href="#三、JSP动作标记" class="headerlink" title="三、JSP动作标记"></a>三、JSP动作标记</h3><h4 id="1-jsp-include-传参详列-Page-25"><a href="#1-jsp-include-传参详列-Page-25" class="headerlink" title="1.jsp:include:(传参详列:Page 25)"></a>1.<a href="jsp:include">jsp:include</a>:(传参详列:Page 25)</h4><pre><code>    不带参数：&lt;jsp:include page="相对url" flush="true/false"/&gt;       带参数：&lt;jsp:include page="相对url" flush="true/false"/&gt;                          &lt;jsp:param name="属性名" value="属性值"/&gt;    // 传递多个参数给动态文件                         &lt;jsp:param...&gt;                   &lt;/jsp:include&gt;        </code></pre><h4 id="2-jsp-forward-服务器端跳转-浏览器地址栏不做变化"><a href="#2-jsp-forward-服务器端跳转-浏览器地址栏不做变化" class="headerlink" title="2.jsp:forward:(服务器端跳转,浏览器地址栏不做变化)"></a>2.<a href="jsp:forward">jsp:forward</a>:(服务器端跳转,浏览器地址栏不做变化)</h4><pre><code>     不带参数:  &lt;jsp:forward page="URL"&gt;        带参数:   &lt;jsp:forward page="URL"&gt;     &lt;jsp:param name="属性名" value="属性名"/&gt;      ...           &lt;/jsp:forward&gt;</code></pre><h4 id="3-jsp-param"><a href="#3-jsp-param" class="headerlink" title="3.jsp:param:"></a>3.<a href="jsp:param">jsp:param</a>:</h4><pre><code>      &lt;jsp:aram name="参数名"  value="参数值"/&lt;%=表达式%&gt;  /&gt;传递的参数通过request.getParameter("属性名")获取参数的值.单独使用&lt;jsp:param&gt;没有意义</code></pre><h4 id="4-jsp-plugin"><a href="#4-jsp-plugin" class="headerlink" title="4.jsp:plugin:"></a>4.<a href="jsp:plugin">jsp:plugin</a>:</h4><pre><code>&lt;jsp:plugin&gt;动作用于jsp网页加载Java Applet 或 JavaBean 程序组件,       与HTML的&lt;Applet&gt;和&lt;Object&gt;标签有类似的功能.常用属性表:       (1)  type:加载Java程序类型,可设置值Applet,Bean       (2)  code:加载Java程序编译后的类名称, showpic.class       (3)  codebase:  编译后Java程序类所在的目录,可设置绝对值路径或相对路径.  默认执行当前网页的目录默认值.       (4)  name:  用来加载Java Applet 和 JavaBean程序设置一个用以识别的名称.       (5)   align:  设置加载的程序在窗口的对齐方式,可设置由bottom,top,middle,left,right.       (6)  height:  加载程序在窗口中显示的高度       (7)  width:  加载程序在窗口中显示的宽度       (8)  hspace:  加载程序的显示器和网页其他内容的水平间距       (9)  vspace:  加载程序的显示区与网页其他内容的垂直距离       (10)  &lt;jsp:params&gt;:  将参数传递给加载程序,必须在&lt;jsp:params&gt;  &lt;/jsp/params&gt;中使用 &lt;jsp:param&gt; 来设置.</code></pre><h4 id="5-jsp-userBean-jsp-setProperty-和-jsp-getProperty动作标记"><a href="#5-jsp-userBean-jsp-setProperty-和-jsp-getProperty动作标记" class="headerlink" title="5.jsp:userBean jsp:setProperty 和 jsp:getProperty动作标记"></a>5.<a href="jsp:userBean">jsp:userBean</a> <a href="jsp:setProperty">jsp:setProperty</a> 和 <a href="jsp:getProperty">jsp:getProperty</a>动作标记</h4><pre><code>&lt;jsp:userBean&gt;动作标记用来加载JSP页面中使用的JavaBean    &lt;jsp:userBean id="Java Bean实列名称" scope"page / request / session / application"  class="package.class"&gt;    属性:            (1) id:  JavaBean实列名称            (2) scope:  指定该Bean变量的有效范围.            (3) class:  导入的Java包 例如:需求时间 导入 Java.util.Date       &lt;jsp:setProperty&gt;动作标记用于设置已经实列化的Bean对象属性</code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;jsp:setProperty name="JavaBean实列名称" {  property="*"  / property="属性名"  [param="参数"] / property="属性名'  value"{String&lt;%=表达式%&gt;" }/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>(PS:  &lt;jsp:setProerty&gt;中 name值 必须和 &lt;jsp:useBean&gt;中 id值相同, 且大小写敏感.&lt;jsp:getProerty&gt;动作标记可获得Bean的著性质,用于页面中显示.    &lt;jsp:getProerty name="JavaBean实列名称" property="属性名"/&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础</title>
      <link href="/2023/01/02/JavaScript-%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/01/02/JavaScript-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-文字样式"><a href="#1-文字样式" class="headerlink" title="1.文字样式"></a>1.文字样式</h1><h2 id="CSS文件样式编辑"><a href="#CSS文件样式编辑" class="headerlink" title="CSS文件样式编辑"></a>CSS文件样式编辑</h2><pre class="line-numbers language-none"><code class="language-none">.class #id {  font-size: ;/* //字体大小 */  font-family: ; /* //字体 */  font-weight: ;/* //字体粗细 */  font-style: ;/* /字体风格 */  font: ;/* 综合设置字体 */} @font-face{ font-family: ; /* 字体名称 */; src: ; /* 字体路径 */}/* CSS文本外观属性 */*{ color: ;/* 文本颜色 */ letter-spacing:;/* 字间距 */ word-spacing:;/* 单词间距 */ line-height:;/* 行间距 */ text-transform:;/* 文本转换 */ none 默认;capitalized 首字符大写;uppercase 全部字符转换为大写;lowercase 全部字母转换为小写; text-decoration:;/* 文本装饰 */none 默认;underline 下划线;overline 上划线;line-through 删除线; text-align:;/* 水平对齐方式 */left  right  center (仅适用于块级元素) text-indent:;/* 首行缩进 */ white-space:;/* 空白符处理 */normal 空白无效化(仅一个空格); pre 预格式化; nowrap 空白无效化(一行,无视字数量); text-shadow:;/* 阴影效果 */h-shadow 水平阴影距离; v-shadow 垂直到阴影的距离; blur 模糊半径; color 阴影颜色; text-overflow:;/* 表示对象内溢出文本 */ clip 修剪溢出文本,不显示省略标签; ellipsis 用省略标签"..."替代; word-wrap:;/* 实现长单词或者URL地址(统一资源定位器)的自动换行 */break-word 内部换行(保持文本在ui设计面板内部);}/* CSS复合选择器 */一,以标签为选择的1 标签选择器p{}2 后代选择器p strong{}3 并集选择器(较特殊,各种都可以并集)h2 h3 p .class{}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链接伪类控制超链接"><a href="#链接伪类控制超链接" class="headerlink" title="链接伪类控制超链接"></a>链接伪类控制超链接</h2><pre class="line-numbers language-none"><code class="language-none">a:link{    /* 默认格式 */}a:visited{    /* 被访问之后的样式 */}a:hover{    /* 鼠标指针经过，悬停时超链接的样式 */}a:active{    /* 鼠标点击不放时的样式 */}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-选择器关系"><a href="#2-选择器关系" class="headerlink" title="2.选择器关系"></a>2.选择器关系</h1><h3 id="一、属性选择器"><a href="#一、属性选择器" class="headerlink" title="一、属性选择器"></a>一、属性选择器</h3><pre><code>1.只要 P 元素 id 属性以 "one" 开头就会被选中p[id^="one"]{ }2.匹配包含 id 属性,且 id 属性值是 "section" 结尾的 div 元素div[id$="section"]{ }3.匹配包含 id 属性,且 id 属性值包含 "section" 字符串的任意 div 元素div[id*="section"]{ }</code></pre><h3 id="二、关系选择器"><a href="#二、关系选择器" class="headerlink" title="二、关系选择器"></a>二、关系选择器</h3><pre><code>1.子选择器      /* 当子元素只做某个父元素的子类时生效 */h1&gt;strong{ }2.兄弟选择器/* 在某个元素选择器后触发 */    (1)临近选择器       /*  在位于同一父级元素; 第二个元素 紧跟着 第一个元素 */    p+h2{ }    (2)普通兄弟选择器    /*  在位于同一父级元素; 第二个元素 不必跟着 第一个元素 */    p~h2{ }</code></pre><h3 id="三、结构化伪类选择器"><a href="#三、结构化伪类选择器" class="headerlink" title="三、结构化伪类选择器"></a>三、结构化伪类选择器</h3><pre><code>1.:root选择器     /* 用于匹配文档根标签 ，全局设定 */:root{ } == *{ }2.:not选择器    /* 排除 父结构元素 下 子结构元素 该功能的继承效果 */body *:not(h2){ }3.:only-child选择器      /* 用于匹配 父元素 有且仅有一个 子元素 才生效的 */strong:only-child{ }4.:first-child 和 :last-child 选择器      /* 和 :only-child选择器 条件类似 */p:first-child{ } / p:last-child{ } 5.:nth-child(n) 和 :nth-last-child(n) 选择器    /* 两者的关系是 顺数 或 倒数 */  6.:nth-of-type(n) 和 :nth-last-of-type(n) 选择器     /* 匹配 标签本身 的顺序 */h2:nth-of-type(odd){ }   匹配 h2 的奇数行h2:nth-of-type(even){ }  匹配 h2 的偶数行p:nth-last-of-type(2){ } 匹配 p 倒数的第二数行7.:empty选择器     /* 匹配 没有 子元素 或 文本内容为空 所有元素 */:empty{ }</code></pre><h3 id="四、伪元素选择器-x2F-这对已经定义好的伪元素使用的选择器-x2F"><a href="#四、伪元素选择器-x2F-这对已经定义好的伪元素使用的选择器-x2F" class="headerlink" title="四、伪元素选择器     /* 这对已经定义好的伪元素使用的选择器 */"></a>四、伪元素选择器     /* 这对已经定义好的伪元素使用的选择器 */</h3><pre><code>1.:before伪元素选择器  必须配合 content 属性指定要插入的内容p:before{content: " ";}2.:after为元素选择器p:after{content: " ";}</code></pre><h1 id="3-表格-表单"><a href="#3-表格-表单" class="headerlink" title="3.表格 表单"></a>3.表格 表单</h1><h3 id="网页底部信息版本"><a href="#网页底部信息版本" class="headerlink" title="网页底部信息版本"></a>网页底部信息版本</h3><pre class="line-numbers language-none"><code class="language-none">&lt;caption&gt; &lt;/caption&gt;    定义表格的标题&lt;table border="" (表格边框)&gt;     &lt;tr&gt;        &lt;td&gt;        &lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建表格："><a href="#创建表格：" class="headerlink" title="创建表格："></a>创建表格：</h3><h4 id="一、table标签属性"><a href="#一、table标签属性" class="headerlink" title="一、table标签属性"></a>一、table标签属性</h4><pre><code>1.border：表格边框      border-collapse：collapse;  边框合并。         1.HTML设置cellspacing属性无效 2.tr 无border属性2.cellspacing：单元格间距离3.cellpadding：单元格内容与单元格边缘距离4.withd：宽5.height：高6.align：left，center，right 表格在网页的对齐方式7.bgcolor：背景颜色8.background：url（）设置表格背景图像</code></pre><h4 id="二、tr标签属性"><a href="#二、tr标签属性" class="headerlink" title="二、tr标签属性"></a>二、tr标签属性</h4><pre><code>1.height：高2.align：left，center，right  一行内容水平对齐方向3.valign： 一行内容的垂直对齐方向4.bgcolor：背景行颜色5.background：url() 设置行背景图片</code></pre><h4 id="三、td标签属性"><a href="#三、td标签属性" class="headerlink" title="三、td标签属性"></a>三、td标签属性</h4><pre><code>1.height：高2.align：left，center，right  一行内容水平对齐方向3.valign： 一行内容的垂直对齐方向4.bgcolor：背景行颜色5.background：url() 设置行背景图片6.colspan：单元格横跨列数7.rowspan：单元格纵跨列数</code></pre><h4 id="四、th-和-td-相同"><a href="#四、th-和-td-相同" class="headerlink" title="四、th 和 td 相同"></a>四、th 和 td 相同</h4><pre><code>但用于定义表头单元格，默认加粗，居中显示</code></pre><h4 id="五、表格结构"><a href="#五、表格结构" class="headerlink" title="五、表格结构"></a>五、表格结构</h4><pre><code>1.thead：定义表格头部，包含网页logo和导航头部信息2.tfoot：定义表格页脚，位于 thead 标签后，包含网页底部的企业信息3.tbody：定义表格的主体，位于 tfoot 标签后，包含其他内容</code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;form action="url地址" method="提交方式" name="调单名称"&gt;&lt;/form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建表单："><a href="#创建表单：" class="headerlink" title="创建表单："></a>创建表单：</h3><h4 id="一、action属性"><a href="#一、action属性" class="headerlink" title="一、action属性"></a>一、action属性</h4><pre><code>1.当提交表单时，数据会传送到 名为 ” “的页面2.可以是相对路径或者绝对路径。  列如： action=mailto：htmlcss@163.com</code></pre><h4 id="二、method属性"><a href="#二、method属性" class="headerlink" title="二、method属性"></a>二、method属性</h4><pre><code>&lt;form action="form_action.asp" method="get / post" name="调单名称"&gt;用于指明表单处理服务器数据的方法1.get：保密差，数据量有限制2.post：保密好，数据量无限制</code></pre><h4 id="三、name属性"><a href="#三、name属性" class="headerlink" title="三、name属性"></a>三、name属性</h4><pre><code>用于指定表单名称，表单控件中具有name属性的元素会将用户填写的内容交给服务器</code></pre><h4 id="四、autocomplete属性"><a href="#四、autocomplete属性" class="headerlink" title="四、autocomplete属性"></a>四、autocomplete属性</h4><pre><code>指定表单是否有自动完成功，将表单控件输入的内容记录下来1.on2.off</code></pre><h4 id="五、novalidate属性"><a href="#五、novalidate属性" class="headerlink" title="五、novalidate属性"></a>五、novalidate属性</h4><pre><code>指定在提交表单时取消对表单进行有效的检查1.novalidate="novalidate”</code></pre><h3 id="lt-input-gt-表单控件"><a href="#lt-input-gt-表单控件" class="headerlink" title="< input >表单控件"></a>&lt; input &gt;表单控件</h3><h4 id="一、input控件"><a href="#一、input控件" class="headerlink" title="一、input控件"></a>一、input控件</h4><p>  (1)type属性<br>    1.text<br>    2.password<br>    3.radio：单选按钮<br>    4.checkbox：复选框<br>    5.button：普通按钮<br>    6.submit：提交按钮<br>    7.reset：重置按钮<br>    8.image：图像形式的提交按钮<br>    9.hidden：隐藏域<br>    10.file：文件域<br>  (2)name属性：控件名称<br>  (3)value属性:默认文本值<br>  (4)size属性：input控件在页面的显示宽度<br>  (5)readonly属性：只读无法修改<br>  (6)disabled属性：禁用该控件<br>  (7)checked属性：定义选择控件默认被选中<br>  (8)maxlength属性：控件允许输入的最多字符</p><p>  (9)email类型<br>  </p><pre class="line-numbers language-none"><code class="language-none">&lt;input type="email"/&gt;    专门用于验证Email输入框的内容的邮件格式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  (10)url类型<br>  <pre class="line-numbers language-none"><code class="language-none">&lt;input type="url"/&gt;    专门用于验证输入框的内容是url地址格式的文本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  (11)tel类型<br>  <pre class="line-numbers language-none"><code class="language-none">&lt;input type="tel"/&gt;    专门用于提供输入电话号码的文本框，配合 pattern 属性使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  (12)search类型<br>  <pre class="line-numbers language-none"><code class="language-none">&lt;input type="search"/&gt;    专门用于输入搜素关键词的文本框，在用户输入内容后，右侧会附带一个删除图标<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  (13)color类型<br>  <pre class="line-numbers language-none"><code class="language-none">&lt;input type="color"/&gt;    用于设置颜色的文本框，通过 value属性值 改变默认颜色<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  (14)number类型<br>  <pre class="line-numbers language-none"><code class="language-none">&lt; input type="number"/&gt;    专门用于验证文本框内容是否是数字或在限定范围内    1.value：    2.max：    3.min：    4.step：输入域合法的间隔的升降值，默认值1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>  (15)range类型<br>  <pre class="line-numbers language-none"><code class="language-none">&lt;input type="range"/&gt;用于提供一定范围内的输入范围<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  (16)Date pickers类型<br>  <pre class="line-numbers language-none"><code class="language-none">&lt;input type=Date，month，week /&gt; 1.Date 2.month 3.week 4.time 5.datetime 6.datetime-local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>  (17)autofocus属性<br>        用于指定页面加载后是否自动获取焦点<br>        1.true<br>        2.off<br>  (18)form属性<br>        1.可以在form表外进行操作<br>        2.在指定form属性为表单的id，所以该输入框任然属于表单的一部分<br>  (19)list属性<br>     <pre class="line-numbers language-none"><code class="language-none">例如：    &lt;from action="#" method="post"&gt;    请输入网址：&lt;input  type="url" list="url_list" name="weburl" /&gt;    &lt;datalist id="url_list"&gt;        &lt;option lable="百度" value="htpp://www.baidu.com"&gt;&lt;/option&gt;    &lt;/datalist&gt;    &lt;input type="submit" value="提交" /&gt;    &lt;/form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>  (20)multiple属性<br>        适用Email类型和file类型，可以多个内容段<br>  (21)placeholder属性<br>        输入框提供相关提示<br>  (22)required属性<br>        用于判断用户是否在表单输入框中输入内容，表单内容为空时，不允许用户提交表单<br>    <pre class="line-numbers language-none"><code class="language-none">&lt;input required="required"/&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><h3 id="二、textarea控件"><a href="#二、textarea控件" class="headerlink" title="二、textarea控件"></a>二、textarea控件</h3><pre><code>（1）name属性（2）readonly属性：只读无法修改（3）disabled属性：禁用该控件</code></pre><h3 id="三、select控件"><a href="#三、select控件" class="headerlink" title="三、select控件"></a>三、select控件</h3><h4 id="（1）select属性"><a href="#（1）select属性" class="headerlink" title="（1）select属性"></a>（1）select属性</h4><pre><code>    1.size：下拉菜单可见选项数    2.multiple：定义 multiple="multiple" 具有多选择功能</code></pre><h4 id="（2）option属性"><a href="#（2）option属性" class="headerlink" title="（2）option属性"></a>（2）option属性</h4><pre><code>    1.selected：定义 selected="selected" 默认选定</code></pre><h4 id="（3）optgroup属性"><a href="#（3）optgroup属性" class="headerlink" title="（3）optgroup属性"></a>（3）optgroup属性</h4><p> / 选项分组的方法和效果 /<br>例如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;from action="#" method="post"&gt;    &lt;select&gt;        &lt;optgroup lable="北京"&gt;            &lt;option&gt; &lt;/option&gt;            &lt;option&gt; &lt;/option&gt;        &lt;/optgroup&gt;         &lt;optgroup lable="上海"&gt;            &lt;option&gt; &lt;/option&gt;            &lt;option&gt; &lt;/option&gt;        &lt;/optgroup&gt;    &lt;/select&gt;&lt;/form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（4）keygen"><a href="#（4）keygen" class="headerlink" title="（4）keygen"></a>（4）keygen</h4><h4 id="（5）datalist属性"><a href="#（5）datalist属性" class="headerlink" title="（5）datalist属性"></a>（5）datalist属性</h4><pre><code>    1.自行输入内容，指定输入框绑定的datalist元素</code></pre><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;from action="#" method="post"&gt;请输入用户名：&lt;input  type="text" list="namelist" /&gt;&lt;datalist id="namelist"&gt;    &lt;option&gt;admin&lt;/option&gt;&lt;/datalist&gt;&lt;input type="submit" value="提交" /&gt;&lt;/form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-布局"><a href="#4-布局" class="headerlink" title="4.布局"></a>4.布局</h1><h3 id="一、浮动"><a href="#一、浮动" class="headerlink" title="一、浮动"></a>一、浮动</h3><pre><code>选择器{float：left，right，none}</code></pre><h3 id="二、清除浮动"><a href="#二、清除浮动" class="headerlink" title="二、清除浮动"></a>二、清除浮动</h3><pre><code>选择器{clear:left,right，none，both}选择器{overflow：hidden}    消除子标签对父标签的影响选择器:after{必须设置 height:0 样式；必须设置 content:"".}</code></pre><h3 id="三、定位属性"><a href="#三、定位属性" class="headerlink" title="三、定位属性"></a>三、定位属性</h3><h4 id="1-定位模式"><a href="#1-定位模式" class="headerlink" title="(1)定位模式"></a>(1)定位模式</h4><pre><code>    选择器{position:属性值}    1.static:自动定位    2.relative:相对定位，相对于自身在同级文档流的移动    3.absolute：绝对定位，相对于父标签进行定位    4，fixed：固定定位，相对于浏览器进行定位</code></pre><h4 id="2-边偏移"><a href="#2-边偏移" class="headerlink" title="(2)边偏移"></a>(2)边偏移</h4><pre><code>    1.top    2.bottom    3.left    4.right </code></pre><h3 id="四、文本内容溢出"><a href="#四、文本内容溢出" class="headerlink" title="四、文本内容溢出"></a>四、文本内容溢出</h3><pre><code>选择器{overflow：属性值}1.visible：内容不会剪切，会呈现在标签框外2.hidden：溢出内容被剪切，且不可见3.auto：在需要时产生滚动条，自适应4.scroll：溢出内容会被修剪，浏览器会始终显示滚动条</code></pre><h3 id="五、标签顺序"><a href="#五、标签顺序" class="headerlink" title="五、标签顺序"></a>五、标签顺序</h3><pre><code>选择器{z-index：0}  数字越大优先级越高</code></pre><h1 id="5-过度、变形和动画"><a href="#5-过度、变形和动画" class="headerlink" title="5.过度、变形和动画"></a>5.过度、变形和动画</h1><h3 id="一、过度"><a href="#一、过度" class="headerlink" title="一、过度"></a>一、过度</h3><h4 id="1、transition-property属性"><a href="#1、transition-property属性" class="headerlink" title="1、transition-property属性"></a>1、transition-property属性</h4><pre><code>    功能:渐隐，渐显，速度变化（设置应用过度的CSS属性）    (1)none    (2)all    (3)property：定义应用过渡效果  // transition-property:background-color;    版本私有前缀：    -webkit-transition-property： 谷歌    -moz-transition-property：  火狐    -o-transition-property：    IE    -ms-transition-property：   欧朋</code></pre><h4 id="2、transition-duration属性"><a href="#2、transition-duration属性" class="headerlink" title="2、transition-duration属性"></a>2、transition-duration属性</h4><pre><code>    定义过渡效果持续时间    transition-duration：5s；</code></pre><h4 id="3、transition-timing-function属性"><a href="#3、transition-timing-function属性" class="headerlink" title="3、transition-timing-function属性"></a>3、transition-timing-function属性</h4><pre><code>    规定过渡效果的速度曲线    (1)liner:相同速度开始至结束的过渡效果，等同于 cubic-bezier(0,0,1,1);    (2)ease:以慢速开始，然后加快，最后慢慢结束的过渡效果，等同于 cubic-bezier(0。25,0.1,0.25,1);    (3)ease-in:以慢速开始，然后逐渐加快的过渡效果，等同于 cubic-bezier(0.42,0,1,1);    (4)ease-out:以慢速结束的过渡效果，等同于 cubic-bezier(0,0,0.58,1);    (5)ease-in-out:以慢速开始和结束的过渡效果，等同于 cubic-bezier(0.42,0,0.58,1);    (6)cubic-bezier(n,n,n,n):用于定义加速或者减速的贝塞尔曲线的形状（0~1值）。</code></pre><h4 id="4、transition-delay属性"><a href="#4、transition-delay属性" class="headerlink" title="4、transition-delay属性"></a>4、transition-delay属性</h4><pre><code>    规定过渡效果的开始时间    (1)transition-delay: time;</code></pre><h4 id="5、transition属性"><a href="#5、transition属性" class="headerlink" title="5、transition属性"></a>5、transition属性</h4><pre><code>    复合属性    transition：border-radius 5s ease-in-out 2s,                border-radius 5s ease-in-out 2s</code></pre><h3 id="二、变形"><a href="#二、变形" class="headerlink" title="二、变形"></a>二、变形</h3><h4 id="1、transform属性"><a href="#1、transform属性" class="headerlink" title="1、transform属性"></a>1、transform属性</h4><pre><code>    功能:平移、缩放、倾斜、旋转    (1)translate(): 移动元素，基于X，Y重新定位元素    (2)scale(): 缩放元素对象，使元素对象尺寸变化    (3)skew(): 倾斜元素对象，取值为度数值    (4)rotate(): 旋转元素对象，取值为度数值 </code></pre><h4 id="2、2D变形"><a href="#2、2D变形" class="headerlink" title="2、2D变形"></a>2、2D变形</h4><pre><code>    (1)平移        transform:translate(X,Y);    (2)缩放        transform:scale(X,Y);        第一值:负数(翻转)，0~1(缩小)，1(增大)        第二值:可以省略    (3)倾斜        transform:skew(X,Y);        单位值:deg，取值正负值，        第二值:默认0    (4)旋转        transform:rotate(angle);        单位值:deg，取值正值(顺时)，负值(逆时)    (5)更爱变换的中心        transform:X,Y,Z</code></pre><h4 id="3、3D变形"><a href="#3、3D变形" class="headerlink" title="3、3D变形"></a>3、3D变形</h4><pre><code>    (1)transform:rotateX(a);    (2)transform:rotateY(a);    (3)transform:rotated3d(1,1,0,45deg);</code></pre><h4 id="4、perspective属性"><a href="#4、perspective属性" class="headerlink" title="4、perspective属性"></a>4、perspective属性</h4><pre><code>    为呈现良好视距，3D视距旋转    (1)transform-style: 用于保存元素的3D空间        flat：子元素将不保留3D位置        preserve-3d：子元素将保留3D位置    (2)backface-visibility: 定义元素在屏幕时是否可见        visible:背面是可见        hidden:背面是不可见的</code></pre><h3 id="三、动画"><a href="#三、动画" class="headerlink" title="三、动画"></a>三、动画</h3><h4 id="1、-keyframes-规则"><a href="#1、-keyframes-规则" class="headerlink" title="1、@keyframes 规则"></a>1、@keyframes 规则</h4><pre><code>    (1)animationname: 表示当前动画的名称，他将作为引用的唯一标识，不为空    (2)keyframes-selector: 关键帧选择器，值可以是百分比，from（0%）或to（100%）    (3)css-styles: 定义执行到当前关键帧时对应的动画状态，有css样式属性进行定义，可多个属性，不能为空        语法格式:    <pre class="line-numbers language-none"><code class="language-none">@keyframes animationname {    keyframes-selector {        css-styles;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>    例如：    <pre class="line-numbers language-none"><code class="language-none">淡出动画@keyframes appear {    0%{ opacity:0; }    100%{ opacity:1; }}@keyframes appear {    from{ opacity:0; }    to{ opacity:1; }}@keyframes appear {    from to{ opacity:0; }    20% 80%{ opacity:1; }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h4 id="2、animation-name属性"><a href="#2、animation-name属性" class="headerlink" title="2、animation-name属性"></a>2、animation-name属性</h4><pre><code>    定义应用的动画名称    animationname-name: name;</code></pre><h4 id="3、animation-duration属性"><a href="#3、animation-duration属性" class="headerlink" title="3、animation-duration属性"></a>3、animation-duration属性</h4><pre><code>    定义整个动画效果完成效果所需要的时间    animation-duration:time;</code></pre><h4 id="4、animation-timing-function属性"><a href="#4、animation-timing-function属性" class="headerlink" title="4、animation-timing-function属性"></a>4、animation-timing-function属性</h4><pre><code>    规定动画的速度曲线</code></pre><h4 id="5、animation-delay属性"><a href="#5、animation-delay属性" class="headerlink" title="5、animation-delay属性"></a>5、animation-delay属性</h4><pre><code>    定义执行动画效果延迟的时间</code></pre><h4 id="6、animation-iteration-count属性"><a href="#6、animation-iteration-count属性" class="headerlink" title="6、animation-iteration-count属性"></a>6、animation-iteration-count属性</h4><pre><code>    定义动画的播放次数</code></pre><h4 id="7、animation-deraction属性"><a href="#7、animation-deraction属性" class="headerlink" title="7、animation-deraction属性"></a>7、animation-deraction属性</h4><pre><code>    定义当前动画播放的方向    (1)normal    (2)alternate:奇数正常，偶数逆向播放</code></pre><h4 id="8、animation属性"><a href="#8、animation属性" class="headerlink" title="8、animation属性"></a>8、animation属性</h4><pre><code>     复合属性        animation: mymove 5s linear 2s 3 alternate;</code></pre><h1 id="6-少见的标签功能"><a href="#6-少见的标签功能" class="headerlink" title="6.少见的标签功能"></a>6.少见的标签功能</h1><h4 id="1-nav标签"><a href="#1-nav标签" class="headerlink" title="1.nav标签"></a>1.nav标签</h4><pre><code>    定义导航链接</code></pre><h4 id="2-footer标签"><a href="#2-footer标签" class="headerlink" title="2.footer标签"></a>2.footer标签</h4><pre><code>    定义一个页面或者区域的底部</code></pre><h4 id="3-article标签"><a href="#3-article标签" class="headerlink" title="3.article标签"></a>3.article标签</h4><pre><code>    定义一篇日志，一条新闻或用户评论（代表文档、页面或者应用程序中与上下文不相关的独立部分）</code></pre><h4 id="4-section标签"><a href="#4-section标签" class="headerlink" title="4.section标签"></a>4.section标签</h4><pre><code>    小标题，</code></pre><h4 id="5-aside标签"><a href="#5-aside标签" class="headerlink" title="5.aside标签"></a>5.aside标签</h4><pre><code>    定义当前页面或者文章的附属信息部分</code></pre><h4 id="6-video-x2F-x2F-可以使用网站资源"><a href="#6-video-x2F-x2F-可以使用网站资源" class="headerlink" title="6.video  //可以使用网站资源"></a>6.video  //可以使用网站资源</h4><pre class="line-numbers language-none"><code class="language-none">&lt;video src="video.mp4" controls="controls"&gt;&lt;/video&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>    1.autoplay:页面加载完后自动播放视频    2.loop：视频结束时重现开始播放    3.preload：  // 在页面加载时进行加载        (1)auto:        (2)meta:        (3)none:    4.poster：        (1)URL:当视频缓冲不足时，该属性值链接一个图像，并将图像按一定比例显示出来    5.muted：嵌入的视频静音播放例如：</code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;video controls="controls"&gt;    &lt;source src="video.mp4" type="video/mp4"&gt;    &lt;source src="video.ogg" type="video/ogg"&gt;    &lt;source src="video.webm" type="video/webm"&gt;&lt;/video&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-audio"><a href="#7-audio" class="headerlink" title="7.audio"></a>7.audio</h4><pre class="line-numbers language-none"><code class="language-none">&lt;audio src="audio.mp3" controls="controls"&gt;&lt;/audio&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>    1.autoplay:页面加载完后自动播放音频    2.loop：音频结束时重现开始播放    3.preload：  // 在页面加载时进行加载        (1)auto:        (2)meta:        (3)none:例如：</code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;audio controls="controls"&gt;    &lt;source src="audio.mp3" type="audio/mp3"&gt;    &lt;source src="audio.ogg" type="audio/ogg"&gt;    &lt;source src="audio.wav" type="audio/wav"&gt;&lt;/audio&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-画布"><a href="#7-画布" class="headerlink" title="7.画布"></a>7.画布</h1><h3 id="一、画布使用"><a href="#一、画布使用" class="headerlink" title="一、画布使用"></a>一、画布使用</h3><h4 id="1-创建画布"><a href="#1-创建画布" class="headerlink" title="1.创建画布"></a>1.创建画布</h4><pre class="line-numbers language-none"><code class="language-none">&lt; canvas id="cavs" width=" " height=" "&gt; &lt;/canvas&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-获取画布"><a href="#2-获取画布" class="headerlink" title="2.获取画布"></a>2.获取画布</h4><pre class="line-numbers language-none"><code class="language-none">var canvas = ducument.getElementById('cavs');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-准备画笔"><a href="#3-准备画笔" class="headerlink" title="3.准备画笔"></a>3.准备画笔</h4><pre class="line-numbers language-none"><code class="language-none">canvas.getContext('2d'); // 如果三维画制造图片--webgl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="二、绘制线"><a href="#二、绘制线" class="headerlink" title="二、绘制线"></a>二、绘制线</h3><h4 id="1-初始位置"><a href="#1-初始位置" class="headerlink" title="1.初始位置"></a>1.初始位置</h4><pre class="line-numbers language-none"><code class="language-none">var cas = ducument.getElementById('cas');var context cas.getContext('2d');context.moveTo(100,100);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-连接端点"><a href="#2-连接端点" class="headerlink" title="2.连接端点"></a>2.连接端点</h4><pre class="line-numbers language-none"><code class="language-none">context.lineTo(100,100);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-描边"><a href="#3-描边" class="headerlink" title="3.描边"></a>3.描边</h4><pre class="line-numbers language-none"><code class="language-none">context.stroke();连接初始位置和连线端点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-绘制圆"><a href="#4-绘制圆" class="headerlink" title="4.绘制圆"></a>4.绘制圆</h4><pre class="line-numbers language-none"><code class="language-none">        arc(X,Y,Z,开始角度,结束角度,方向)```                例如:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>        context.arc(150,25,100,0.05*Math.PI,0.95*Math.PI);</code></pre><pre class="line-numbers language-none"><code class="language-none">####    5.线的样式        (1)宽度:context.lineWidth='10';        (2)描边颜色:context.strokeStyle='red / #f00';        (3)断电形状:lineCap='属性值'            [1]butt:默认直线方形边缘            [2]round:显示圆形端点            [3]square:显示方形端点### 三、线的路径####    1.重置路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>    context.beginPath();</code></pre><pre class="line-numbers language-none"><code class="language-none">####    2.闭合路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>    context.colsePath();    </code></pre><pre class="line-numbers language-none"><code class="language-none">####    3.填充路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>    context.fill();</code></pre><pre class="line-numbers language-none"><code class="language-none"># 8.DOM文档对象模型### 一、####    (1)获取元素        1. ducument.getElementById('自定义名')        2. ducument.getElementsByTagName('标签名') //集合 不能用push()等方法        3. element.getElementsByTagName('标签名')          4.document.getElementsByName('Name名')        5.document.getElementsByClassName('ClassName名')        6.document.querySelector('.box / #box / li')    ####    (2)document 对象属性        1.document.body        2.document.title        3.document.documentElement        4.document.forms        5.document.images####    (3)操作元素内容        1.element.innerHTML        2.element.innerText        3,element.textContent####    (4)操作元素属性        1.img元素            img.src / img.title         2.表单input元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>        &lt;button&gt;按钮&lt;/button&gt;        &lt;input type="text" value="输出内容"&gt;            &lt;script&gt;                var btn = document.querySelector('button');                var input = document.querySelector('input');                btn.onclick = function(){                    input.value = '被点击了！';                    this.disabled = true;                };            &lt;/script&gt;    ```</code></pre><h4 id="5-操作元素样式"><a href="#5-操作元素样式" class="headerlink" title="(5)操作元素样式"></a>(5)操作元素样式</h4><pre><code>    1.style属性        background        backgroundColor        display        fontSize        height        left        listStyleType        overflow        textAlign        textDecoration        textIndent        transform</code></pre><h4 id="6-操作className属性"><a href="#6-操作className属性" class="headerlink" title="(6)操作className属性"></a>(6)操作className属性</h4><h4 id="7-获取焦点-onfocus-失去焦点-onblur"><a href="#7-获取焦点-onfocus-失去焦点-onblur" class="headerlink" title="(7)获取焦点 onfocus 失去焦点 onblur"></a>(7)获取焦点 onfocus 失去焦点 onblur</h4><h4 id="8-排他思想"><a href="#8-排他思想" class="headerlink" title="(8)排他思想"></a>(8)排他思想</h4><pre><code>    两层循环</code></pre><h4 id="9-鼠标指针经过时背景变色"><a href="#9-鼠标指针经过时背景变色" class="headerlink" title="(9)鼠标指针经过时背景变色"></a>(9)鼠标指针经过时背景变色</h4><pre><code>    table / thead tr th / tbody tr td </code></pre><h4 id="10"><a href="#10" class="headerlink" title="(10)"></a>(10)</h4><pre><code>    1.获取属性：div.getAttribute('id');    2.设置属性：div.setAttribute('index',2);    3.移除属性：div.removeAttribute('id');</code></pre><h4 id="11-节点层级"><a href="#11-节点层级" class="headerlink" title="(11)节点层级"></a>(11)节点层级</h4><pre><code>    1.父节点        先建立document.querySelector('.child');              child.parentNode;    2.子节点        childNodes        console.log(ul.childNodes[0].nodeType);</code></pre><h1 id="9-常用命令规则"><a href="#9-常用命令规则" class="headerlink" title="9.常用命令规则"></a>9.常用命令规则</h1><p>头  header<br>导航    nav<br>侧栏    siderbar<br>左，右，中间    left，right，center<br>标志    logo<br>页面主体    main<br>新闻    news<br>子导航  subnav<br>子菜单  submenu<br>内容    content / container<br>尾  footer<br>栏目    column<br>登录条  loinbar<br>广告    banner<br>热点    hot<br>下载    download<br>菜单    menu<br>搜索    search<br>友情链接    friedlink<br>滚动    scroll<br>文章列表    list<br>小技巧  tips<br>加入    joinus<br>服务    service<br>状态    status<br>合作伙伴    partner<br>版权    copyright<br>标签页  tab<br>提示信息    msg<br>栏目标题    title<br>指南    guild<br>注册    register<br>投票    vote</p><p>CSS文件<br>主要样式    master<br>模块样式    module<br>基本样式    base<br>版本样式    layout<br>专栏    columns<br>表单    forms<br>主题    themes<br>文字    font<br>打印    print</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData-词频统计编程</title>
      <link href="/2023/01/02/BigData-%E8%AF%8D%E9%A2%91%E7%BB%9F%E8%AE%A1%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/01/02/BigData-%E8%AF%8D%E9%A2%91%E7%BB%9F%E8%AE%A1%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="BigData-Hadoop-词频统计编程"><a href="#BigData-Hadoop-词频统计编程" class="headerlink" title="BigData Hadoop 词频统计编程"></a>BigData Hadoop 词频统计编程</h2><h4 id="1-编译WordCount-java-程序-将程序在Hadoop-集中运行"><a href="#1-编译WordCount-java-程序-将程序在Hadoop-集中运行" class="headerlink" title="1.编译WordCount.java 程序,将程序在Hadoop 集中运行"></a>1.编译WordCount.java 程序,将程序在Hadoop 集中运行</h4><h4 id="2-在HDFS中处理文件-进行上传"><a href="#2-在HDFS中处理文件-进行上传" class="headerlink" title="2.在HDFS中处理文件 进行上传"></a>2.在HDFS中处理文件 进行上传</h4><h4 id="3-运行-Word-Count-java"><a href="#3-运行-Word-Count-java" class="headerlink" title="3.运行 Word Count.java"></a>3.运行 Word Count.java</h4><p>1.文件上传到 /home/hadoop/data/wordcount<br>2.切换到该目录下<br>3.Hadoop集群上运行 MapReduce的程序WordCount.java</p><pre class="line-numbers language-none"><code class="language-none">gedit WordCount.java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.在本地创建 wordcount_classes :</p><pre class="line-numbers language-none"><code class="language-none">mkdir wordcount_classes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.编译 WordCount.java. 输入下面的命令编译 WordCount.java 程序并设置正确的路径及输出目录.<br>    用 -d (directory,目录)选择指定编译结果的 .class文件的存放目录:</p><pre class="line-numbers language-none"><code class="language-none">javac -cp /home/hadoop/hadoop-2.9.0/share/hadoop/*   -d  wordcount_class WordCount.java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.为编译的 wordcount目录创建一个.jar 文件.  因为需要将该 .jar 发送到集群的其他节点同时运行.</p><pre class="line-numbers language-none"><code class="language-none">jar -cvf WordCount.jar -C wordcount_classes/ .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.创建Map Reduce 输入文件 /tmp/MR-WordCount,上传到 YouTube 数据集当作 WordCount程序的输入文件.</p><pre class="line-numbers language-none"><code class="language-none">Hadoop fs -mkdir /tmp/MR-WordCount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8.使用Hadoop的put命令把 YouTupe 数据集从本地系统的 /home/hadoop/data/wordcount 复制到HDFS 的 /tmp/MR-WrodCount目录:</p><pre class="line-numbers language-none"><code class="language-none">hadoop fs -put YoutubeDataSets.txt  /tmp/MR-WordCount/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9.查看文件是否上传成功,命令如下:</p><pre class="line-numbers language-none"><code class="language-none">hadoop fs -ls /tmp/MR-WordCount/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10.运行MapReduce</p><pre class="line-numbers language-none"><code class="language-none">hadoop jar WordCount.jar  cn.hust.book.bigdata.ch04.WordCount /tmp/MR-WordCount/YoutubeDataSets.txt /tmp/MR-WordCount/output  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="WordCount-java"><a href="#WordCount-java" class="headerlink" title="WordCount.java"></a>WordCount.java</h3><pre class="line-numbers language-none"><code class="language-none">import java.awt.JobAttributes;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.lang.module.Configuration;import java.net.URI;import java.nio.file.FileSystem;import java.nio.file.LinkOption;import java.nio.file.Path;import java.nio.file.WatchKey;import java.nio.file.WatchService;import java.nio.file.WatchEvent.Kind;import java.nio.file.WatchEvent.Modifier;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.Scanner;import java.util.StringTokenizer;import javax.naming.Context;import org.w3c.dom.Text;public class WordCount { public static class MyMapper extends Mapper&lt;Object,Text,Text,IntWritable&gt;{  private final static IntWritable one = new IntWritable(1);  private Text word = new Text();  public void map(Object key,Text value,Context context) throws IOException,InterruptedException{   StringTokenizer itr = new     StringTokenizer(value.toString(),"\t"); //以制表符分隔一行文本    while(itr.hasMoreTokens()) {     word.set(itr.hasMoreTokens());     context.write(word,one);    }  } } public static class MyReducer extends Reducer&lt;Text,IntWritable,Text,IntWritable&gt;{ public void reduce(Text Key,Iterable&lt;IntWritable&gt;values,Context context) throws IOException,InterruptedException  {  int sum = 0;  for(IntWritable value: values) { // 相同Key累计计数   sum += value.get();  }  countext.write(key,new IntWritable(sum)); }} public static void main(String[] args) {   Configuration conf = new Configuration();   String[] otherArgs = new GenericOptionsParser(conf,args).getRemainingArgs();   Job job = new Job(conf,"WordCount");   job.setJarByClass(WordCount.class);   job.setMapperClass(MyMapper.class);   job.setReducerClass(MyReducer.class);   job.setOutputKeyClass(Text.class);   job.setOutputValueClass(InyWritable.class);   FileInputStream.addInputPath(job,new Pathath(otherArgs[0]));   FileOutputStream.setPutputPath(job,new Path(otherArgs[1]));   System.out.println(job,waitForCompletion(true) ? 0:1 ); }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> BigData </category>
          
          <category> 词频统计编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> BigData </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础命令</title>
      <link href="/2023/01/02/BigData-HDFS%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/01/02/BigData-HDFS%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="启动Hadoop"><a href="#启动Hadoop" class="headerlink" title="启动Hadoop"></a>启动Hadoop</h3><pre class="line-numbers language-none"><code class="language-none">cd / -name hadoopsbin/start-all.shjpsbin/hadoop dfsadmin -report初始化：bin/hadoop namenod -format集群启动：sbin/start-all.sh集群停止：sbin/stop-all.sh查看日志：ll logs/   cat logs/hadoop-hadoop-namenode-master.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看HDFS的命令：hadoop-fs"><a href="#查看HDFS的命令：hadoop-fs" class="headerlink" title="查看HDFS的命令：hadoop fs"></a>查看HDFS的命令：hadoop fs</h3><pre class="line-numbers language-none"><code class="language-none">Hadoop fs -ls   -mkdir   -copyFromLocal newtest  /home/user   -put /home/user  /user/hadoop   -copyToLocal /user/hadoop /home/hadoop   -get /user/hadoop /home/user   -chmod 777 /user/hadoop   -rm  -r text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="负载均衡：hdfs-balancer"><a href="#负载均衡：hdfs-balancer" class="headerlink" title="负载均衡：hdfs balancer"></a>负载均衡：hdfs balancer</h3><pre class="line-numbers language-none"><code class="language-none">hdfs balancer -threshold ```  ### HDFS API使用方法1.get（）方法实现 static FileSystem get(Configuration conf);2.获取具体的封装 opertor(){  获取Configuration对象  获取FileSystem对象  对文件进行相应操作 }###1.上传本地文件：  具体实现：CopyFile.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>    package com.hafs;    import org.apache.hadoop.conf.Configuration;    import org.apache.hadoop.fs.FileStatus;    import org.apache.hadoop.fs.FileSystem;    impory org.apache.hadoop.fs.Path;    public class CopyFile{        public static void main(String[] args) throws Excerion{            Configuration conf = new Configuration();            FileSystemhdfs = FileSystem.get(conf);            //本地文件            Path src = new Path("/home/hadoop/CopyFile.text");            //HDFS的指定位置            Path dst = new Path("/");            hdfs.copyFromLocalFile(src,dst);            System.out.print("Upload to"+conf.get("fs.default.name"));            FileStatus files[] = hdfs.listStatus(dst);            for(FileStstus file:files){                System.out.print(file.getPath());            }        }    }</code></pre><pre class="line-numbers language-none"><code class="language-none">  导出为CopyFile.jar文件，上传到集群中并文件所在位置执行命令：```   Hadoop jar CopyFile.jar com.hdfs.CopyFile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-创建HDFS文件"><a href="#2-创建HDFS文件" class="headerlink" title="2.创建HDFS文件"></a>2.创建HDFS文件</h3><pre><code>    Public FSDateOutputStream create (Path f)    具体实现：CreateFile.jar</code></pre><pre class="line-numbers language-none"><code class="language-none">Package com.hdfs;import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.fs.FSDataOutputStream;import org.apache.hadoop.fs.FileSysteam;import org.apache.hadoop.fs.Path;public class CreateFile{ public static void main (String[] args) throws Exception{  Configuration conf = new Configuration();  FileSysteamhdfs = FileSyteam.get(conf);   byte[] buff = "hello hadoop world!\n".getByets();   Path dfs = new Path("/test");   FSDataOutputStream outputStream = hdfs.create(dfs);//调用create（）方法，创建文件   outputStream.write(buff,0,buff.length);  } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>    导出为CreatFile.jar文件，上传到集群中并文件所在位置执行命令：</code></pre><pre class="line-numbers language-none"><code class="language-none">hadoop jar CreateFile.jar comhdfs.CreateFile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-创建HDFS目录"><a href="#3-创建HDFS目录" class="headerlink" title="3.创建HDFS目录"></a>3.创建HDFS目录</h3><pre><code>    public boolean mkdirs(Path f)    具体实现：CreateDir.jar</code></pre><pre class="line-numbers language-none"><code class="language-none">package com.hdfs;import org.apache.hadoop.conf.Configuration;improt org.apache.hadoop.fs.FileSysteam;import org.apache.hadoop.fs.Path;public class CreateDir{ public static void main (String[] args) throws Exception{  Configuration conf = new Configuration();  FileSyateamhdfs = FileSyateam.get(conf);  Path dfs = new Path("/TestDir");  //调用mkdir（）方法，创建目录  hdfs.mkdirs(dfs); }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>    导出CreateDir.jar文件，上传到集群中并文件所在位置执行命令：</code></pre><pre class="line-numbers language-none"><code class="language-none">hadoop jar CreateDir.jar com.hdfs.CreateDir;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> BigData </category>
          
          <category> HDFS基础命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> BigData </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础命令</title>
      <link href="/2023/01/02/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/01/02/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-1-1-用户和用户组"><a href="#1-1-1-用户和用户组" class="headerlink" title="1.1.1 用户和用户组"></a>1.1.1 用户和用户组</h2><h3 id="用户创建"><a href="#用户创建" class="headerlink" title="用户创建"></a>用户创建</h3><p>1.useradd<br>2.passwd</p><h3 id="1-创建用户组"><a href="#1-创建用户组" class="headerlink" title="1.创建用户组"></a>1.创建用户组</h3><p>1.groupadd testgroup</p><h3 id="2-创建用户组同时增加用户组"><a href="#2-创建用户组同时增加用户组" class="headerlink" title="2.创建用户组同时增加用户组"></a>2.创建用户组同时增加用户组</h3><p>1.useradd  -g testgroup test</p><h3 id="3-已有用户增加用户组"><a href="#3-已有用户增加用户组" class="headerlink" title="3.已有用户增加用户组"></a>3.已有用户增加用户组</h3><p>1.usermod -G groupname username</p><h3 id="4-永久删除用户和用户组"><a href="#4-永久删除用户和用户组" class="headerlink" title="4.永久删除用户和用户组"></a>4.永久删除用户和用户组</h3><p>1.userdel test<br>2.userdel -r test<br>3.groupdel testgroup</p><h2 id="1-1-2-文件与目录"><a href="#1-1-2-文件与目录" class="headerlink" title="1.1.2 文件与目录"></a>1.1.2 文件与目录</h2><h3 id="1-切换"><a href="#1-切换" class="headerlink" title="1.切换"></a>1.切换</h3><p>1.cd /home<br>2.cd %返回上级<br>3.cd ../..<br>4.pwd   %显示当前目录名称</p><h3 id="2-查看目录文件信息"><a href="#2-查看目录文件信息" class="headerlink" title="2.查看目录文件信息"></a>2.查看目录文件信息</h3><p>1.ls -a %所有文件<br>2.ls -al%详细信息<br>3.ls -alrt%按时间（l：详细列表 r:反向序列  t:按时间）</p><h3 id="3-文件目录复制"><a href="#3-文件目录复制" class="headerlink" title="3.文件目录复制"></a>3.文件目录复制</h3><p>1.cp file1<br>2.cp -a dir1%目录<br>3.cp -a tem/dir1 .%复制目录到当前目录</p><h3 id="4-文件目录的创建、移动、删除"><a href="#4-文件目录的创建、移动、删除" class="headerlink" title="4.文件目录的创建、移动、删除"></a>4.文件目录的创建、移动、删除</h3><p>1.mkdir dir1<br>2.mkdir -p /tmp/dir1/dir2<br>3.mv dir1  dir2%重命名<br>4.rm -f file1%删除文件名为file1 文件<br>5.rm -rf dir2 %删除dir2 目录和子目录内容</p><h3 id="5-查看文件内容"><a href="#5-查看文件内容" class="headerlink" title="5.查看文件内容"></a>5.查看文件内容</h3><p>1.cat file<br>2.tac file<br>3.more file%查看长文件内容</p><h3 id="6-文本内容处理"><a href="#6-文本内容处理" class="headerlink" title="6.文本内容处理"></a>6.文本内容处理</h3><p>1.grep str /tmp/test<br>2.grep ^str /tmp/test%str 开始的文件<br>3.grep [0-9] /tmp/test%包含数字的<br>4.grep str -r /tmp/*%在目录 tmp以及子目录查找<br>5.diff file1 file2%文本间不同的<br>6.sdiff file1 file2%一对比的方式显示不同</p><h3 id="7-Vim文件编辑器"><a href="#7-Vim文件编辑器" class="headerlink" title="7.Vim文件编辑器"></a>7.Vim文件编辑器</h3><p>1.vim test.txt<br>2.按 i 键 进入</p><h3 id="8-查询"><a href="#8-查询" class="headerlink" title="8.查询"></a>8.查询</h3><p>1.find / -name file1<br>2.find / -user user1<br>3.find /home/user1 -name *.bin %查询扩展名 .bin 文件</p><h3 id="9-压缩、解压"><a href="#9-压缩、解压" class="headerlink" title="9.压缩、解压"></a>9.压缩、解压</h3><p>1.tar -cvf archive.tar file %文件file压缩成archive.tar<br>    （C:建立压缩文档 V：显示所有过程  F显示档案名称）<br>2.tar -tf archive.tar%显示一个包的内容<br>3.tar -xvf archive.tar%解压一个包<br>4.tar -xavf archive.tar.gz%解压.tar.gz压缩包<br>    （X:解压  tar.gz:压缩/解压的为tar.gz 文件）<br>5.tar -xjvf archive.tar.bz2 -C /tmp<br>                %把压缩包解压到 /tmp 目录下</p><h3 id="10-修改文件目录权限"><a href="#10-修改文件目录权限" class="headerlink" title="10.修改文件目录权限"></a>10.修改文件目录权限</h3><p>1.chmod 777 test %test文件修改为EveryOne可用<br>2.chmod a+rwx test%同上<br>    （a：所有用户 g:同组用户 o:其他用户r:读w:写x：执行 ）<br>3.chgrp student /opt/book%把/opt/book用户组修改为 student<br>4.chown zhangsan /opt/book% /opt/book文件所有者修改为  zhangsan</p><p>2.1.3 主机名</p><h3 id="11-查找主机名"><a href="#11-查找主机名" class="headerlink" title="11.查找主机名"></a>11.查找主机名</h3><p>1.hostname </p><h3 id="12-永久修改主机名"><a href="#12-永久修改主机名" class="headerlink" title="12.永久修改主机名"></a>12.永久修改主机名</h3><p>1.hostnamectl set-hostname hadoop<br>  cat /etc/hostname<br>2.vim /etc/hosts<br>  cat /etc/hosts</p><h2 id="1-1-4分区管理"><a href="#1-1-4分区管理" class="headerlink" title="1.1.4分区管理"></a>1.1.4分区管理</h2><h3 id="1-查看硬盘使用状况"><a href="#1-查看硬盘使用状况" class="headerlink" title="1.查看硬盘使用状况"></a>1.查看硬盘使用状况</h3><p>1.df -h %-h:显示为易读格式</p><h3 id="2-硬盘分区"><a href="#2-硬盘分区" class="headerlink" title="2.硬盘分区"></a>2.硬盘分区</h3><p>1.fdisk -l%查看分区<br>2.fdisk /dev/sda3%使用fdisk管理分区</p><h3 id="3-挂载硬盘"><a href="#3-挂载硬盘" class="headerlink" title="3.挂载硬盘"></a>3.挂载硬盘</h3><p>1.mkdir /mnt/vcdrom<br>2.mount</p><h2 id="1-1-5文件目录访问权限"><a href="#1-1-5文件目录访问权限" class="headerlink" title="1.1.5文件目录访问权限"></a>1.1.5文件目录访问权限</h2><h3 id="1-查看文件和目录访问权限"><a href="#1-查看文件和目录访问权限" class="headerlink" title="1.查看文件和目录访问权限"></a>1.查看文件和目录访问权限</h3><pre><code>    ls  -l /boot</code></pre><h3 id="2-修改文件和目录访问权限"><a href="#2-修改文件和目录访问权限" class="headerlink" title="2.修改文件和目录访问权限"></a>2.修改文件和目录访问权限</h3><pre><code>    chown [选项] 属主[.属主] &lt;文件名&gt;    -c文件更改后显示动作信息（历史）     -R 对目录以及子目录，文件递归设置    -v输出详细内容        chgrp [选项] 属主[.属主] &lt;文件名&gt;    -c     -R    chmod [选项] 属主[.属主] &lt;文件名&gt;    -c    -R    -v    -help        u        g        o        a        操作模式：+,-,=        权限组合：r,w,x        例题：增加文件/root/first.sh的属性可执行权限，              增加文件/root/file1.txt的属组可写权限            chmod u+x /root/first.sh            chmod g+w /root/file1.txt         例题：用数字赋予/root/student1.txt仅有属主可读写权限            chmod 600 /root/test.sh</code></pre><h2 id="1-1-6用户命令管理用户"><a href="#1-1-6用户命令管理用户" class="headerlink" title="1.1.6用户命令管理用户"></a>1.1.6用户命令管理用户</h2><h3 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1.创建用户"></a>1.创建用户</h3><pre><code>    useradd [选项] &lt;用户&gt;    -c comment注释信息     -g group主群组    -G group附加组    -d home主目录路径    -s shell登录Shell环境/bin/bash    -u UID用户ID    -e expire过期日期，默认null xxxx-xx-xx    -f inactive过期后可用天数</code></pre><h3 id="2-删除用户"><a href="#2-删除用户" class="headerlink" title="2.删除用户"></a>2.删除用户</h3><pre><code>    userdel [选项] &lt;用户&gt;    -r删除时是否删除主目录    rm -r userA</code></pre><h3 id="3-密码设置与修改"><a href="#3-密码设置与修改" class="headerlink" title="3.密码设置与修改"></a>3.密码设置与修改</h3><pre><code>    passwd [选项] &lt;用户&gt;    -l name锁住普通用户    -u name 解锁普通用户    -x dayMax使用时间    -n dayMin使用时间    -d 删除用户密码</code></pre><h3 id="4-用户属性修改"><a href="#4-用户属性修改" class="headerlink" title="4.用户属性修改"></a>4.用户属性修改</h3><pre><code>    usermod [选项] &lt;用户&gt;    -c comment修改用户注释    -g group修改用户主组    -G group修改用户附加组    -l name修改用户账号名    -L 锁定用户    -U解锁用户    -u UID修改用户ID值    -d home修改用户主目录路径    -p passwd修改用户密码</code></pre><h3 id="5-显示当前用户"><a href="#5-显示当前用户" class="headerlink" title="5.显示当前用户"></a>5.显示当前用户</h3><pre><code>    whoami6.显示用户信息    id [选项] &lt;用户&gt;    -u显示id    -g显示主群组id    -G显示附加群组id    </code></pre><h2 id="1-1-7使用命令管理用户组"><a href="#1-1-7使用命令管理用户组" class="headerlink" title="1.1.7使用命令管理用户组"></a>1.1.7使用命令管理用户组</h2><h3 id="1-创建用户组-1"><a href="#1-创建用户组-1" class="headerlink" title="1.创建用户组"></a>1.创建用户组</h3><pre><code>    groupadd [选项] &lt;用户&gt;    -g gid 用户组id    -r 建立系统组</code></pre><h3 id="2-删除用户组"><a href="#2-删除用户组" class="headerlink" title="2.删除用户组"></a>2.删除用户组</h3><pre><code>    groupdel &lt;用户组名&gt;需要删除所有在内用户</code></pre><h3 id="3-修改用户组"><a href="#3-修改用户组" class="headerlink" title="3.修改用户组"></a>3.修改用户组</h3><pre><code>    groupmod [选项] &lt;用户&gt;    -g id 修改用户组中添加用户    -n name用户组中删除用户</code></pre><h3 id="4-用户组成员添加-x2F-删除"><a href="#4-用户组成员添加-x2F-删除" class="headerlink" title="4.用户组成员添加/删除"></a>4.用户组成员添加/删除</h3><pre><code>    gpasswd [选项] &lt;用户&gt;    -a name向用户组添加用户    -d name从用户组删除用户</code></pre><h3 id="5-用户组查询"><a href="#5-用户组查询" class="headerlink" title="5.用户组查询"></a>5.用户组查询</h3><pre><code>    groups [用户名]    groups userA第一个为主组</code></pre><h2 id="1-1-8使用fdisk命令分区"><a href="#1-1-8使用fdisk命令分区" class="headerlink" title="1.1.8使用fdisk命令分区"></a>1.1.8使用fdisk命令分区</h2><pre><code>fdisk [选项] [磁盘设备文件]fdisk -l例题：在磁盘/dev/sdb 创建3分区，1扩展分区。（1区10GB，2,3分区8GB，其余为扩展分区）</code></pre><h3 id="1-执行分区命令"><a href="#1-执行分区命令" class="headerlink" title="1.执行分区命令"></a>1.执行分区命令</h3><pre><code>    fdisk /dev/sdb</code></pre><h3 id="2-查询帮助信息"><a href="#2-查询帮助信息" class="headerlink" title="2.查询帮助信息"></a>2.查询帮助信息</h3><pre><code>    m</code></pre><h3 id="3-创建第1个主分区"><a href="#3-创建第1个主分区" class="headerlink" title="3.创建第1个主分区"></a>3.创建第1个主分区</h3><pre><code>    n    p    Enter</code></pre><h3 id="4-创建扩展分区"><a href="#4-创建扩展分区" class="headerlink" title="4.创建扩展分区"></a>4.创建扩展分区</h3><pre><code>    n    e    Enter</code></pre><h3 id="5-显示分区信息"><a href="#5-显示分区信息" class="headerlink" title="5.显示分区信息"></a>5.显示分区信息</h3><pre><code>    p</code></pre><h3 id="6-结束创建分区"><a href="#6-结束创建分区" class="headerlink" title="6.结束创建分区"></a>6.结束创建分区</h3><pre><code>    w</code></pre><pre class="line-numbers language-none"><code class="language-none">1.例题在扩展分区建立2逻辑分区，第1个逻辑分区8G，其余为第2个逻辑分区（1）执行分区命令 fdisk /dev/sdb（2）创建第1个逻辑分区 n Enter（3）创建第2个逻辑分区 n Enter（4）显示分区结果 p（5）结束创建分区 w2.例题删除第2逻辑分区（1）对指定磁盘/dev/sdb执行分区命令 fdisk /dev/sdb（2）输入d 进入删除分区子命令 d（3）输入要删除的分区代码 6（4）显示分区信息 p（5）保存当前分区信息并退出分区命令 w<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 基础命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java, the world&#39;s best programming language</title>
      <link href="/2022/12/25/Java-the-best-langage-at-the-World/"/>
      <url>/2022/12/25/Java-the-best-langage-at-the-World/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-Java基础"><a href="#1-Java基础" class="headerlink" title="1.Java基础"></a>1.Java基础</h2><h3 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h3><h4 id="1-List"><a href="#1-List" class="headerlink" title="1.List"></a>1.List</h4><h5 id="1-List数据的指定修改"><a href="#1-List数据的指定修改" class="headerlink" title="1.List数据的指定修改"></a>1.List数据的指定修改</h5><pre class="line-numbers language-none"><code class="language-none">package ArrayForiter;import java.util.*;import java.util.stream.*;import org.junit.jupiter.api.Test;public class ListItemRemoveTests { public List&lt;String&gt; initList = Arrays.asList("360","aliyun","baidu","bilibili","amazon","bytedance","Tencent"); /*  * 增强for循环删除 ConcurrentModificationException  */ public void test1() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  for(String element : list) {   if(element.startsWith("b")) {    list.remove(element);   }  }  System.out.println(list); } @Test public void test1_1() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  list.forEach ((e) -&gt; {   if(e.startsWith("b")) {    list.remove(e);   }  });  System.out.println(list);   }  /* 低级for size, 删除不全。（功能不完善的 bug */ public void test2() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  for (int i = 0; i &lt; list.size(); i++) {   String str = list.get(i);   if(str.startsWith("b")) {    list.remove(i);   }  }  System.out.println(list); }  /*   * 角标越界  * 无法阻止 for的i增大  */ public void test3() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  int size = list.size();  for (int i = 0; i &lt; size; i++) {   String str = list.get(i);   if(str.startsWith("b")) {    list.remove(i);   }  }  System.out.println(list); } /*  * 逆序删除   * 从后面开始，可以改变 for 增大导致的角标越界  */ public void test4() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  for(int i=list.size()-1;i&gt;0;i--) {   String str = list.get(i);   if(str.startsWith("b")) {    list.remove(i);   }  }  System.out.println(list); } /*  * 调用 iteration 提供的方法  */ public void test5() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  for(Iterator&lt;String&gt; iterator = list.iterator();iterator.hasNext();) {   String str = iterator.next();   if(str.startsWith("b")) {    iterator.remove();   }  }  System.out.println(list); }  public void test5_1() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  for(Iterator&lt;String&gt; iterator = list.iterator();iterator.hasNext();) {   String str = iterator.next();   if(str.startsWith("b")) {    list.remove(str);  // 用的 iterat 方法 但没在关键点用iterator.remove();   }  }  System.out.println(list); } /*  * filter 过滤   * 得到一定量的反向元素  */ public void test6() {  List&lt;String&gt; list = new ArrayList&lt;String&gt;(initList);  list = list.stream().filter(e -&gt; !e.startsWith("b")).collect(Collectors.toList());  System.out.println(list); }   public static void main(String[] s) {  ListItemRemoveTests a = new ListItemRemoveTests();    /*   * 原因： Iterator迭代时不能remove。    * 是同步操作问题  两者修改次数不一致   */  //a.test1();  //a.test1_1();    //a.test2();  //a.test3();    a.test4();  a.test5();    /*   * 用的 iterat 方法 但没在关键点用iterator.remove();   */  //a.test5_1();    a.test6(); }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Java策略模式"><a href="#2-Java策略模式" class="headerlink" title="2.Java策略模式"></a>2.Java策略模式</h2><p>IStack.java</p><pre class="line-numbers language-none"><code class="language-none">public interface IStack&lt;T&gt; {  /**  * 初始化栈  * @param maxSize: 数组的最大长度。栈的最大长度。  */ public void initStack(int maxSize);  /**  * 销毁栈  */ public void destroyStack();  /**  * 添加数据，进栈。  * @param data 要被添加的数据.类型不确定，所以用泛型。  */ public void push(T data);  /**  * 删除栈顶元素  */ public void pop(); /**  * 判断栈是否为空  * @return true or false.  */ public boolean isEmpty();  /**  * 获取栈顶元素  * @return 栈顶数据元素。数据元素的类型不确定，所以是泛型。  */ public T getTop();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Stack.java</p><pre class="line-numbers language-none"><code class="language-none">public class Stack&lt;T&gt; implements IStack&lt;T&gt; { private int length;// 元素个数。栈的长度。 private T arr[];// 用于存放数据的数组。因为是顺序栈，所以用数组。数组取值是用角标 arr[0] arr[1] ... private int maxSize; /**  * 构造函数  *   * @param maxSize  *            数组的最大长度  */ public Stack(int maxSize) {  this.maxSize = maxSize;  initStack(maxSize); } @Override public void initStack(int maxSize) {  this.maxSize = maxSize;  // 初始化数组。为什么要初始化数组，因为数组不初始化，就没有分配内存空间，是一个空对象，也就是空指针。  arr = (T[]) new Object[maxSize]; } @Override public void destroyStack() {  // TODO Auto-generated method stub } // 添加值 1判断 原有数值长度 是否 已满于最大数组长 // 2 数值 赋予 原有数组末，数组长增加 @Override public void push(T data) {  if(this.length &gt;= this.maxSize){   System.out.println("已满");   return;  }  arr[this.length] = data;  this.length++; } // 添加值 1判断 原有数值长度 是否 为零 // 2 数值 赋予 原有数组 次末，数组长减少 @Override public void pop() {  if(this.length == 0){   System.out.println("已经到底，无法pop");   return;  }  arr[this.length-1] = null;  this.length--; } // 指针 1判断长度 如果为零返回 否则 返回数组 次长度 @Override public T getTop() {  if(this.length == 0){   return null;   }  return this.arr[this.length-1];     } @Override public boolean isEmpty() {  return this.length == 0; }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Test.java</p><pre class="line-numbers language-none"><code class="language-none">public class Test {  public static void main(String[] args) {  Stack&lt;Integer&gt; s = new Stack&lt;&gt;(1024); // 指定栈的长度最大值是1024.      s.push(1);  s.push(2);  s.push(3);    s.pop();  s.pop();    Integer top = s.getTop();  System.out.println(top); }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构 </category>
          
          <category> 策略模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 策略模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
